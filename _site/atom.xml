<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

 <title>Ryan Bigg's Blog</title>
 <link href="https://ryanbigg.com/atom.xml" rel="self"/>
 <link href="https://ryanbigg.com"/>
 <updated>2024-05-21T06:58:48+10:00</updated>
 <id>https://ryanbigg.com/</id>
 <author>
   <name>Ryan Bigg</name>
   <email>me@ryanbigg.com</email>
 </author>

 
 <entry>
   <title>Thought Experiment: Without React or GraphQL</title>
   <link href="https://ryanbigg.com/2024/05/without-react-or-graphql"/>
   <updated>2024-05-20T00:00:00+10:00</updated>
   <id>https://ryanbigg.com/2024/05/without-react-or-graphql</id>
   <content type="html"><![CDATA[<p>I’ve spent a great deal of my writing time in the past few years arguing for GraphQL in my <a href="https://pragprog.com/titles/d-rbgql/graphql-for-rails-developers/">GraphQL for Rails Developers</a> and its frontend companion Apollo in the <a href="https://pragprog.com/titles/d-rbgql/graphql-for-rails-developers/">Apollo Handbook</a>. I think these are very good tools for providing a clear separation between an API layer and a frontend layer.</p>

<p>But in saying that, I acknowledge there is no silver bullet for software development. So what would I do if I <em>couldn’t</em> use React or GraphQL?</p>

<p>To replace React on the frontend, I would use <a href="https://viewcomponent.org/">View Component</a> as I have written about <a href="https://ryanbigg.com/2024/01/view-components-table-edition">here</a> and <a href="https://ryanbigg.com/2023/06/rails-7-react-typescript-setup">here</a>. I could also be convinced to use <a href="https://www.phlex.fun/">Phlex</a>.</p>

<p>I think having a typed layer between your database and view is just something that <em>makes sense</em>, and so to that end I would define a <em>separate</em> class for the data types for these components, using <code>dry-types</code> and then pass objects of those classes to the view, in a way that if you squint hard enough you could see it as the Presenter Pattern. I proposed something similar to this <a href="https://ryanbigg.com/2022/03/typed-view-components">two years ago in my “Typed View Components” post</a></p>

<p>Riffing on the example from that post, I would have this as:</p>

<pre><code class="language-ruby">class RefundComponent &lt; ViewComponent::Base
  extend Dry::Initializer
  Types = Dry.Types()

  class Refund &lt; Dry::Struct
    schema schema.strict

    attribute :standalone, Types::Bool
    attribute :amount, Types::Float
    attribute :currency, Types::String
  end

  option :refund, Refund
end
</code></pre>

<p>This allows you to keep together the logic of the component (both its Ruby code and its associated views) and the presenter in one directory.</p>

<p>In the controller, the code would look like this:</p>

<pre><code class="language-ruby">refund = RefundComponent::Refund.new(
  standalone: @refund.standalone?
  amount: @refund.amount,
  currency: @refund.currency,
)

@refund_component = RefundComponent.new(refund: refund)
</code></pre>

<p>This would still give us an interface <em>similar</em> to GraphQL, where the connecting layer between the database and the frontend is still typed. I think it’s teetering on the edge of being too verbose, but in all things trade-offs.</p>

<p>You then don’t end up exposing any way of doing database queries to the view, which would help prevent N+1 queries. And you can test your views in isolation from the database too. The <code>refund</code> passed to the component doesn’t have to come from the database; it could be a stubbed object, as long as it responds to the right methods.</p>

<p>In the view file itself you might or might not get smart tab-completion like you do within TypeScript-powered GraphQL code, but I think that’s a fair trade-off.</p>

<p>Another benefit here is that all the code is in one language, rather than three (Ruby, GraphQL and TypeScript), and that might make it easier for frontend-adverse people to pick it up as well.</p>
]]></content>
 </entry>
 
 <entry>
   <title>What was that branch?</title>
   <link href="https://ryanbigg.com/2024/05/what-was-that-branch"/>
   <updated>2024-05-14T00:00:00+10:00</updated>
   <id>https://ryanbigg.com/2024/05/what-was-that-branch</id>
   <content type="html"><![CDATA[<p>When I’m working in an app I tend to have multiple branches on the go at any one time while waiting for feedback on those branches, be that feedback from CI systems or people. Occasionally, it’s a few days / weeks between visits to a branch because the flow of work meant it that way. And sometimes, I forget what the branch name was.</p>

<p>To help with this, I’ve got this function in my <code>~/.zshrc</code>:</p>

<pre><code>fbr () {
	local branches branch
	branches=$(git for-each-ref --count=30 --sort=-committerdate refs/heads/ --format="%(refname:short)")  &amp;&amp; branch=$(echo "$branches" |
  fzf-tmux -d $(( 2 + $(wc -l &lt;&lt;&lt; "$branches") )) +m)  &amp;&amp; git checkout $(echo "$branch" | sed "s/.* //" | sed "s#remotes/[^/]*/##")
}
</code></pre>

<p>This complicated looking function finds the 30 most recent local branches and presents them in a date-ordered list using <code>fzf-tmux</code>. To pick a branch, and I move up and down the list with the arrow keys, then hit enter when I find the branch I want.</p>
]]></content>
 </entry>
 
 <entry>
   <title>code is like garden</title>
   <link href="https://ryanbigg.com/2024/05/code-is-like-garden"/>
   <updated>2024-05-04T00:00:00+10:00</updated>
   <id>https://ryanbigg.com/2024/05/code-is-like-garden</id>
   <content type="html"><![CDATA[<p>Code is like garden.</p>

<p>Sometimes, you come into garden and find out past gardener put sun-loving plant in the cupboard at the back of the shed. You discover more sheds and cupboards later on.</p>

<p>The materials used in shed construction make you think past gardener may have been ticking off a list of known elements, rather than trying to build sturdy shed.</p>

<p>Past gardener put picket fence going vertically up the side of one shed. You ask other gardeners why the fence is there and they say “it’s always been that way”. No other shed has a fence.</p>

<p>Some gardeners like a particular brand of hand trowel and get into religious arguments over which hand trowel is better.</p>

<p>Sometimes, GM (Garden Manager) ask how long it takes to grow a tree. GM gets grumpy when asked what kind of tree they are talking about.</p>

<p>GM gets jealous of fig tree in big city Botanic Gardens (lots of pro gardeners there). Wants you to grow one exactly like it in 3 months, same size and fruit quantity. The fig tree in the gardens is over four stories tall and has existed for decades. You will be the only gardener tasked with growing this tree.</p>

<p>Weeding will be prioritised next weekend. This weekend is for planting new things that the GM purchased and spraying the bugs, but only ones VIP buyer has pointed out. It rains the next 3 weekends, and the weeds run wild. More things come in to plant in the mean time. You weed in between planting, without telling GM.</p>

<p>Other gardeners can only grow one type of plant and refuse to grow others. Others still seem to know every plant, the perfect conditions under which they grow, their quirks, their Latin names, taxonomy and sub-varietals.</p>

<p>There appears to be a new plant variety released at least weekly. You haven’t yet learned the last five you’ve picked up.</p>
]]></content>
 </entry>
 
 <entry>
   <title>One year with the Ergodox EZ</title>
   <link href="https://ryanbigg.com/2024/04/one-year-with-the-ergodox-ez"/>
   <updated>2024-04-29T00:00:00+10:00</updated>
   <id>https://ryanbigg.com/2024/04/one-year-with-the-ergodox-ez</id>
   <content type="html"><![CDATA[<p>A year ago I upgraded from a <a href="https://kinesis-ergo.com/keyboards/freestyle-edge-rgb/">Kinesis Freestyle Edge</a> to an <a href="https://ergodox-ez.com">Ergodox EZ</a>. What initially enticed me was the thumb keys, as well as the ability to program different macros into the “spare” keys littered around the board. (I still have the Kinesis Freestyle sitting in storage, buyers enquire within…)</p>

<p>I used <a href="https://monkeytype.com">Monkeytype</a> to practice typing on the keyboard, and the stats there show that it took me about a month to go from the initial speed of 40wpm (quite painful) back up to 90wpm. That’s when I started feeling properly comfortable with it. I can now do about 130wpm on this keyboard, which is the same speed I could do on the Freestyle and my laptop keyboard.</p>

<p>I originally bought the Kinesis keyboard because of persistent shoulder pain from using a single keyboard. Having two keyboards that I can keep a little over shoulder width apart has helped to keep my physiotherapy bills down. Since using split keyboards, I haven’t had to go to a physio to get my shoulders “unlocked”. So the keyboards have paid for themselves that way.</p>

<p>Since buying the Ergodox, I’ve also started to make good use of the layering system. You can see the full set of layouts here:</p>

<div style="padding-top: 60%; position: relative;">
	<iframe src="https://configure.zsa.io/embed/ergodox-ez/layouts/5wDLX/latest/0" style="border: 0; height: 100%; left: 0; position: absolute; top: 0; width: 100%"></iframe>
</div>

<p>A few things to note about Layer 0:</p>

<ol>
  <li>Backspace is where caps lock usually is. I feel strongly about this – it should be standard on all keyboards.</li>
  <li>Held keys: Z becomes Left control, Forward slash becomes right control, semi-colon switches to the 2nd layer.</li>
  <li>Backtick and tilde are on the bottom left of the left keyboard. This button, when held, switches to the 1st layer.</li>
  <li>Command, option and escape are on the thumb keys. No “Emacs claw” for complicated shortcuts.</li>
  <li>Top left is equals. It gets special preference as I type it a lot when coding.</li>
  <li>The “Hyper” key is one of the keys required for my <a href="https://www.hammerspoon.org/">Hammerspoon</a> shortcuts. I use these to move quickly between apps.</li>
  <li>There are shortcuts on the thumb keys for cut (the knife), paste and copy.</li>
  <li>I could probably remap that spare “Tab” on the right thumb to something else – I use the top-left tab out of habit. I don’t have an immediate idea of what it could map to.</li>
</ol>

<p>A keen observer would note that there’s no curly brackets on here, and yet I still somehow manage to write Ruby hashes and JavaScript objects. I keep those on Layer 1, where the “E” and “R” keys are my brackets. If I hold backtick (bottom left of the left keyboard), this triggers the layer switcher to switch to Layer 1. My keyboard indicates this by lighting up a red LED. When I then press “E”, I get a square bracket. If I do the same holding of backtick but press “E” twice, I get a curly bracket. I think this is one of the cooler features of this keyboard. You can configure actions when a key is tapped, double tapped, held, or tapped then held. I use the first 3 of these, but haven’t found a use for tapped then held yet.</p>

<p>On Layer 1’s right-hand panel is the arrow keys. I still can’t map it in my brain that left and right arrows are on the left keyboard, and up and down are on the right. So I’ve got the traditional arrow layout on that layer, on the right of the keyboard roughly where my hand expects it to be.</p>

<p>Next, we have Layer 2 which is the media controls. On my laptop keyboard, these are on the function keys, which always felt like a bit of a hard reach. To get to this layer I hold the semi-colon key, and the keyboard indicates it’s switched with a green LED. I can then do all the regular music things like play, pause, mute, etc.</p>

<p>For reasons that are completely opaque to me, there can be up to 32 different layers on the keyboard. I cannot imagine ever needing more than the few that I have right now. Even thinking about the keyboard contortion that would be required to switch to a 32nd layer and not the 28th layer is giving me a headache.</p>

<p>Finally: a word on the switches inside the keyboard itself. The keyboard came with Cherry Brown switches which are what I would consider to be the greatest argument ever against working from the office. They were ridiculously loud. And stiff enough that even someone who types as hard as I do noticed how hard I had to press. I’ve since replaced the switches with Cherry Reds which are quieter and not as stiff. I think this has made maybe a 5-10% improvement on my accuracy and speed for this keyboard.</p>
]]></content>
 </entry>
 
 <entry>
   <title>Tailwind has won</title>
   <link href="https://ryanbigg.com/2024/03/tailwind-has-won"/>
   <updated>2024-03-26T00:00:00+11:00</updated>
   <id>https://ryanbigg.com/2024/03/tailwind-has-won</id>
   <content type="html"><![CDATA[<p>Over the last couple of months, I’ve been working across multiple applications that use various CSS frameworks. Specifically: <a href="https://bulma.io/">Bulma</a>, <a href="https://getbootstrap.com/">Bootstrap</a> and <a href="https://tailwindcss.com/">Tailwind</a>. There are (at least) three distinct CSS frameworks within these applications because each of these apps have been developed over almost a decade and a half, and the flavour-of-the-month has changed a lot over that time. As people have worked on the systems, they have left the “fingerprints” of personal choices.</p>

<p>Three years ago, I became the Platform Tech Lead at Fat Zebra, which meant I was in charge of the technical side of things when it comes to our frontend. Part of this job meant standardising our frontend tech stack. At this time, Bootstrap (around v4.5) and Bulma (0.9.4) were the only two CSS frameworks used at Fat Zebra. After talking about it with the team, we decided to not use <em>either</em> of these frameworks, and instead opted to go with Tailwind.</p>

<p>The reason for this is that we found Bulma lacking quite a lot of the common things from CSS frameworks we wanted – it was too light. And, similarly, we found Bootstrap <em>too heavy</em> – it did too much.</p>

<p>Tailwind on the other hand, we found <em>just right</em>. It has an absolute wealth of styles, its documentation is absolutely stellar, and the preprocessor that shrinks the base CSS file to <em>just the styles you are using</em>.</p>

<p>On top of this, we’ve found the <a href="https://flowbite.com/">Flowbite</a> component library to be incredibly helpful to declare base styles for our components. Our designer has integrated these styles into our Design System, called Zeal, and he provides designs in Figma based off these modified Flowbite components. These changes are then brought into our code through the <a href="https://tailwindcss.com/docs/configuration">Tailwind config file</a>, that’s shared across our projects.</p>

<p>So now instead of having <em>three</em> distinct CSS frameworks, we’re undertaking work to use just the one: Tailwind, in combination with the customizations from our design system.</p>

<p>To share these Tailwind styles across components, we’ve got two methods that we rely on.</p>

<p>For React apps, we use React components with these class names specified in the <code>className</code> prop. Or if we’re using these in non-React-apps, we’ll move these styles into a shared CSS file, using Tailwind’s <a href="https://tailwindcss.com/docs/reusing-styles#extracting-classes-with-apply"><code>@apply</code> directive</a>:</p>

<pre><code class="language-css">.zeal-button {
  @apply py-2 px-4 h-10 inline-flex items-center rounded-lg text-sm whitespace-nowrap disabled:cursor-not-allowed;
}

.zeal-button-primary {
  @apply zeal-button bg-primary-500 text-white disabled:bg-primary-300 active:bg-primary-700 hover:bg-primary-600 focus:outline-none focus:ring focus:ring-primary-300;
}
</code></pre>

<p>Then we can use these as substitutions in our HTML, instead of spamming it with all the classes:</p>

<pre><code class="language-html">&lt;button class='zeal-button-primary'&gt;
</code></pre>

<p>This setup works incredibly well for our little team, and I suspect it would scale as well for an even bigger team. Changes get applied to the design system, which then are updated in Figma, and those updates flow through to our React components or our CSS files, depending on which component it is.</p>

<p>So for all of these reasons above, <strong>Tailwind has won the CSS framework wars.</strong> It provides a set of very sensible defaults out of the box, with just enough extensibility for us to build a design system on. It works well with React components, or regular HTML views. And it has a ton of useful documentation and example components out there that you can use to get started.</p>
]]></content>
 </entry>
 
 <entry>
   <title>View Components, Table Edition</title>
   <link href="https://ryanbigg.com/2024/01/view-components-table-edition"/>
   <updated>2024-01-26T00:00:00+11:00</updated>
   <id>https://ryanbigg.com/2024/01/view-components-table-edition</id>
   <content type="html"><![CDATA[<p>Last night I saw <a href="https://blog.willcosgrove.com/a-tale-of-two-phlexes">this post from Will Cosgrove</a> showing how he would build a table interface in Phlex. I really like the terseness of the syntax he came up with, and I decided to see how I would approach this too, but using the <a href="https://viewcomponent.org">View Component</a> gem. This isn’t to say one approach is better than the other – more to show an alternative. Phlex <em>and</em> View Component are <em>both</em> great!</p>

<p>Ultimately, the View Component code is much the same, but we define a Ruby class to wrap our table:</p>

<pre><code class="language-ruby">class UsersTableComponent &lt; ViewComponent::Base
  def initialize(users:)
    @users = users
  end

  def call
    component = Zeal::TableComponent.new(rows: @users) do |table|
      table.column("First Name", &amp;:first_name)
      table.column("Last Name", &amp;:last_name)
      table.column("Email", &amp;:email)
    end

    render component
  end
end
</code></pre>

<p>This can then be called in view by doing:</p>

<pre><code>&lt;%= render UsersTableComponent.new(users: @users) %&gt;
</code></pre>

<p>The <code>Zeal::TableComponent</code> is defined as this:</p>

<pre><code class="language-ruby">module Zeal
  module Tables
    class TableComponent &lt; ViewComponent::Base
      attr_reader :columns, :rows

      def initialize(rows: [], &amp;block)
        @columns = []
        @rows = rows
        yield self
      end

      def column(label, &amp;block)
        @columns &lt;&lt; {
          label: label,
          block: block
        }
      end

      def render_headers
        render Zeal::Tables::HeaderCellComponent.with_collection(columns)
      end

      def render_cells(row)
        render Zeal::Tables::BodyCellComponent.with_collection(columns, row: row)
      end
    end
  end
end
</code></pre>

<p>The code that’s mostly HTML doesn’t get written by some fancy pants Ruby, instead I used a html+ERB file:</p>

<pre><code class="language-erb">&lt;table class='min-w-full' role='table'&gt;
  &lt;thead class="bg-gray-100 border-b border-gray-200"&gt;
    &lt;tr role="row"&gt;
      &lt;%= render_headers %&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;

  &lt;tbody role='rowgroup'&gt;
    &lt;% rows.each do |row| %&gt;
      &lt;tr class='bg-white border-b border-gray-200 align-center'&gt;
        &lt;%= render_cells(row) %&gt;
      &lt;/tr&gt;
    &lt;% end %&gt;
  &lt;/thead&gt;
&lt;/table&gt;
</code></pre>

<p>The header cell component then defines all the CSS for the header cells:</p>

<pre><code class="language-erb">&lt;th class="sticky top-0 z-30 opacity-95 bg-gray-100 p-4 text-xs tracking-wide text-left text-gray-600 font-bold uppercase align-top"&gt;
  &lt;%= header_cell[:label] %&gt;
&lt;/th&gt;
</code></pre>

<p>With its corresponding Ruby code being:</p>

<pre><code class="language-ruby">module Zeal
  module Tables
    class HeaderCellComponent &lt; ViewComponent::Base
      attr_reader :header_cell
      def initialize(header_cell:)
        @header_cell = header_cell
      end

    end
  end
end
</code></pre>

<p>And the body cell component does the same, but for the body cells:</p>

<pre><code class="language-erb">&lt;td class="p-3 text-sm text-gray-900 whitespace-nowrap" role='cell'&gt;
  &lt;%= column[:block].call(row) %&gt;
&lt;/td&gt;
</code></pre>

<p>With its corresponding code being:</p>

<pre><code class="language-ruby">module Zeal
  module Tables
    class BodyCellComponent &lt; ViewComponent::Base
      attr_reader :column, :row
      with_collection_parameter :column

      def initialize(column:, row:)
        @column = column
        @row = row
      end
    end
  end
end

</code></pre>

<p>Each of the body cells knows which column it’s going to be rendering, and the block for that column knows which user row it’s rendering. This means we can specify both the header for the column and each row inside the same method call:</p>

<pre><code>table.column("First Name", &amp;:first_name)
</code></pre>

<p>If the way to render the value is more complicated, we can pass a block:</p>

<pre><code class="language-ruby">table.column("First Name") do |user|
  tag.div(class: "text-center") { user.first_name }
end
</code></pre>

<p>If we need any specific helper for this component, we can define it in the <code>UserTableComponent</code> (rather than dumping it into a random file in <code>app/helpers</code>!):</p>

<pre><code class="language-ruby">def status_label(user)
  if user.active?
    Zeal::Tags::SuccessComponent.new(text: "Active")
  else
    Zeal::Tags::DangerComponent.new(text: "Inactive")
  end
end
</code></pre>

<p>Then to use this component, we can pass the method for the column:</p>

<pre><code class="language-ruby">table.column("Status", &amp;method(:status_label))
</code></pre>

<p>All of this syntax could probably be expanded to support arbitrary classes on each column header and table cell, but for now I think it’s a good start.</p>
]]></content>
 </entry>
 
 <entry>
   <title>Audit Logging Notes</title>
   <link href="https://ryanbigg.com/2023/12/audit-logging-notes"/>
   <updated>2023-12-20T00:00:00+11:00</updated>
   <id>https://ryanbigg.com/2023/12/audit-logging-notes</id>
   <content type="html"><![CDATA[<p>I’ve recently been working on adding audit logging to an application at work, and I wanted to share some notes on the process here, as I couldn’t find much written about it online.</p>

<p>What I could find though was GitHub’s own audit logging that they have for organizations. A lot of these notes was inspired by how they have approached this.</p>

<p>This application in question that I’m working on is called the Merchant Dashboard, and is typically used by merchants to view and process transactions. Common actions that can be taken include things such as creating purchases, issuing refunds, or setting up payment plans for their customers.</p>

<p>Audit logging means tracking all the “write” events that a user can take within our application. We want to provide a history of these actions so that merchants can look through their users’ activities. While we, as application owners, can look through the logs to determine who took what action when, our merchants have not been able to access this data themselves. This audit logging feature aims to address that.</p>

<h2 id="audit-table-schema">Audit Table Schema</h2>

<p>We have a table that tracks all the events a user takes, tracking:</p>

<ul>
  <li><code>timestamp</code>: <strong>When</strong> the event happened.</li>
  <li><code>user_id</code>: <strong>Who</strong> took the action.</li>
  <li><code>merchant_id</code>: The merchant account where the action was taken.</li>
  <li><code>action</code>: <strong>What</strong> the action was (a string like <code>create_purchase</code>)</li>
  <li><code>record_id</code> / <code>record_type</code>: If the action was taken on a record, what the record was. This can be nullable, as some actions do not involve a record that isn’t the user’s record, such as logging in, or resetting a password.</li>
  <li><code>payload</code>: Any additional metadata we wanted to include</li>
</ul>

<p>A record in the audit log table might look like:</p>

<ul>
  <li><code>timestamp</code>: 2023-12-23 09:42:00</li>
  <li><code>user_id</code>: 1</li>
  <li><code>merchant_id</code>: 2</li>
  <li><code>action</code>: <code>create_purchase</code></li>
  <li><code>record_id</code> / <code>record_type</code>: 3 / Purchase</li>
  <li><code>payload</code>: <code>{}</code></li>
</ul>

<p>Or:</p>

<ul>
  <li><code>timestamp</code>: 2023-12-23 09:42:00</li>
  <li><code>user_id</code>: 1</li>
  <li><code>merchant_id</code>: nil</li>
  <li><code>action</code>: <code>login</code></li>
  <li><code>record_id</code> / <code>record_type</code>: nil</li>
  <li><code>payload</code>: <code>{}</code></li>
</ul>

<p>We separate the login event from any particular merchant in our application, as a user can login and then switch between the different merchants they have access to.</p>

<h2 id="displaying-audit-logs">Displaying audit logs</h2>

<p>Displaying this information is done in two distinct ways. We want to display audit log information on a per-user basis; what actions has <em>this particular user</em> taken? And: we want to display audit log information for a whole merchant account; what actions <em>have all users</em> taken on <em>this particular merchant account</em>?</p>

<p>In both situations, all of these things are helpful:</p>

<ul>
  <li>Show events in reverse chronological order</li>
  <li>Group events by date</li>
  <li>Paginate events, rather than showing <em>all events ever</em>, show 25-50 events on a page.</li>
  <li>Provide searching, allowing a user to search for <em>actions</em> or <em>record IDs / types</em>.</li>
  <li>Allow users to filter by a specific date range. Default this date range to the last 30 days.</li>
  <li>Indicate potentially dangerous events with a specific label, such as password reset for the user, failed login attempts or deletion of data.</li>
</ul>

<h2 id="handling-deleted-records">Handling deleted records</h2>

<p>Also worth considering here is how you would display an audit log line for a deleted record. Say that these two events occurred:</p>

<ol>
  <li>A customer was created</li>
  <li>The same customer record was deleted</li>
</ol>

<p>Is it still relevant that the customer was created in the first place? Perhaps. A customer could’ve had a payment processed for them in the interleaving time, which would be a very relevant log line to catch.</p>

<p>For this reason, consider soft-deletion of important records using something such as <a href="https://github.com/jhawthorn/discard">the discard gem</a>. That way, you can still point the audit log to the record in question, even if it remains invisible from other parts of the system.</p>

<h2 id="staff--system-level-events">Staff / system level events</h2>

<p>Our system allows for internal staff to “impersonate” users and act on their behalf. This is often used to debug production issues. For events such as this, the impersonation attempt should be logged. If there are any other write actions taken while impersonation is happening, the event is logged against the user being impersonated, and tagged (using the payload) as an impersonation event.</p>

<p>For automatic system-level events, such as scheduled payments, we will log these as well on a merchant account level so that they appear tied to a “system” user.</p>

<h2 id="audit-log-retention">Audit log retention</h2>

<p>While it would be great to keep data for all time, disk space is finite, and when it’s not it’s <em>expensive</em>.</p>

<p>Consider automatically culling audit logs after a pre-defined period, perhaps a year or two.</p>
]]></content>
 </entry>
 
 <entry>
   <title>NaNoWriMo Retro</title>
   <link href="https://ryanbigg.com/2023/12/nanowrimo-retro"/>
   <updated>2023-12-03T00:00:00+11:00</updated>
   <id>https://ryanbigg.com/2023/12/nanowrimo-retro</id>
   <content type="html"><![CDATA[<p>I spent the month of November writing 50,000 words for National Novel Writing Month. This makes me a NaNoWriMo “winner” and I get bragging rights for a whole year that I wrote a novel.</p>

<p>I’ve <a href="https://ryanbigg.com/books">written quite a few books</a> already, but all of them have been tech books. You could argue that at least one of them, Maintainable Rails, is a work of fiction based on its title alone… but that’s a long bow to draw and very subjective.</p>

<p>National Novel Writing Month (NaNoWriMo for short) encourages budding novel authors to write a piece of fiction that’s 50,000 words long over an entire month. Traditionally the month to achieve this in is November. This works out to be 1,667 words a day or 3 full A4 pages of text, every single day, for 30 days straight.</p>

<p>I tried doing this last year and got up to 20,000 words and then bailed at the end of the 2nd week when I couldn’t work out where to take my characters next. I spent the whole year since then stewing on my “failure”.</p>

<p>This year, I intentionally kept my scope narrow. A small cast of characters and a tight location.</p>

<p>The premise: The protagonist is forced to return to the office of a large tech company, and discovers that the company has undergone a hostile takeover. The company starts encouraging a religious devotion and cult-like fervour for work. Colleagues who express the most devoutness for the company start getting promoted, and end up disappearing, with their disappearance explained away by upper management. The protagonist investigates their disappearance and discovers that things aren’t what they appear to be. They discover that the takeover was done by hostile entities from another reality who use the lives of the employees to fuel their conquest of this reality.</p>

<p>I chose this setting as a return to the office is a “nightmare situation” for me. (I exaggerate quite a lot here.) I live 250km+ from the nearest capital city, and commuting into an office would mean a 4 hour commute away, and that’s just one way. I’m sure if there was a “return to the office” mandate from where I work now, they would understand that the logistics of doing so are quite difficult!</p>

<p>For the book, I drew this “nightmare situation” far past its reasonable conclusion, and attempted to write something that skewered the almost cult-like devotion that large tech companies implicitly require from their employees.</p>

<p>Turns out, this was fertile ground as I was able to pull 50,028 words out based on the premise.</p>

<p>I spent October writing notes and ideas for the book into a single note file on my phone. Whenever I came up with an idea, no matter how silly, I wrote it down. This ended up being about 400 words itself.</p>

<p>Then when November 1 came around, I opened up Pages and the notes side by side and started writing based off the ideas. I started writing in a linear fashion, but after a few days I moved on from that and started writing whatever came to mind. I would think of a different scene, or even a different interpretation of an existing scene, and write the scene again, taking it in another direction.</p>

<p>This may seem counter-intuitive to writing a novel. But the choice I made was that this novel probably won’t ever see the light of day, at least in this incarnation, and so it didn’t matter if things weren’t a perfect line from start to end. So I sat down and wrote whatever I felt like, with an absolute insistence to myself and my family that I would hit the word target of 1,667 words each and every day for November.</p>

<p>And I managed to do that every day, bar one absolutely bonkers incredibly busy Tuesday in Week 3. The next day was brutal, and I ended up writing 3,500 with two writing sessions, one in the morning and one at night. After the night session, I went immediately to bed and slept the sleep of the dead. Thursday AM I wrote the daily quota in the morning, and Thursday PM went to bed at 8. Pushed super duper hard that week and certainly felt it!</p>

<p>In terms of things that helped: <a href="https://www.amazon.com.au/Plot-Problem-Revised-Expanded-High-velocity-ebook/dp/B00JVZ42HM/ref=mp_s_a_1_3?crid=3GJ9YFYNTA9A1&amp;keywords=no+plot+no+problem&amp;qid=1701559440&amp;sprefix=no+plot+no+problem%2Caps%2C390&amp;sr=8-3">No Plot? No Problem!</a> written by the guy who started NaNoWriMo, Chris Baty, helped set expectations for what to expect each week. The hyped exuberance of Week One, followed by the Pit of Despair and wanting to destroy everything of Week Two. Fucking hell, that was a rough week.</p>

<p>The other big thing: The overwhelming urge to let your Inner Editor rampage through your work all the time. I tried to keep him in his kennel, but he did escape from time to time.</p>

<p>The book was packed full of helpful advice from Chris and other NaNoWriMo winners with a touch of whimsy thrown in, I would recommend this guide for anyone else attempting this project too.</p>

<p>I wrote most mornings from 6amish to 7amish, while my daughter played on her iPad next to me on the desk. I occasionally wrote in the afternoons during a lunch break too. If I hadn’t finished writing by the night, I’d finish writing after my daughter went to bed. I managed to fit the writing in around my work and life schedule, without it interfering too much… although there were some times the dishes weren’t done or a gym session got missed.</p>

<p>Sometimes I wrote on my phone at the park while Ella played on the swings, or at swimming lessons while she was there too. Writing on the phone is quite slow compared to the bigger keyboard (about 30wpm vs 120wpm), but it meant that I could spend more time thinking about plot directions and what characters’ motivations were.</p>

<p>Now that the writing project is over, I’m going to let it sit for a while. I might revisit it, or I might not. I’m still feeling quite satisfied that this year I was able to write a “full novel”. Perhaps next year I could set the goal of publishing one? Either way, you can be sure I’ll be bragging about this all year.</p>

]]></content>
 </entry>
 
 <entry>
   <title>Ruby 3, Hashes and Keyword Arguments</title>
   <link href="https://ryanbigg.com/2023/11/ruby-32-hashes-and-keyword-arguments"/>
   <updated>2023-11-09T00:00:00+11:00</updated>
   <id>https://ryanbigg.com/2023/11/ruby-32-hashes-and-keyword-arguments</id>
   <content type="html"><![CDATA[<p>We debugged a fun one today.</p>

<p>There’s a method provided by Rails called <code>tag</code>, and it provides a way to write HTML tags.</p>

<p>We were using it like this:</p>

<pre><code class="language-ruby">def react_component(component_name, props, options = {})
  tag.div({
    data: {
      react_component: component_name,
      props: props.to_json,
    }
  }.merge(options)) { "" }
end
</code></pre>

<p>Did you spot the bug? We didn’t for a while. The symptom was that we were seeing completely blank <code>&lt;div&gt;&lt;/div&gt;</code> tag, when we were expecting them to have at least the <code>data</code> attributes populated.</p>

<p>The issue here has to do with how Ruby 3 has changed how it processes keyword arguments. In Ruby 2.7, the argument passed to <code>react_component</code> was interpreted as keyword arguments. In Ruby 3, it’s interpreted as a regular argument, where the value of that argument is a Hash object.</p>

<p>This means that when <a href="https://github.com/rails/rails/blob/60d05cda7f0000692391cb761caa496e8fa9014c/actionview/lib/action_view/helpers/tag_helper.rb#L320-L326">the <code>TagHelper#method_missing</code> method</a> is called in Action View, the parameters of this are:</p>

<ul>
  <li><code>called</code>: “div”</li>
  <li><code>*args</code>: <code>[{data: { react_component: component_name, props: props.to_json }}]</code>`</li>
  <li><code>**options</code>: {}</li>
</ul>

<p>The fix for this is to tell Ruby that we mean to use keyword arguments here, rather than a Hash argument:</p>

<pre><code class="language-ruby">def react_component(component_name, props, options = {})
  react_options = {
    data: {
      react_component: component_name,
      props: props.to_json,
    }
  }.merge(options)

  tag.div(**react_options) { "" }
end
</code></pre>
]]></content>
 </entry>
 
 <entry>
   <title>Saving time with fzf</title>
   <link href="https://ryanbigg.com/2023/08/saving-time-with-fzf"/>
   <updated>2023-08-27T00:00:00+10:00</updated>
   <id>https://ryanbigg.com/2023/08/saving-time-with-fzf</id>
   <content type="html"><![CDATA[<p>One of my favourite terminal utilities is <a href="https://github.com/junegunn/fzf">a little utility called fzf</a> (fuzzy finder). It’s how I save a bunch of time by not writing out commands, or even remembering them.</p>

<h2 id="command-history">Command history</h2>

<p>The thing I use fzf for the most is command history. To access the history, I use Ctrl+R and I get a list of my most recent commands:</p>

<pre><code>10024 z ryanbigg
10026 bundle exec jekyll serve
</code></pre>

<p>(The numbers represent the position of that command in my <code>.zsh_history</code> file.)</p>

<p>If I then write the word “serve”, fzf will only show me commands with that word in it:</p>

<pre><code>10026 serve
</code></pre>

<p>I usually use this for running some different Rails apps on certain ports. So I would hit Ctrl+R, and then type a particular port number such as 3004 to get:</p>

<pre><code>10007 bundle exec rails s -p 3004
</code></pre>

<p>Instead of typing out the full command, I can type Ctrl+R and 4 keystrokes later arrive at the right command.</p>

<h2 id="files-in-current-directory">Files in current directory</h2>

<p>Another thing I use fzf for is its relative file searching. Most of the time, I’m using this to run RSpec tests. I type:</p>

<pre><code>ber
</code></pre>

<p>(Which is my alias for “bundle exec rspec”), and then I hit Ctrl+T and I get a list of files in my terminal:</p>

<pre><code>app
app/models
app/models/category.rb
...
</code></pre>

<p>Then I can type a few words, or even parts of words, to get what I’m after. In this example, I’d like to find the file at <code>spec/requests/graphql/queries/repo_categories_spec.rb</code>. What a mouthful! With <code>fzf</code>, I can type <code>repocat</code> and arrive at that spec in only seven keystrokes:</p>

<pre><code>spec/requests/graphql/queries/repo_categories_spec.rb
&lt;other files here&gt;
</code></pre>

<p>When I hit enter here, my <code>ber</code> command becomes:</p>

<pre><code>ber spec/requests/graphql/queries/repo_categories_spec.rb
</code></pre>

<p>Then I can run this test.</p>

<p>(If I’ve run this command before, I might use <code>Ctrl+R</code> to find the “full version” of <code>ber</code> + the file path!)</p>

<h2 id="filtering-output">Filtering output</h2>

<p>Finally, the last way I use <code>fzf</code> is to filter output. You can pipe a list of inputs to <code>fzf</code> and it will provide its fuzzy finding features on that list.</p>

<p>The way I use this the most is this very complicated looking function:</p>

<pre><code>fbr () {
	local branches branch
	branches=$(git for-each-ref --count=30 --sort=-committerdate refs/heads/ --format="%(refname:short)")  &amp;&amp; branch=$(echo "$branches" |
  fzf-tmux -d $(( 2 + $(wc -l &lt;&lt;&lt; "$branches") )) +m)  &amp;&amp; git checkout $(echo "$branch" | sed "s/.* //" | sed "s#remotes/[^/]*/##")
}
</code></pre>

<p>I didn’t come up with this myself, but I borrowed it from elsewhere.</p>

<p>This command finds the 30 most recent Git branches (surely more than adequate!) and provides a way of filtering through them. Here’s what I see when I run <code>fbr</code> in a gem I have checked out:</p>

<pre><code>patch-1
fix-locale-with-separator
prep-1-1-4
...
</code></pre>

<p>If I type the word <code>locale</code> and hit enter, the <code>git checkout</code> command will switch me into that branch.</p>

<p>I find this one really useful when I can only half-remember a branch name, or if I’ve got a branch with an issue number in it, then I can jump straight to that branch if I know the number.</p>
]]></content>
 </entry>
 
 <entry>
   <title>Ubuntu, Ruby, Selenium Manager, Chrome and ChromeDriver</title>
   <link href="https://ryanbigg.com/2023/08/ubuntu-ruby-selenium-manager-chrome-and-chromedriver"/>
   <updated>2023-08-22T00:00:00+10:00</updated>
   <id>https://ryanbigg.com/2023/08/ubuntu-ruby-selenium-manager-chrome-and-chromedriver</id>
   <content type="html"><![CDATA[<p><a href="/2023/08/alpine-linux-selenium-manager-chrome-and-chromedriver">This is a rehash of my Alpine Linux version of this post</a>. I’ll skip the fluff here and jump straight to the good stuff.</p>

<p>The packages needed for Chromedriver are:</p>

<pre><code>libnss3 libnspr4
</code></pre>

<p>The packages needed for Chrome are:</p>

<pre><code>libatk1.0-0 libatk-bridge2.0-0 libcups2 libdrm2 libxkbcommon0 libxcomposite1 libxdamage1 libxfixes3 libxrandr2 libgbm1 libasound2
</code></pre>

<p>(There’s also a package called <code>chromium-shell</code> that installs all of these necessary dependencies, and at least half a kitchen sink too. The install time for this package is very long.)</p>

<p>The <code>Dockerfile</code> is therefore:</p>

<pre><code>FROM ruby:3.2.2

RUN apt-get update &amp;&amp; apt-get install libnss3 libnspr4 libatk1.0-0 libatk-bridge2.0-0 libcups2 libdrm2 libxkbcommon0 libxcomposite1 libxdamage1 libxfixes3 libxrandr2 libgbm1 libasound2

# OR this, but the install time is much longer:
# RUN apt-get update &amp;&amp; apt-get install chromium-shell

RUN adduser --disabled-password --gecos "" app
COPY --chown app:app . /app
WORKDIR /app
USER app

RUN bundle config set --local path vendor/bundle
RUN bundle install
CMD bundle exec irb
</code></pre>

<p>And we can then build and run this image:</p>

<pre><code>docker build . -t ubuntu-selenium
docker run -it ubuntu-selenium
</code></pre>

<p>And confirm it works by running:</p>

<pre><code class="language-ruby">Bundler.require

Selenium::WebDriver.logger.level = Logger::DEBUG

options = ::Selenium::WebDriver::Chrome::Options.new

options.add_argument("--headless")
options.add_argument("--no-sandbox")
options.add_argument("--disable-dev-shm-usage")
options.add_argument("--disable-gpu")

Selenium::WebDriver.for :chrome, capabilities: options
</code></pre>

<p>This output should include things like a check for both Chrome + ChromeDriver, which will fail:</p>

<pre><code>DEBUG Selenium [:selenium_manager] Checking chromedriver in PATH
DEBUG Selenium [:selenium_manager] Running command: chromedriver --version
DEBUG Selenium [:selenium_manager] Output: ""
DEBUG Selenium [:selenium_manager] chromedriver not found in PATH
DEBUG Selenium [:selenium_manager] Checking chrome in PATH
DEBUG Selenium [:selenium_manager] Running command: which chrome
DEBUG Selenium [:selenium_manager] Output: ""
DEBUG Selenium [:selenium_manager] chrome not found in PATH
DEBUG Selenium [:selenium_manager] chrome has not been discovered in the system
</code></pre>

<p>(The chrome one fails here, as <code>chromium</code> has installed Chrome at <code>/usr/bin/chromium</code>.)</p>

<p>After that, we’ll see log lines for downloads of Chrome + ChromeDriver:</p>

<pre><code>DEBUG Selenium [:selenium_manager] Reading metadata from https://googlechromelabs.github.io/chrome-for-testing/last-known-good-versions-with-downloads.json
DEBUG Selenium [:selenium_manager] Required browser: chrome 116.0.5845.96
DEBUG Selenium [:selenium_manager] Downloading chrome 116.0.5845.96 from https://edgedl.me.gvt1.com/edgedl/chrome/chrome-for-testing/116.0.5845.96/linux64/chrome-linux64.zip
DEBUG Selenium [:selenium_manager] chrome 116.0.5845.96 has been downloaded at /home/app/.cache/selenium/chrome/linux64/116.0.5845.96/chrome
DEBUG Selenium [:selenium_manager] Reading metadata from https://googlechromelabs.github.io/chrome-for-testing/known-good-versions-with-downloads.json
DEBUG Selenium [:selenium_manager] Required driver: chromedriver 116.0.5845.96
DEBUG Selenium [:selenium_manager] Driver URL: https://edgedl.me.gvt1.com/edgedl/chrome/chrome-for-testing/116.0.5845.96/linux64/chromedriver-linux64.zip
DEBUG Selenium [:selenium_manager] Driver path: /home/app/.cache/selenium/chromedriver/linux64/116.0.5845.96/chromedriver
DEBUG Selenium [:selenium_manager] Browser path: /home/app/.cache/selenium/chrome/linux64/116.0.5845.96/chrome
</code></pre>

<p>Importantly, this shows version 116.0.5845.96 for both Chrome + ChromeDriver. We want these to match for compatibility reasons. As Chrome releases newer versions, the version that’s downloaded here will differ.</p>

<p>Then we’ll see ChromeDriver starting up:</p>

<pre><code>DEBUG Selenium [:selenium_manager] Browser path: /home/app/.cache/selenium/chrome/linux64/116.0.5845.96/chrome
DEBUG Selenium [:driver_service] port prober could not bind to ::1:9515 (Address not available - bind(2) for "::1" port 9515)
DEBUG Selenium [:driver_service] Executing Process ["/home/app/.cache/selenium/chromedriver/linux64/116.0.5845.96/chromedriver", "--port=9515"]
DEBUG Selenium [:process] Starting process: ["/home/app/.cache/selenium/chromedriver/linux64/116.0.5845.96/chromedriver", "--port=9515"] with {[:out, :err]=&gt;#&lt;IO:&lt;STDOUT&gt;&gt;, :pgroup=&gt;true}
DEBUG Selenium [:process]   -&gt; pid: 28
2023-08-22 05:46:27 DEBUG Selenium [:driver_service] polling for socket on ["127.0.0.1", 9515]
Starting ChromeDriver 116.0.5845.96 (1a391816688002153ef791ffe60d9e899a71a037-refs/branch-heads/5845@{#1382}) on port 9515
Only local connections are allowed.
Please see https://chromedriver.chromium.org/security-considerations for suggestions on keeping ChromeDriver safe.
[1692683187.222][SEVERE]: bind() failed: Address not available (99)
ChromeDriver was started successfully.
</code></pre>

<p>The “address not available (99)” error here is because ChromeDriver is trying to bind to <code>::1:9515</code>, but this Docker image is not setup with IPv6 support, so that will fail.</p>

<p>Finally, we’ll see some JSON requests to <code>POST session</code> going back and forth from <code>9515</code>, indicating ChromeDriver’s opening a Chrome window and that’s succeeding.</p>

<pre><code>DEBUG Selenium [:command] -&gt; POST session
DEBUG Selenium [:command]    &gt;&gt;&gt; http://127.0.0.1:9515/session | {"capabilities":{"alwaysMatch":{"browserName":"chrome","goog:chromeOptions":{"args":["--headless","--no-sandbox","--disable-dev-shm-usage","--disable-gpu"],"binary":"/home/app/.cache/selenium/chrome/linux64/116.0.5845.96/chrome"}}}}
</code></pre>
]]></content>
 </entry>
 
 <entry>
   <title>Alpine Linux, Selenium Manager, Chrome and ChromeDriver</title>
   <link href="https://ryanbigg.com/2023/08/alpine-linux-selenium-manager-chrome-and-chromedriver"/>
   <updated>2023-08-22T00:00:00+10:00</updated>
   <id>https://ryanbigg.com/2023/08/alpine-linux-selenium-manager-chrome-and-chromedriver</id>
   <content type="html"><![CDATA[<p>Selenium, and by extension the selenium-webdriver gem, after version 4.11 come with <a href="https://www.selenium.dev/blog/2022/introducing-selenium-manager/">a new feature called Selenium Manager</a>. This CLI tool will automatically install whatever browser and driver you need to run your Selenium tests. (These are installed under <code>~/.cache/selenium...</code>)</p>

<p>Today, I tried setting this up in an Alpine linux based Docker image and ran into trouble where it claimed it could not find the executable.</p>

<p>I was seeing errors such as:</p>

<pre><code>/bin/sh: ./chromedriver-linux64/chromedriver: not found
</code></pre>

<p>The file was definitely present though!</p>

<p>Other answers on the internet pointed to this being an issue with missing libraries. Those answers pointed to the <code>ldd</code> tool, and sure enough that showed the libraries that were required for chromedriver. The command was:</p>

<pre><code>ldd ./chromedriver-linux64/chromedriver
</code></pre>

<p>This listed the system libaries that the chromedriver executable was dependent on Then I read through those messages that were output and attempted to find packages that matched the messages.</p>

<p>To make Chromedriver v116 work on Alpine Linux, you have to have these packages installed:</p>

<pre><code>apk add gcompat glib nss libxcb libgcc
</code></pre>

<p>After installing these packages, Chromedriver was able to start.</p>

<p>But Chromedriver is not so useful without a Chrome to drive it. I used <code>ldd</code> once again, and found a <em>huge</em> list of packages that Chrome requires. Instead of installing all of these, you can install Chrome using:</p>

<pre><code>apk add chromium
</code></pre>

<p>This will then install Chromium (whatever’s latest and all of the package dependencies). This will be enough to get Chrome running.</p>

<p>Ultimately, I ended up building a small Docker image to test this out properly. Here’s that image’s <code>Dockerfile</code>:</p>

<pre><code>FROM ruby:3.2.2-alpine
RUN apk update &amp;&amp; apk add gcompat glib nss libxcb libgcc chromium

RUN adduser -D app
RUN mkdir /app
RUN chown app:app /app
USER app
WORKDIR /app
COPY --chown=app:app . /app

RUN bundle config set --local path vendor/bundle
RUN bundle install
CMD bundle exec irb
</code></pre>

<p>I build this with:</p>

<pre><code>docker build . -t selenium
</code></pre>

<p>Then I run it with:</p>

<pre><code> docker run -it selenium
</code></pre>

<p>This will launch me into an IRB session. To check if Selenium can correctly download + use Chrome and ChromeDriver, I run this code, which is very similar to the code that would be used to configure this within <code>rails_helper.rb</code> in a Rails app:</p>

<pre><code class="language-ruby">Bundler.require

Selenium::WebDriver.logger.level = Logger::DEBUG

options = ::Selenium::WebDriver::Chrome::Options.new

options.add_argument("--headless")
options.add_argument("--no-sandbox")
options.add_argument("--disable-dev-shm-usage")
options.add_argument("--disable-gpu")

Selenium::WebDriver.for :chrome, capabilities: options
</code></pre>

<p>This output should include things like a check for both Chrome + ChromeDriver, which will fail:</p>

<pre><code>DEBUG Selenium [:selenium_manager] Checking chromedriver in PATH
DEBUG Selenium [:selenium_manager] Running command: chromedriver --version
DEBUG Selenium [:selenium_manager] Output: ""
DEBUG Selenium [:selenium_manager] chromedriver not found in PATH
DEBUG Selenium [:selenium_manager] Checking chrome in PATH
DEBUG Selenium [:selenium_manager] Running command: which chrome
DEBUG Selenium [:selenium_manager] Output: ""
DEBUG Selenium [:selenium_manager] chrome not found in PATH
DEBUG Selenium [:selenium_manager] chrome has not been discovered in the system
</code></pre>

<p>(The chrome one fails here, as <code>chromium</code> has installed Chrome at <code>/usr/bin/chromium</code>.)</p>

<p>After that, we’ll see log lines for downloads of Chrome + ChromeDriver:</p>

<pre><code>DEBUG Selenium [:selenium_manager] Reading metadata from https://googlechromelabs.github.io/chrome-for-testing/last-known-good-versions-with-downloads.json
DEBUG Selenium [:selenium_manager] Required browser: chrome 116.0.5845.96
DEBUG Selenium [:selenium_manager] Downloading chrome 116.0.5845.96 from https://edgedl.me.gvt1.com/edgedl/chrome/chrome-for-testing/116.0.5845.96/linux64/chrome-linux64.zip
DEBUG Selenium [:selenium_manager] chrome 116.0.5845.96 has been downloaded at /home/app/.cache/selenium/chrome/linux64/116.0.5845.96/chrome
DEBUG Selenium [:selenium_manager] Reading metadata from https://googlechromelabs.github.io/chrome-for-testing/known-good-versions-with-downloads.json
DEBUG Selenium [:selenium_manager] Required driver: chromedriver 116.0.5845.96
DEBUG Selenium [:selenium_manager] Driver URL: https://edgedl.me.gvt1.com/edgedl/chrome/chrome-for-testing/116.0.5845.96/linux64/chromedriver-linux64.zip
DEBUG Selenium [:selenium_manager] Driver path: /home/app/.cache/selenium/chromedriver/linux64/116.0.5845.96/chromedriver
DEBUG Selenium [:selenium_manager] Browser path: /home/app/.cache/selenium/chrome/linux64/116.0.5845.96/chrome
</code></pre>

<p>Importantly, this shows version 116.0.5845.96 for both Chrome + ChromeDriver. We want these to match for compatibility reasons. As Chrome releases newer versions, the version that’s downloaded here will differ.</p>

<p>Then we’ll see ChromeDriver starting up:</p>

<pre><code>DEBUG Selenium [:selenium_manager] Browser path: /home/app/.cache/selenium/chrome/linux64/116.0.5845.96/chrome
DEBUG Selenium [:driver_service] port prober could not bind to ::1:9515 (Address not available - bind(2) for "::1" port 9515)
DEBUG Selenium [:driver_service] Executing Process ["/home/app/.cache/selenium/chromedriver/linux64/116.0.5845.96/chromedriver", "--port=9515"]
DEBUG Selenium [:process] Starting process: ["/home/app/.cache/selenium/chromedriver/linux64/116.0.5845.96/chromedriver", "--port=9515"] with {[:out, :err]=&gt;#&lt;IO:&lt;STDOUT&gt;&gt;, :pgroup=&gt;true}
DEBUG Selenium [:process]   -&gt; pid: 28
2023-08-22 05:46:27 DEBUG Selenium [:driver_service] polling for socket on ["127.0.0.1", 9515]
Starting ChromeDriver 116.0.5845.96 (1a391816688002153ef791ffe60d9e899a71a037-refs/branch-heads/5845@{#1382}) on port 9515
Only local connections are allowed.
Please see https://chromedriver.chromium.org/security-considerations for suggestions on keeping ChromeDriver safe.
[1692683187.222][SEVERE]: bind() failed: Address not available (99)
ChromeDriver was started successfully.
</code></pre>

<p>The “address not available (99)” error here is because ChromeDriver is trying to bind to <code>::1:9515</code>, but this Docker image is not setup with IPv6 support, so that will fail.</p>

<p>Finally, we’ll see some JSON requests to <code>POST session</code> going back and forth from <code>9515</code>, indicating ChromeDriver’s opening a Chrome window and that’s succeeding.</p>

<pre><code>DEBUG Selenium [:command] -&gt; POST session
DEBUG Selenium [:command]    &gt;&gt;&gt; http://127.0.0.1:9515/session | {"capabilities":{"alwaysMatch":{"browserName":"chrome","goog:chromeOptions":{"args":["--headless","--no-sandbox","--disable-dev-shm-usage","--disable-gpu"],"binary":"/home/app/.cache/selenium/chrome/linux64/116.0.5845.96/chrome"}}}}
</code></pre>

<p>So the important thing to note here is that if you’ve got:</p>

<ol>
  <li>A Ruby image that uses <code>ruby:3.2.2-alpine</code> (or similar) as its base</li>
  <li>And you want to use the built-in Selenium Manager to download Chrome + Chromium</li>
  <li>You will need to have these packages installed:</li>
</ol>

<pre><code>apk add gcompat glib nss libxcb libgcc chromium
</code></pre>
]]></content>
 </entry>
 
 <entry>
   <title>Zoom&apos;s return to the office</title>
   <link href="https://ryanbigg.com/2023/08/zooms-return-to-the-office"/>
   <updated>2023-08-07T00:00:00+10:00</updated>
   <id>https://ryanbigg.com/2023/08/zooms-return-to-the-office</id>
   <content type="html"><![CDATA[<p>This news <a href="https://nypost.com/2023/08/05/zoom-tells-employees-to-return-to-office-for-work/">about Zoom forcing their employees back into the office for 2 days a week</a> is just bonkers.</p>

<p>For an Australian perspective:</p>

<p>In Melbourne, 50 miles would mean people on Phillip Island and Geelong would need to commute into the city, a 2 hour commute one way. Geelong people could take the V/Line, thankfully. Phillip Islanders are shit out of luck and would have to drive in.</p>

<p>In Sydney, 50 miles would mean people in Wentworth Falls, San Remo and Wollongong would also be forced to commute 2 hours into the office as well. Katoomba residents thank your lucky stars, you’re just outside of the magic number.</p>

<p>Two hour commutes! “Give up 8 hours of your week <em>in traffic</em> in the name of <em>synergy</em>.” What baloney.</p>

<hr />

<p>I really enjoy the flexibility of working from home. I can put on a load of washinxtg over my lunch break or potter around in the garden when the sun’s out. I can take the dog for a walk or a run to the park. I can take some time out at around 3 and collect my daughter from school without having to commute first back to home and then out again to the school.</p>

<p>Environmentally: I can control the temperature in my office. There’s nobody walking around behind my monitor or talking loudly on their phone nearby. I have control over my desk and I can set it up however I like without some HR person mandating that I’m sharing it with someone due to space reasons.</p>

<p>And for all of these reasons, I’m a happy employee. I get my work done, and <em>more of it</em>, because I can choose the conditions in how that work is done. And if I need to <em>synergise</em> with another employee, why there’s Zoom for that.</p>
]]></content>
 </entry>
 
 <entry>
   <title>How to fix: Chromedriver 115, cannot find chrome binary</title>
   <link href="https://ryanbigg.com/2023/07/how-to-fix-chromedriver-115-cannot-find-chrome-binary"/>
   <updated>2023-07-28T00:00:00+10:00</updated>
   <id>https://ryanbigg.com/2023/07/how-to-fix-chromedriver-115-cannot-find-chrome-binary</id>
   <content type="html"><![CDATA[<p>Chromedriver v115 was released recently and causes this issue to appear on Macs that use Chromedriver for automated testing.</p>

<pre><code>unknown error: cannot find Chrome binary

Traceback (most recent call last):
       16: from 15  chromedriver                        0x0000000100df056c chromedriver + 4179308
       15: from 14  chromedriver                        0x0000000100df0414 chromedriver + 4178964
       14: from 13  chromedriver                        0x0000000100dacd1c chromedriver + 3902748
</code></pre>

<p>This is due to Chromedriver looking for a new binary called “Chrome for Testing”, which was <a href="https://developer.chrome.com/blog/chrome-for-testing/">recently released from the Chrome team</a>.</p>

<p>To fix this bug, you need to <a href="https://googlechromelabs.github.io/chrome-for-testing/#stable">download Chrome for Testing</a>, unzip it and move it into your <code>/Applications</code> directory.</p>

<p>Mac’s Gatekeeper program will not let you open this executable by default, as it came from a <code>.zip</code> file. To work around that problem, run:</p>

<pre><code>sudo xattr -cr '/Applications/Google Chrome for Testing.app'
</code></pre>

<p>This will remove the security restriction that is blocking this application from opening.</p>

<p>Run your test suite again, and it will now work.</p>
]]></content>
 </entry>
 
 <entry>
   <title>Rails 7, React, TypeScript, ESBuild and View Components</title>
   <link href="https://ryanbigg.com/2023/06/rails-7-react-typescript-setup"/>
   <updated>2023-06-01T00:00:00+10:00</updated>
   <id>https://ryanbigg.com/2023/06/rails-7-react-typescript-setup</id>
   <content type="html"><![CDATA[<p>Here’s a short guide to setting up an existing Rails 7 application with React, TypeScript, ESBuild. One approach here would be to use the <code>react-rails</code> gem, but I would like to show you the individual steps to setting it up here instead.</p>

<h3 id="installing-esbuild">Installing ESBuild</h3>

<p>First you’ll want to install the <code>jsbundling-rails</code> gem:</p>

<pre><code>bundle add jsbundling-rails
</code></pre>

<p>Next, you’ll run the generator for this gem to setup ESBuild:</p>

<pre><code>bin/rails javascript:install:esbuild
</code></pre>

<p>This will create an <code>app/javascript/application.js</code> file that we will not need – so delete this file.</p>

<p>ESBuild will be setup to build assets in <code>app/javascript</code>, and put them into <code>app/assets/builds</code>. From there, Rails will be able to serve those assets.</p>

<p>This install script has added a new <code>build</code> script to <code>package.json</code>:</p>

<pre><code class="language-json">"scripts": {
  "build": "esbuild app/javascript/*.* --bundle --sourcemap --outdir=app/assets/builds --public-path=assets"
}
</code></pre>

<p>Once we’ve setup our React code we will be able to run this command to take that code and compile it into some JavaScript browsers can run.</p>

<p>I like to change this script to point at an <code>entrypoints</code> subdirectory:</p>

<pre><code class="language-json">"scripts": {
  "build": "esbuild app/javascript/entrypoints/*.* --bundle --sourcemap --outdir=app/assets/builds --public-path=assets"
}
</code></pre>

<p>This is so that I can put other directories inside <code>app/javascript</code>, such as directories including little helper functions, or bigger component structures like <code>app/javascript/Purchases/Table.tsx</code>.</p>

<p>It also means that ESBuild will not build <em>everything</em> in that directory – just the files we declare as entrypoints.</p>

<h3 id="installing-react--typescript">Installing React &amp; TypeScript</h3>

<p>To install React and TypeScript we’ll run this <code>yarn</code> command:</p>

<pre><code>yarn add react@^18.2 @react-dom@^18.2 @types/react @types/react-dom typescript
</code></pre>

<p>To configure TypeScript so that it supports React’s JSX templating, we’ll create a <code>tsconfig.json</code> file at the root of our Rails application with this content in it:</p>

<pre><code class="language-json">{
  "compilerOptions": {
    "module": "commonjs",
    "esModuleInterop": true,
    "forceConsistentCasingInFileNames": true,
    "strict": true,
    "skipLibCheck": true,
    "jsx": "react",
  }
}
</code></pre>

<p>To see some React code in action and to check out setup, we can create a new file at <code>app/javascript/entrypoints/application.tsx</code> and put this code into it:</p>

<pre><code class="language-tsx">import React from "react";
import ReactDOM from "react-dom/client";

const App = () =&gt; &lt;h1&gt;Hello from React!&lt;/h1&gt;;

const root = ReactDOM.createRoot(
  document.getElementById("root") as HTMLElement
);

root.render(&lt;App /&gt;);
</code></pre>

<p>After this, we can build our application’s assets by running:</p>

<pre><code>yarn build
</code></pre>

<p>This will show us that it has built these assets:</p>

<pre><code>yarn run v1.22.19
warning package.json: No license field
$ esbuild app/javascript/*.* --bundle --sourcemap --outdir=app/assets/builds --public-path=assets

  app/assets/builds/application.js      1.0mb ⚠️
  app/assets/builds/application.js.map  1.5mb
</code></pre>

<p>To test that it’s all working, we can generate a simple view:</p>

<pre><code>rails g controller home index
</code></pre>

<p>And into <code>app/views/home/index.html.erb</code> we can put a simple div with the ID of <code>root</code>. This is the element that our <code>ReactDOM.createRoot</code> code was targeting earlier:</p>

<pre><code class="language-html">&lt;div id='root'&gt;&lt;/div&gt;
</code></pre>

<p>When we start our Rails app with <code>bundle exec rails s</code> and go to http://localhost:3000/home/index, we’ll see our “Hello from React!” message.</p>

<p><img src="/images/css-bundling/react/hello.png" alt="Hello from React" /></p>

<p>This works “out of the box” because our application layout already brings in this compiled asset:</p>

<pre><code class="language-erb">&lt;%= javascript_include_tag "application", "data-turbo-track": "reload", defer: true %&gt;
</code></pre>

<h3 id="multiple-mount-points">Multiple mount points</h3>

<p>If you’re running a single-page app, you can probably stop reading here and continue throwing things into <code>&lt;App&gt;</code>.</p>

<p>If you’re wanting to go down a different route, then keep reading. That different route is multiple individual components, where you may wish to mount a component on a per-page basis, than one component for the whole app.</p>

<p>To do this, we can create a file at <code>app/javascript/mount.tsx</code>:</p>

<pre><code class="language-tsx">import React from "react";
import ReactDOM from "react-dom/client";

type Components = Record&lt;string, React.ElementType&gt;;

export default function mount(components: Components): void {
  document.addEventListener("DOMContentLoaded", () =&gt; {
    const mountPoints = document.querySelectorAll("[data-react-component]");
    mountPoints.forEach((mountPoint) =&gt; {
      const { dataset } = mountPoint as HTMLElement;
      const componentName = dataset.reactComponent;
      if (componentName) {
        const Component = components[componentName];
        if (Component) {
          const props = JSON.parse(dataset.props as string);
          const root = ReactDOM.createRoot(mountPoint);
          root.render(&lt;Component {...props} /&gt;);
        } else {
          console.warn(
            "WARNING: No component found for: ",
            dataset.reactComponent,
            components
          );
        }
      }
    });
  });
}
</code></pre>

<p>This code attempts to find all elements that contain a <code>data-react-component</code> attribute, and then to mount components matching that name onto the page in those locations. This code also parses any props contained in a <code>data-props</code> attribute and passes those along to the component too.</p>

<p>In practical terms, a page containing:</p>

<pre><code class="language-html">&lt;div data-react-component='App' data-props="{}"&gt;&lt;/div&gt;
</code></pre>

<p>Would have a component called <code>App</code> mounted into the location of that div tag. This then allows us to intermix React components with our Rails application, which can be particularly helpful if we have an older Rails app that we’re enhancing with some newer React components.</p>

<p>To see this in action, let’s use this new <code>mount</code> function over in <code>application.tsx</code> by replacing the code in that file with this code:</p>

<pre><code>import React from "react";
import mount from "./mount";

const App = () =&gt; &lt;h1&gt;Hello from React!&lt;/h1&gt;;

mount({
  App,
});
</code></pre>

<p>And also the code in <code>app/views/home/index.html.erb</code> with this code:</p>

<pre><code class="language-html">&lt;div data-react-component='App' data-props="{}"&gt;&lt;/div&gt;
</code></pre>

<p>We can then run <code>yarn build</code> to rebuild our assets, and then refresh our browser to see the same message as before.</p>

<h3 id="view-components">View Components</h3>

<p>Writing this lengthy HTML into our views every time we want to render a React component will get tiresome quickly. To save us repeating ourselves again and again, we’re going to use a gem called <code>view_component</code>. We can install this gem with:</p>

<pre><code>bundle add view_component
</code></pre>

<p>We can then create a new component class using this gem, placing it into <code>app/components/react_component.rb</code>:</p>

<pre><code class="language-ruby"># frozen_string_literal: true

class ReactComponent &lt; ViewComponent::Base
  attr_reader :component, :raw_props

  def initialize(component, raw_props: {})
    @component = component
    @raw_props = raw_props
  end

  def call
    helpers.tag.div(
      '',
      data: {
        react_component: component,
        props: props
      }
    )
  end

  private

  def props
    raw_props
  end
end

</code></pre>

<p>This class is then going to place that <code>div</code> tag onto our page for us. This class will serve as a base class for any other component classes we define in our app. Those subclasses of <code>ReactComponent</code> can override <code>props</code> if they need to do work to prepare the props before they’re passed through to the component.</p>

<p>Then we can use this component to render React components within our application. Let’s change the code in <code>app/views/home/index.html.erb</code> to render the <code>App</code> component by using this component class:</p>

<pre><code class="language-erb">&lt;%= render ReactComponent.new("App") %&gt;
</code></pre>

<p>We can use the view component just like a partial. I’ll get to why we’re <em>not</em> using partials in a moment. It deserves its own section!</p>

<p>We will need to restart the Rails server at this point so that it picks up the file in <code>app/components</code>. After restarting the server, and refreshing the browser, we’ll once again see our React component’s output.</p>

<h3 id="why-view-components-over-partials">Why view components over partials</h3>

<p>Why did we complicate things by bringing in a new gem rather than using the wonderful partial features Rails provides?</p>

<p>The simple answer is: Ruby code belongs in Ruby files. And I don’t just mean calls to <code>tag.div</code>. I mean if you had any sort of Ruby code that needed to run before rendering this component, you could now put that code into the component class.</p>

<p>As an example here, let’s create a new React component called <code>Product</code>. It will render a name and a price. We’ll put this component at <code>app/javascript/Product/index.tsx</code>:</p>

<pre><code class="language-tsx">import React from "react";

const Product = ({ name, price }: { name: string; price: string }) =&gt; {
  return (
    &lt;&gt;
      &lt;h1&gt;
        {name} - {price}
      &lt;/h1&gt;
    &lt;/&gt;
  );
};

export default Product;
</code></pre>

<p>We can then tell our application to mount this component whenever it sees a <code>div[data-react-component=Product]</code> tag, by using the <code>mount</code> helper in <code>app/javascript/entrypoints/application.tsx</code>:</p>

<pre><code>import React from "react";
import mount from "../mount";
import Product from "../Product";

const App = () =&gt; &lt;h1&gt;Hello from React!&lt;/h1&gt;;

mount({
  App,
  Product,
});
</code></pre>

<p>As we’ve now changed <code>application.tsx</code>, we will need to rebuild it with <code>yarn build</code> again. Now is a good time to say we could’ve been running <code>yarn build --watch</code> this whole time… but I preferred being explicit about when things were being rebuilt and why. Now you know the secret.</p>

<p>To render this React component, we’ll create a new Ruby file to represent the Ruby-side of this component. We’ll put this component into <code>app/components/products/show_component.rb</code>:</p>

<pre><code class="language-ruby">module Products
  class ShowComponent &lt; ReactComponent
    def initialize(raw_props)
      super("Product", raw_props: raw_props)
    end

    def props
      raw_props.merge(
        price: helpers.number_to_currency(raw_props[:price])
      )
    end
  end
end
</code></pre>

<p>This component file inherits from our <code>ReactComponent</code> component class and will render that component. To use this Ruby component class, we can go back into <code>app/views/home/index.html.erb</code> and put this code there:</p>

<pre><code class="language-erb">&lt;%= render Products::ShowComponent.new(name: "Shoes", price: 100) %&gt;
</code></pre>

<p>Using this component will mean that we will end up with this <code>div</code> tag on the page:</p>

<pre><code class="language-html">&lt;div data-react-component="Product" data-props="{&amp;quot;name&amp;quot;:&amp;quot;Shoes&amp;quot;,&amp;quot;price&amp;quot;:100}"&gt;&lt;/div&gt;
</code></pre>

<p>Our <code>mount.tsx</code> code will see that <code>div</code> tag and mount the <code>Product</code> React component into that place, passing through the props.</p>

<p>Now, the reason for this whole section: <strong>we use view components over partials because Ruby code belongs in Ruby files</strong>.</p>

<p>As a quick example of this, if we want to format the price before it goes to the component, we can update our <code>ShowComponent</code> code to process those props:</p>

<pre><code class="language-ruby">module Products
  class ShowComponent &lt; ReactComponent
    def initialize(raw_props)
      super("Product", raw_props: raw_props)
    end

    def props
      raw_props.merge(
        price: helpers.number_to_currency(raw_props[:price])
      )
    end
  end
end
</code></pre>

<p>Here we’re calling a Ruby method in Ruby code in order to format the price. We’re not limited to just methods from <code>helpers</code> here – we could call any Ruby code that we wanted to. This is, in my opinion, better than interspersing Ruby and HTML code into the same file.</p>

<p>What this also means is that we could pass a product through to our component from the <code>app/views/home/index.html.erb</code>, rather than passing attributes one-by-one:</p>

<pre><code class="language-erb">&lt;%= render Products::ShowComponent.new(product: @product) %&gt;
</code></pre>

<p>(I’m making an assumption here about having a <code>@product</code> object set up in the controller – use your imagination!)</p>

<p>And then in that component class, we can take the raw props of the product object itself and do our formatting of the price:</p>

<pre><code class="language-ruby">module Products
  class ShowComponent &lt; ReactComponent
    def initialize(product)
      super("Product", raw_props: product)
    end

    def props
      {
        name: product.name,
        price: helpers.number_to_currency(product.price)
      }
    end
  end
end
</code></pre>

<p>The View Component class finally gives our Ruby view code a proper home to live: in a Ruby file, NOT a HTML file!</p>
]]></content>
 </entry>
 
 <entry>
   <title>Rails 7, Bootstrap CSS + JavaScript with ESBuild</title>
   <link href="https://ryanbigg.com/2023/04/rails-7-bootstrap-css-javascript-with-esbuild"/>
   <updated>2023-04-24T00:00:00+10:00</updated>
   <id>https://ryanbigg.com/2023/04/rails-7-bootstrap-css-javascript-with-esbuild</id>
   <content type="html"><![CDATA[<p>Here’s a short guide to setting up an existing Rails 7 application with Bootstrap, using ESBuild to build both the JavaScript and CSS files for Bootstrap.</p>

<p>First you’ll want to install the <code>jsbundling-rails</code> gem:</p>

<pre><code>bundle add jsbundling-rails
</code></pre>

<p>Next, you’ll run the generator for this gem to setup ESBuild:</p>

<pre><code>bin/rails javascript:install:esbuild
</code></pre>

<p>ESBuild will be setup to build assets in <code>app/javascript</code>, and put them into <code>app/assets/builds</code>. From there, Rails will be able to serve those assets.</p>

<p>To setup Bootstrap itself, we’ll add Bootstrap and its dependencies, PopperJS and jQuery:</p>

<pre><code>yarn add bootstrap @popperjs/core jquery
</code></pre>

<p>To use these dependencies, we will need to import them into our application’s build entrypoint file, which is located at <code>app/javascript/application.js</code>. The lines that we need to add to this file to get Bootstrap loaded are:</p>

<pre><code class="language-js">import "bootstrap";
import "bootstrap/dist/css/bootstrap.min.css";
</code></pre>

<p>After this, we can build our application’s assets by running:</p>

<pre><code>yarn build
</code></pre>

<p>This will show us that it has built these assets:</p>

<pre><code>yarn run v1.22.19
$ esbuild app/javascript/*.* --bundle --sourcemap --outdir=app/assets/builds --public-path=assets

  app/assets/builds/application.css      229.9kb
  app/assets/builds/application.js       186.9kb
  app/assets/builds/application.css.map  479.0kb
  app/assets/builds/application.js.map   356.7kb
</code></pre>

<p>ESBuild is smart enough here to know that we’re bringing in a CSS asset in our JS file, and due to that it will generate <em>both</em> a JS and a CSS file as assets. In addition to this, sourcemaps have been generated for both the CSS and JS files too.</p>

<p>To test that it’s all working, we can generate a simple view:</p>

<pre><code>rails g controller home index
</code></pre>

<p>And into <code>app/views/home/index.html.erb</code> we can put this HTML that I’ve “borrowed” from Bootstrap’s own example:</p>

<pre><code class="language-html">&lt;div class="modal fade" id="exampleModalXl" tabindex="-1" aria-labelledby="exampleModalXlLabel" style="display: none;" aria-hidden="true"&gt;
  &lt;div class="modal-dialog modal-xl"&gt;
    &lt;div class="modal-content"&gt;
      &lt;div class="modal-header"&gt;
        &lt;h1 class="modal-title fs-4" id="exampleModalXlLabel"&gt;Extra large modal&lt;/h1&gt;
        &lt;button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"&gt;&lt;/button&gt;
      &lt;/div&gt;
      &lt;div class="modal-body"&gt;
        ...
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/div&gt;


&lt;button type="button" class="btn btn-primary" data-bs-toggle="modal" data-bs-target="#exampleModalXl"&gt;Extra large modal&lt;/button&gt;
</code></pre>

<p>When we start our Rails app with <code>bundle exec rails s</code> and go to http://localhost:3000/home/index, we’ll see a blue button. When we click the blue button, the modal will appear:</p>

<p><img src="/images/css-bundling/bootstrap/modal.png" alt="Modal" /></p>
]]></content>
 </entry>
 
 <entry>
   <title>Open Letter to the Rails Foundation</title>
   <link href="https://ryanbigg.com/2023/03/open-letter-to-the-rails-foundation"/>
   <updated>2023-03-09T00:00:00+11:00</updated>
   <id>https://ryanbigg.com/2023/03/open-letter-to-the-rails-foundation</id>
   <content type="html"><![CDATA[<p>I sent this email to Amanda at the <a href="https://rubyonrails.org/foundation">Rails Foundation</a> this morning.</p>

<hr />

<p>Hello, my name is Ryan and I run the Gem Foundation: https://ryanbigg.com/2022/11/the-gem-foundation.</p>

<p>(Just quietly between you and me, id rather you answer this email than David. We’ve got… history.)</p>

<p>I’ve also written several books on Ruby, including the same Rails book 3, almost 4 times: Rails 3 in Action, Rails 4 in Action and Active Rails 1st and 2nd editions. Oh and I wrote a bunch of the Rails guides too. And contributed enough on Rails answers on Stack Overflow to earn me 100k rep, as well as a cool SO T-shirt and socks. I also took over the #rubyonrails IRC channel there for a time.</p>

<p>Point is: I have written multiple of millions of words about Rails to further its adoption.</p>

<p>As we approach the 4 month mark of the Rails Foundation launch, I am absolutely STUNNED that there has been not a single cent that has left the organisation’s coffers since its inception.</p>

<p>The announcement was grandiose in nature. A fat sack of cash for those who do unpaid labour for Rails. Sounds delightful. I like money for the way it buys hot chocolates for my daughter who then proceeds to wear them more than drink them, amongst other things.</p>

<p>Why hasn’t the Rails Foundation donated money to Rails Girls? Why haven’t they incentivised mentoring through FirstRubyFriend for Rails-focussed mentoring? Current and past guide authors: do they get funding? Rails gem authors or those gems that Rails depends on outside of its immediate vicinity? (Oh I maintain i18n as well btw, and GitHub recently sent me an award for that.)</p>

<p>You want to further adoption of Rails. So do I. I love most parts of Rails. I say most parts because after 15 years with a thing you start being really good at seeing the warts. Overall, it’s a framework that’s provided me with a stable income (and some tiny level of notoriety) over the last 15 years.</p>

<p>The framework and its related resources are a monumental achievement of open source collaboration.</p>

<p>So my question today is when will the Rails
foundation start funding these projects? Are we going to be waiting weeks, or months?</p>

<p>I don’t send this email with cap-in-hand expecting money — I’m already paid the Bigg Bucks through my work with Rails and my books.</p>

<p>What I’d like to see is the Rails Foundation actually putting their money where their mouth is and helping grow this wonderful community of ours, and helping it thrive for another 15 years.</p>
]]></content>
 </entry>
 
 <entry>
   <title>Please explain, Elastic Search</title>
   <link href="https://ryanbigg.com/2023/03/please-explain-elasticsearch"/>
   <updated>2023-03-02T00:00:00+11:00</updated>
   <id>https://ryanbigg.com/2023/03/please-explain-elasticsearch</id>
   <content type="html"><![CDATA[<p>I’ve recently been using Elastic Search on a project. I came across an issue where Elastic Search wasn’t able to find a particular document for a particular query. My first thought that was the document wasn’t indexed within the index, but it was.</p>

<p>I’ll walk through the process of debugging this search query in this post, demonstrating a couple of helpful Elastic Search endpoints.</p>

<p>Let’s go through the whole process, from indexing to searching to explaining. I’ll be using <a href="https://httpie.io/">the wonderful httpie tool</a> to interact with Elastic Search in this post.</p>

<h2 id="indexing-a-document">Indexing a document</h2>

<p>To index a document in ElasticSearch, we need an index that this document can be inserted into. We can create this index with:</p>

<pre><code class="language-text">http put http://localhost:9200/posts
</code></pre>

<p>Running this command will show us the index has been created:</p>

<pre><code class="language-json">{
  "acknowledged": true,
  "index": "posts",
  "shards_acknowledged": true
}
</code></pre>

<p>Next, we can add a new document into this index. For this example, I’ll create a small JSON file containing the data that we want to index, calling the file <code>post.json</code>:</p>

<pre><code class="language-json">{
  "id": 1,
  "title": "Please explain, Elastic Search",
  "date": "2023-03-03",
  "user_id": 101,
}
</code></pre>

<p>We can then add this document to the index by running:</p>

<pre><code class="language-text">http put http://localhost:9200/posts/_doc/1 &lt; post.json
</code></pre>

<p>When we run this command, we’ll see the document has been inserted successfully, as indicated by the “result” field:</p>

<pre><code class="language-json">{
    "_id": "1",
    "_index": "posts",
    "_primary_term": 1,
    "_seq_no": 0,
    "_shards": {
        "failed": 0,
        "successful": 1,
        "total": 2
    },
    "_type": "_doc",
    "_version": 1,
    "result": "created"
}
</code></pre>

<p>Let’s also add a document that <em>should not</em> be returned by our search query:</p>

<pre><code class="language-json">{
  "id": 2,
  "title": "We should not see this post",
  "date": "2023-02-02",
  "user_id": 155,
}
</code></pre>

<p>I’ll save this in a file called <code>post-2.json</code>, and insert it:</p>

<pre><code class="language-text">http put http://localhost:9200/posts/_doc/2 &lt; post-2.json
</code></pre>

<h2 id="viewing-a-document">Viewing a document</h2>

<p>We can then see the document in this index using either the search API, or using the document API. Let’s look first at the search API:</p>

<pre><code class="language-text">http get http://localhost:9200/posts/_search
</code></pre>

<p>This shows:</p>

<pre><code class="language-json">{
    "_shards": {
        "failed": 0,
        "skipped": 0,
        "successful": 1,
        "total": 1
    },
    "hits": {
        "hits": [
            {
                "_id": "1",
                "_index": "posts",
                "_score": 1.0,
                "_source": {
                    "date": "2023-03-03",
                    "id": 1,
                    "title": "Please explain, Elastic Search",
                    "user_id": 101
                },
                "_type": "_doc"
            }
        ],
        "max_score": 1.0,
        "total": {
            "relation": "eq",
            "value": 1
        }
    },
    "timed_out": false,
    "took": 3
}
</code></pre>

<p>Alternatively, we can request this document using the same URL we used for the <code>PUT</code> operation to add the document into the index:</p>

<pre><code class="language-text">http get http://localhost:9200/posts/_doc/1
</code></pre>

<pre><code class="language-json">{
    "_id": "1",
    "_index": "posts",
    "_primary_term": 1,
    "_seq_no": 0,
    "_source": {
        "date": "2023-03-03",
        "id": 1,
        "title": "Please explain, Elastic Search",
        "user_id": 101
    },
    "_type": "_doc",
    "_version": 1,
    "found": true
}
</code></pre>

<h2 id="searching-for-a-document">Searching for a document</h2>

<p>Elastic Search has a very flexible query API, but it can be a bit wordy sometimes. Let’s write some search JSON to find a post based on a particular date range, and a user ID. I’m going to put this one into a file called <code>query.json</code>, and we’re going to write this in such a way that it does <em>not</em> find our document by writing the wrong user ID, and the wrong date range.</p>

<pre><code class="language-json">{
  "query": {
    "bool": {
      "must": [
        {
          "range": {
            "date": { "gte": "2023-02-01", "lte": "2023-02-28" }
          }
        },
        {
          "term": { "user_id": 100 }
        }
      ]
    }
  }
}
</code></pre>

<p>We can then run this query by using the search API:</p>

<pre><code class="language-text">http get http://localhost:9200/posts/_search &lt; query.json
</code></pre>

<p>This will return no results, as our query is wrong:</p>

<pre><code class="language-json">{
    "_shards": {
        "failed": 0,
        "skipped": 0,
        "successful": 1,
        "total": 1
    },
    "hits": {
        "hits": [],
        "max_score": null,
        "total": {
            "relation": "eq",
            "value": 0
        }
    },
    "timed_out": false,
    "took": 2
}
</code></pre>

<h2 id="explaining-a-query">Explaining a query</h2>

<p>To get information from Elastic Search on why a particular document hasn’t matched a query, we can use the Explain API.</p>

<pre><code class="language-text">http get http://localhost:9200/posts/_explain/1/ &lt; query.json
</code></pre>

<p>When we run this query, we see a <em>huge</em> amount of output:</p>

<pre><code class="language-json">{
    "_id": "1",
    "_index": "posts",
    "_type": "_doc",
    "explanation": {
        "description": "Failure to meet condition(s) of required/prohibited clause(s)",
        "details": [
            {
                "description": "no match on required clause (date:[1675209600000 TO 1677628799999])",
                "details": [
                    {
                        "description": "date:[1675209600000 TO 1677628799999] doesn't match id 0",
                        "details": [],
                        "value": 0.0
                    }
                ],
                "value": 0.0
            },
            {
                "description": "no match on required clause (user_id:[100 TO 100])",
                "details": [
                    {
                        "description": "user_id:[100 TO 100] doesn't match id 0",
                        "details": [],
                        "value": 0.0
                    }
                ],
                "value": 0.0
            }
        ],
        "value": 0.0
    },
    "matched": false
}
</code></pre>

<p>This shows us that the query did not match because both the <code>date</code> and <code>user_id</code> fields are wrong. Important to note here is that the <code>date</code> field range values are returned in milliseconds-from-epoch, rather than the <code>2023-03-03</code> format we might expect.</p>

<p>Let’s fix up the query so that it now matches, putting the query into another file called <code>fixed-query.json</code>:</p>

<pre><code class="language-json">{
  "query": {
    "bool": {
      "must": [
        {
          "range": {
            "date": { "gte": "2023-03-01", "lte": "2023-03-31" }
          }
        },
        {
          "term": { "user_id": 101 }
        }
      ]
    }
  }
}
</code></pre>

<p>We can then run this corrected query through the explain endpoint:</p>

<pre><code class="language-text">http post http://localhost:9200/posts/_explain/1 &lt; fixed-query.json
</code></pre>

<p>The output will show that our query now matches this document:</p>

<pre><code class="language-json">{
    "_id": "1",
    "_index": "posts",
    "_type": "_doc",
    "explanation": {
        "description": "sum of:",
        "details": [
            {
                "description": "date:[1677628800000 TO 1680307199999]",
                "details": [],
                "value": 1.0
            },
            {
                "description": "user_id:[101 TO 101]",
                "details": [],
                "value": 1.0
            }
        ],
        "value": 2.0
    },
    "matched": true
}
</code></pre>

<p>And if we attempt to search with this query, we’ll see it returned in the hits for this query too:</p>

<pre><code class="language-text">http get http://localhost:9200/posts/_search &lt; fixed-query.json
</code></pre>

<pre><code class="language-json">
{
    "_shards": {
        "failed": 0,
        "skipped": 0,
        "successful": 1,
        "total": 1
    },
    "hits": {
        "hits": [
            {
                "_id": "1",
                "_index": "posts",
                "_score": 2.0,
                "_source": {
                    "date": "2023-03-03",
                    "id": 1,
                    "title": "Please explain, Elastic Search",
                    "user_id": 101
                },
                "_type": "_doc"
            }
        ],
        "max_score": 2.0,
        "total": {
            "relation": "eq",
            "value": 1
        }
    },
    "timed_out": false,
    "took": 12
}
</code></pre>
]]></content>
 </entry>
 
 <entry>
   <title>Why game programming and why Magic?</title>
   <link href="https://ryanbigg.com/2023/02/why-game-programming-and-why-magic"/>
   <updated>2023-02-07T00:00:00+11:00</updated>
   <id>https://ryanbigg.com/2023/02/why-game-programming-and-why-magic</id>
   <content type="html"><![CDATA[<p>For about the past 5 months, I’ve been fiddling with a little Ruby project called <a href="https://github.com/radar/mtg">“Magic: The Gathering: The Ruby Project”</a>. It’s my attempt to make Magic: The Gathering, in Ruby.</p>

<p>But why game programming when my forté is web programming, and why <em>this</em> game specifically? Why not Uno?</p>

<p>Because I wanted a challenge!</p>

<p>I had played Magic first <a href="https://apps.apple.com/us/app/magic-the-gathering-arena/id1496227521">through their Arena app on iOS</a>, which (mostly) works, save a few little issues here and there. Last year I started playing Magic weekly at a local game shop in town. I love the different mechanics of the different cards and figuring out how they all interact best. <em>Especially</em> when they syngerise together.</p>

<p>What’s appealing about this game is that while there’s a rulebook (I’ll get to that in a minute), the <em>cards themselves</em> make up the rules. If the creators want to change the rules of the game, they can print more cards with different text on them.</p>

<p>This is Rule 101.1 of Magic:</p>

<blockquote>
  <p>101.1. Whenever a card’s text directly contradicts these rules, the card takes precedence.</p>
</blockquote>

<p>Some of the cards are simple, like <a href="https://scryfall.com/card/a25/33/savannah-lions">Savannah Lions</a>. It costs one white mana to play, and it has 2 power and 1 toughness.</p>

<p>Others, like <a href="https://scryfall.com/card/eld/171/questing-beast">Questing Beast</a> with all its words, and <a href="https://scryfall.com/card/isd/181/garruk-relentless-garruk-the-veil-cursed">Garruk Relentless</a> with all its words on one side, <em>and then even more words on the other side</em>, are not so simple.</p>

<p>This Rule 101.1, the <em>first</em> of Magic’s several “Golden Rules”, is contained in <a href="https://media.wizards.com/2023/downloads/MagicCompRules%2020230203.pdf">this two-hundred-and-seventy-eight PDF page document</a>, where all of Magic’s non-card-defined rules are written down. Some of the rules even have examples with them.</p>

<p>If you wanted to find out all of the creature types, you’d look at Rule 205.3m.</p>

<p>Want to know how combat is designed to run? Start on page 74 with Rule 506, and finish on Page 84 with rule 511.</p>

<hr />

<p>Now this MTG-in-Ruby project is not a line-for-line reproduction of the rulebook or even a card-for-card replication attempt from A-Z. It started as an attempt to reproduce the features of a stack of random cards that were on my desk, and progressed from there to attempting to implement all of the <a href="https://scryfall.com/sets/m21?as=grid&amp;order=set">Core Set 2021</a> cards. I needed to set myself a goal, and even though that goal is <em>extremely ambitious</em>, it’s still a goal and something to aim for.</p>

<p>I’ve gotten most of the white cards done, and that leaves only about 300 more cards of that set. And <a href="https://en.wikipedia.org/wiki/List_of_Magic:_The_Gathering_sets">there are quite a few sets</a> .</p>

<p>What I’m particularly proud of here is that I have a clean DSL for being able to define cards and their abilities. For a simple card like <a href="https://scryfall.com/card/khm/34/story-seeker">Story Seeker</a>, I can define it like:</p>

<pre><code class="language-ruby">module Magic
  module Cards
    StorySeeker = Creature("Story Seeker") do
      cost generic: 1, white: 1
      type "Creature -- Dwarf Cleric"
      keywords :lifelink
      power 2
      toughness 2
    end
  end
end
</code></pre>

<p>The one thing here I’d change is making those types into constants rather than being strings. I’ve been too lazy to address that yet, as it hasn’t been a problem. Here’s a quick riff on what that might look like:</p>

<pre><code class="language-ruby">module Magic
  module Cards
    StorySeeker = Creature("Story Seeker") do
      cost generic: 1, white: 1
      type Types::Creature[:Dwarf, :Cleric]
      keywords :lifelink
      power 2
      toughness 2
    end
  end
end
</code></pre>

<p>While writing this post I built <a href="https://github.com/radar/mtg/commit/8cb9efe66248a1672d0e56a04bc8e92d19209385">this exact interface</a>. I’d love to go back to revisit it sometime to handle when an <em>invalid</em> type is passed, but it’ll work for the time-being.</p>

<hr />

<p>The cards themselves are <em>usually</em> straightforward to implement. It’s how they interact that’s the tricky part. For this, I try to come up with scenarios that might happen in real games, and then model those in the tests themselves.</p>

<p>One of these that I’m particularly proud about is the mana-cost-reducing effect of <a href="https://scryfall.com/card/nec/152/foundry-inspector">Foundry Inspector</a>. I started working on this card by writing the test for it first and working up from there.</p>

<pre><code class="language-ruby"> require 'spec_helper'

RSpec.describe Magic::Game, "Mana spend -- Foundry Inspector + Free Sol Ring" do
  include_context "two player game"

  context "when at first main phase" do
    before do
      current_turn.untap!
      current_turn.upkeep!
      current_turn.draw!
      current_turn.first_main!
    end

    context "foundry inspector reduces sol ring cost" do
      let(:foundry_inspector) { Card("Foundry Inspector") }
      let(:sol_ring) { Card("Sol Ring") }

      before do
        p1.hand.add(foundry_inspector)
        p1.hand.add(sol_ring)
      end

      it "casts a foundry inspector and then a sol ring" do
        p1.add_mana(red: 3)
        action = Magic::Actions::Cast.new(player: p1, card: foundry_inspector)
        expect(action.can_perform?).to eq(true)
        action.pay_mana(generic: { red: 3 } )
        game.take_action(action)
        game.tick!

        action = Magic::Actions::Cast.new(player: p1, card: sol_ring)
        expect(action.can_perform?).to eq(true)
        game.take_action(action)

        game.tick!
        expect(p1.permanents.by_name(sol_ring.name).count).to eq(1)
      end
    end
  end
end
</code></pre>

<p>The body of the test ensures that we can pay 3 red mana to cast the Foundry Inspector, and then by casting that we can then cast the <a href="https://scryfall.com/card/dmc/190/sol-ring">Sol Ring</a> by not paying any mana at all. It finishes by using some more DSL code to ensure that the Sol Ring has been registered as a permanent controlled by Player 1.</p>

<hr />

<p>If you’re looking for where the proverbial bodies are buried on this particular project, well, there are <em>plenty</em>. This project was coded up over nights, after work and sometimes even after a glass of Port or two. Caution was thrown to the wind, and past that.</p>

<p>The worst of it would be demonstrated in <code>attacking_creature_creates_attacking_token_spec.rb</code>, where a card called <a href="https://scryfall.com/card/m21/18/falconer-adept">Falconer Adept</a> has a triggered ability of:</p>

<blockquote>
  <p>Whenever Falconer Adept attacks, create a 1/1 white Bird creature token with flying that’s tapped and attacking.</p>
</blockquote>

<p>What this means is that you can declare that Falconer Adept is attacking as a part of the <em>regular</em> “Declare Attackers” phase of combat, and then by doing that, a different game object (a Bird token) is created, where you will need to delcare what that Bird token is attacking. In effect, “Declare Attackers” happens <em>twice</em>.</p>

<p>You can see how this code is handled in the <code>Turn</code> class’s state machine, particularly anywhere the <code>final_attackers_declared</code> method is used.</p>

<p>This one took me a <em>long</em> time to implement.</p>

<hr />

<p>I like fiddling with this project. It’s outside my regular wheelhouse and is teaching me more about event-driven game programming.</p>

<p>If I get stuck on a card, it’s not like I <em>have</em> to implement it. There’s thousands more out there to choose from.</p>

<p>I’d suggest if your interested in practicing some Ruby code outside of the usual web sphere to find <a href="https://scryfall.com/random">a card at random</a> and attempting to impelment it here. Or if you’re looking for something more challenging, have a read through of this code and see if you can refactor it to handle certain events or effects in a more straightforward way.</p>
]]></content>
 </entry>
 
 <entry>
   <title>Are the switches on a Kinesis Gaming Freestyle Edge RGB Keyboard hot-swappable?</title>
   <link href="https://ryanbigg.com/2023/01/are-the-switches-on-a-kinesis-gaming-freestyle-edge-rgb-keyboard-hot-swappable"/>
   <updated>2023-01-28T00:00:00+11:00</updated>
   <id>https://ryanbigg.com/2023/01/are-the-switches-on-a-kinesis-gaming-freestyle-edge-rgb-keyboard-hot-swappable</id>
   <content type="html"><![CDATA[<p>No.</p>

<p>The switches on this keyboard are not hot-swappable. They are soldered on to the board.</p>

<p>(This post brought to you by attempting to find this information online, failing at that, and then dissecting the keyboard to inspect it myself.)</p>
]]></content>
 </entry>
 

</feed>
