<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.2.2">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2023-03-03T10:47:40+11:00</updated><id>http://localhost:4000/feed.xml</id><entry><title type="html">Please explain, Elastic Search</title><link href="http://localhost:4000/2023/03/please-explain-elasticsearch" rel="alternate" type="text/html" title="Please explain, Elastic Search" /><published>2023-03-03T00:00:00+11:00</published><updated>2023-03-03T00:00:00+11:00</updated><id>http://localhost:4000/2023/03/please-explain-elasticsearch</id><content type="html" xml:base="http://localhost:4000/2023/03/please-explain-elasticsearch">&lt;p&gt;I’ve recently been using Elastic Search on a project. I came across an issue where Elastic Search wasn’t able to find a particular document for a particular query. My first thought that was the document wasn’t indexed within the index, but it was.&lt;/p&gt;

&lt;p&gt;I’ll walk through the process of debugging this search query in this post, demonstrating a couple of helpful Elastic Search endpoints.&lt;/p&gt;

&lt;p&gt;Let’s go through the whole process, from indexing to searching to explaining. I’ll be using &lt;a href=&quot;https://httpie.io/&quot;&gt;the wonderful httpie tool&lt;/a&gt; to interact with Elastic Search in this post.&lt;/p&gt;

&lt;h2 id=&quot;indexing-a-document&quot;&gt;Indexing a document&lt;/h2&gt;

&lt;p&gt;To index a document in ElasticSearch, we need an index that this document can be inserted into. We can create this index with:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-text&quot;&gt;http put http://localhost:9200/posts
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Running this command will show us the index has been created:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-json&quot;&gt;{
  &quot;acknowledged&quot;: true,
  &quot;index&quot;: &quot;posts&quot;,
  &quot;shards_acknowledged&quot;: true
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Next, we can add a new document into this index. For this example, I’ll create a small JSON file containing the data that we want to index, calling the file &lt;code&gt;post.json&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-json&quot;&gt;{
  &quot;id&quot;: 1,
  &quot;title&quot;: &quot;Please explain, Elastic Search&quot;,
  &quot;date&quot;: &quot;2023-03-03&quot;,
  &quot;user_id&quot;: 101,
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We can then add this document to the index by running:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-text&quot;&gt;http put http://localhost:9200/posts/_doc/1 &amp;lt; post.json
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;When we run this command, we’ll see the document has been inserted successfully, as indicated by the “result” field:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-json&quot;&gt;{
    &quot;_id&quot;: &quot;1&quot;,
    &quot;_index&quot;: &quot;posts&quot;,
    &quot;_primary_term&quot;: 1,
    &quot;_seq_no&quot;: 0,
    &quot;_shards&quot;: {
        &quot;failed&quot;: 0,
        &quot;successful&quot;: 1,
        &quot;total&quot;: 2
    },
    &quot;_type&quot;: &quot;_doc&quot;,
    &quot;_version&quot;: 1,
    &quot;result&quot;: &quot;created&quot;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Let’s also add a document that &lt;em&gt;should not&lt;/em&gt; be returned by our search query:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-json&quot;&gt;{
  &quot;id&quot;: 2,
  &quot;title&quot;: &quot;We should not see this post&quot;,
  &quot;date&quot;: &quot;2023-02-02&quot;,
  &quot;user_id&quot;: 155,
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I’ll save this in a file called &lt;code&gt;post-2.json&lt;/code&gt;, and insert it:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-text&quot;&gt;http put http://localhost:9200/posts/_doc/2 &amp;lt; post-2.json
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&quot;viewing-a-document&quot;&gt;Viewing a document&lt;/h2&gt;

&lt;p&gt;We can then see the document in this index using either the search API, or using the document API. Let’s look first at the search API:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-text&quot;&gt;http get http://localhost:9200/posts/_search
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This shows:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-json&quot;&gt;{
    &quot;_shards&quot;: {
        &quot;failed&quot;: 0,
        &quot;skipped&quot;: 0,
        &quot;successful&quot;: 1,
        &quot;total&quot;: 1
    },
    &quot;hits&quot;: {
        &quot;hits&quot;: [
            {
                &quot;_id&quot;: &quot;1&quot;,
                &quot;_index&quot;: &quot;posts&quot;,
                &quot;_score&quot;: 1.0,
                &quot;_source&quot;: {
                    &quot;date&quot;: &quot;2023-03-03&quot;,
                    &quot;id&quot;: 1,
                    &quot;title&quot;: &quot;Please explain, Elastic Search&quot;,
                    &quot;user_id&quot;: 101
                },
                &quot;_type&quot;: &quot;_doc&quot;
            }
        ],
        &quot;max_score&quot;: 1.0,
        &quot;total&quot;: {
            &quot;relation&quot;: &quot;eq&quot;,
            &quot;value&quot;: 1
        }
    },
    &quot;timed_out&quot;: false,
    &quot;took&quot;: 3
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Alternatively, we can request this document using the same URL we used for the &lt;code&gt;PUT&lt;/code&gt; operation to add the document into the index:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-text&quot;&gt;http get http get http://localhost:9200/posts/_doc/1
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&quot;language-json&quot;&gt;{
    &quot;_id&quot;: &quot;1&quot;,
    &quot;_index&quot;: &quot;posts&quot;,
    &quot;_primary_term&quot;: 1,
    &quot;_seq_no&quot;: 0,
    &quot;_source&quot;: {
        &quot;date&quot;: &quot;2023-03-03&quot;,
        &quot;id&quot;: 1,
        &quot;title&quot;: &quot;Please explain, Elastic Search&quot;,
        &quot;user_id&quot;: 101
    },
    &quot;_type&quot;: &quot;_doc&quot;,
    &quot;_version&quot;: 1,
    &quot;found&quot;: true
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&quot;searching-for-a-document&quot;&gt;Searching for a document&lt;/h2&gt;

&lt;p&gt;Elastic Search has a very flexible query API, but it can be a bit wordy sometimes. Let’s write some search JSON to find a post based on a particular date range, and a user ID. I’m going to put this one into a file called &lt;code&gt;query.json&lt;/code&gt;, and we’re going to write this in such a way that it does &lt;em&gt;not&lt;/em&gt; find our document by writing the wrong user ID, and the wrong date range.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-json&quot;&gt;{
  &quot;query&quot;: {
    &quot;bool&quot;: {
      &quot;must&quot;: [
        {
          &quot;range&quot;: {
            &quot;date&quot;: { &quot;gte&quot;: &quot;2023-02-01&quot;, &quot;lte&quot;: &quot;2023-02-28&quot; }
          }
        },
        {
          &quot;term&quot;: { &quot;user_id&quot;: 100 }
        }
      ]
    }
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We can then run this query by using the search API:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-text&quot;&gt;http get http://localhost:9200/posts/_search &amp;lt; query.json
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This will return no results, as our query is wrong:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-json&quot;&gt;{
    &quot;_shards&quot;: {
        &quot;failed&quot;: 0,
        &quot;skipped&quot;: 0,
        &quot;successful&quot;: 1,
        &quot;total&quot;: 1
    },
    &quot;hits&quot;: {
        &quot;hits&quot;: [],
        &quot;max_score&quot;: null,
        &quot;total&quot;: {
            &quot;relation&quot;: &quot;eq&quot;,
            &quot;value&quot;: 0
        }
    },
    &quot;timed_out&quot;: false,
    &quot;took&quot;: 2
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&quot;explaining-a-query&quot;&gt;Explaining a query&lt;/h2&gt;

&lt;p&gt;To get information from Elastic Search on why a particular document hasn’t matched a query, we can use the Explain API.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-text&quot;&gt;http get http://localhost:9200/posts/_explain/1/ &amp;lt; query.json
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;When we run this query, we see a &lt;em&gt;huge&lt;/em&gt; amount of output:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-json&quot;&gt;{
    &quot;_id&quot;: &quot;1&quot;,
    &quot;_index&quot;: &quot;posts&quot;,
    &quot;_type&quot;: &quot;_doc&quot;,
    &quot;explanation&quot;: {
        &quot;description&quot;: &quot;Failure to meet condition(s) of required/prohibited clause(s)&quot;,
        &quot;details&quot;: [
            {
                &quot;description&quot;: &quot;no match on required clause (date:[1675209600000 TO 1677628799999])&quot;,
                &quot;details&quot;: [
                    {
                        &quot;description&quot;: &quot;date:[1675209600000 TO 1677628799999] doesn&apos;t match id 0&quot;,
                        &quot;details&quot;: [],
                        &quot;value&quot;: 0.0
                    }
                ],
                &quot;value&quot;: 0.0
            },
            {
                &quot;description&quot;: &quot;no match on required clause (user_id:[100 TO 100])&quot;,
                &quot;details&quot;: [
                    {
                        &quot;description&quot;: &quot;user_id:[100 TO 100] doesn&apos;t match id 0&quot;,
                        &quot;details&quot;: [],
                        &quot;value&quot;: 0.0
                    }
                ],
                &quot;value&quot;: 0.0
            }
        ],
        &quot;value&quot;: 0.0
    },
    &quot;matched&quot;: false
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This shows us that the query did not match because both the &lt;code&gt;date&lt;/code&gt; and &lt;code&gt;user_id&lt;/code&gt; fields are wrong. Important to note here is that the &lt;code&gt;date&lt;/code&gt; field range values are returned in milliseconds-from-epoch, rather than the &lt;code&gt;2023-03-03&lt;/code&gt; format we might expect.&lt;/p&gt;

&lt;p&gt;Let’s fix up the query so that it now matches, putting the query into another file called &lt;code&gt;fixed-query.json&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-json&quot;&gt;{
  &quot;query&quot;: {
    &quot;bool&quot;: {
      &quot;must&quot;: [
        {
          &quot;range&quot;: {
            &quot;date&quot;: { &quot;gte&quot;: &quot;2023-03-01&quot;, &quot;lte&quot;: &quot;2023-03-31&quot; }
          }
        },
        {
          &quot;term&quot;: { &quot;user_id&quot;: 101 }
        }
      ]
    }
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We can then run this corrected query through the explain endpoint:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-text&quot;&gt;http post http://localhost:9200/posts/_explain/1 &amp;lt; fixed-query.json
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The output will show that our query now matches this document:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-json&quot;&gt;{
    &quot;_id&quot;: &quot;1&quot;,
    &quot;_index&quot;: &quot;posts&quot;,
    &quot;_type&quot;: &quot;_doc&quot;,
    &quot;explanation&quot;: {
        &quot;description&quot;: &quot;sum of:&quot;,
        &quot;details&quot;: [
            {
                &quot;description&quot;: &quot;date:[1677628800000 TO 1680307199999]&quot;,
                &quot;details&quot;: [],
                &quot;value&quot;: 1.0
            },
            {
                &quot;description&quot;: &quot;user_id:[101 TO 101]&quot;,
                &quot;details&quot;: [],
                &quot;value&quot;: 1.0
            }
        ],
        &quot;value&quot;: 2.0
    },
    &quot;matched&quot;: true
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And if we attempt to search with this query, we’ll see it returned in the hits for this query too:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-text&quot;&gt;http get http://localhost:9200/posts/_search &amp;lt; fixed-query.json
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&quot;language-json&quot;&gt;
{
    &quot;_shards&quot;: {
        &quot;failed&quot;: 0,
        &quot;skipped&quot;: 0,
        &quot;successful&quot;: 1,
        &quot;total&quot;: 1
    },
    &quot;hits&quot;: {
        &quot;hits&quot;: [
            {
                &quot;_id&quot;: &quot;1&quot;,
                &quot;_index&quot;: &quot;posts&quot;,
                &quot;_score&quot;: 2.0,
                &quot;_source&quot;: {
                    &quot;date&quot;: &quot;2023-03-03&quot;,
                    &quot;id&quot;: 1,
                    &quot;title&quot;: &quot;Please explain, Elastic Search&quot;,
                    &quot;user_id&quot;: 101
                },
                &quot;_type&quot;: &quot;_doc&quot;
            }
        ],
        &quot;max_score&quot;: 2.0,
        &quot;total&quot;: {
            &quot;relation&quot;: &quot;eq&quot;,
            &quot;value&quot;: 1
        }
    },
    &quot;timed_out&quot;: false,
    &quot;took&quot;: 12
}
&lt;/code&gt;&lt;/pre&gt;</content><author><name></name></author><summary type="html">I’ve recently been using Elastic Search on a project. I came across an issue where Elastic Search wasn’t able to find a particular document for a particular query. My first thought that was the document wasn’t indexed within the index, but it was.</summary></entry><entry><title type="html">Why game programming and why Magic?</title><link href="http://localhost:4000/2023/02/why-game-programming-and-why-magic" rel="alternate" type="text/html" title="Why game programming and why Magic?" /><published>2023-02-07T00:00:00+11:00</published><updated>2023-02-07T00:00:00+11:00</updated><id>http://localhost:4000/2023/02/why-game-programming-and-why-magic</id><content type="html" xml:base="http://localhost:4000/2023/02/why-game-programming-and-why-magic">&lt;p&gt;For about the past 5 months, I’ve been fiddling with a little Ruby project called &lt;a href=&quot;https://github.com/radar/mtg&quot;&gt;“Magic: The Gathering: The Ruby Project”&lt;/a&gt;. It’s my attempt to make Magic: The Gathering, in Ruby.&lt;/p&gt;

&lt;p&gt;But why game programming when my forté is web programming, and why &lt;em&gt;this&lt;/em&gt; game specifically? Why not Uno?&lt;/p&gt;

&lt;p&gt;Because I wanted a challenge!&lt;/p&gt;

&lt;p&gt;I had played Magic first &lt;a href=&quot;https://apps.apple.com/us/app/magic-the-gathering-arena/id1496227521&quot;&gt;through their Arena app on iOS&lt;/a&gt;, which (mostly) works, save a few little issues here and there. Last year I started playing Magic weekly at a local game shop in town. I love the different mechanics of the different cards and figuring out how they all interact best. &lt;em&gt;Especially&lt;/em&gt; when they syngerise together.&lt;/p&gt;

&lt;p&gt;What’s appealing about this game is that while there’s a rulebook (I’ll get to that in a minute), the &lt;em&gt;cards themselves&lt;/em&gt; make up the rules. If the creators want to change the rules of the game, they can print more cards with different text on them.&lt;/p&gt;

&lt;p&gt;This is Rule 101.1 of Magic:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;101.1. Whenever a card’s text directly contradicts these rules, the card takes precedence.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Some of the cards are simple, like &lt;a href=&quot;https://scryfall.com/card/a25/33/savannah-lions&quot;&gt;Savannah Lions&lt;/a&gt;. It costs one white mana to play, and it has 2 power and 1 toughness.&lt;/p&gt;

&lt;p&gt;Others, like &lt;a href=&quot;https://scryfall.com/card/eld/171/questing-beast&quot;&gt;Questing Beast&lt;/a&gt; with all its words, and &lt;a href=&quot;https://scryfall.com/card/isd/181/garruk-relentless-garruk-the-veil-cursed&quot;&gt;Garruk Relentless&lt;/a&gt; with all its words on one side, &lt;em&gt;and then even more words on the other side&lt;/em&gt;, are not so simple.&lt;/p&gt;

&lt;p&gt;This Rule 101.1, the &lt;em&gt;first&lt;/em&gt; of Magic’s several “Golden Rules”, is contained in &lt;a href=&quot;https://media.wizards.com/2023/downloads/MagicCompRules%2020230203.pdf&quot;&gt;this two-hundred-and-seventy-eight PDF page document&lt;/a&gt;, where all of Magic’s non-card-defined rules are written down. Some of the rules even have examples with them.&lt;/p&gt;

&lt;p&gt;If you wanted to find out all of the creature types, you’d look at Rule 205.3m.&lt;/p&gt;

&lt;p&gt;Want to know how combat is designed to run? Start on page 74 with Rule 506, and finish on Page 84 with rule 511.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;Now this MTG-in-Ruby project is not a line-for-line reproduction of the rulebook or even a card-for-card replication attempt from A-Z. It started as an attempt to reproduce the features of a stack of random cards that were on my desk, and progressed from there to attempting to implement all of the &lt;a href=&quot;https://scryfall.com/sets/m21?as=grid&amp;amp;order=set&quot;&gt;Core Set 2021&lt;/a&gt; cards. I needed to set myself a goal, and even though that goal is &lt;em&gt;extremely ambitious&lt;/em&gt;, it’s still a goal and something to aim for.&lt;/p&gt;

&lt;p&gt;I’ve gotten most of the white cards done, and that leaves only about 300 more cards of that set. And &lt;a href=&quot;https://en.wikipedia.org/wiki/List_of_Magic:_The_Gathering_sets&quot;&gt;there are quite a few sets&lt;/a&gt; .&lt;/p&gt;

&lt;p&gt;What I’m particularly proud of here is that I have a clean DSL for being able to define cards and their abilities. For a simple card like &lt;a href=&quot;https://scryfall.com/card/khm/34/story-seeker&quot;&gt;Story Seeker&lt;/a&gt;, I can define it like:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-ruby&quot;&gt;module Magic
  module Cards
    StorySeeker = Creature(&quot;Story Seeker&quot;) do
      cost generic: 1, white: 1
      type &quot;Creature -- Dwarf Cleric&quot;
      keywords :lifelink
      power 2
      toughness 2
    end
  end
end
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The one thing here I’d change is making those types into constants rather than being strings. I’ve been too lazy to address that yet, as it hasn’t been a problem. Here’s a quick riff on what that might look like:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-ruby&quot;&gt;module Magic
  module Cards
    StorySeeker = Creature(&quot;Story Seeker&quot;) do
      cost generic: 1, white: 1
      type Types::Creature[:Dwarf, :Cleric]
      keywords :lifelink
      power 2
      toughness 2
    end
  end
end
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;While writing this post I built &lt;a href=&quot;https://github.com/radar/mtg/commit/8cb9efe66248a1672d0e56a04bc8e92d19209385&quot;&gt;this exact interface&lt;/a&gt;. I’d love to go back to revisit it sometime to handle when an &lt;em&gt;invalid&lt;/em&gt; type is passed, but it’ll work for the time-being.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;The cards themselves are &lt;em&gt;usually&lt;/em&gt; straightforward to implement. It’s how they interact that’s the tricky part. For this, I try to come up with scenarios that might happen in real games, and then model those in the tests themselves.&lt;/p&gt;

&lt;p&gt;One of these that I’m particularly proud about is the mana-cost-reducing effect of &lt;a href=&quot;https://scryfall.com/card/nec/152/foundry-inspector&quot;&gt;Foundry Inspector&lt;/a&gt;. I started working on this card by writing the test for it first and working up from there.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-ruby&quot;&gt; require &apos;spec_helper&apos;

RSpec.describe Magic::Game, &quot;Mana spend -- Foundry Inspector + Free Sol Ring&quot; do
  include_context &quot;two player game&quot;

  context &quot;when at first main phase&quot; do
    before do
      current_turn.untap!
      current_turn.upkeep!
      current_turn.draw!
      current_turn.first_main!
    end

    context &quot;foundry inspector reduces sol ring cost&quot; do
      let(:foundry_inspector) { Card(&quot;Foundry Inspector&quot;) }
      let(:sol_ring) { Card(&quot;Sol Ring&quot;) }

      before do
        p1.hand.add(foundry_inspector)
        p1.hand.add(sol_ring)
      end

      it &quot;casts a foundry inspector and then a sol ring&quot; do
        p1.add_mana(red: 3)
        action = Magic::Actions::Cast.new(player: p1, card: foundry_inspector)
        expect(action.can_perform?).to eq(true)
        action.pay_mana(generic: { red: 3 } )
        game.take_action(action)
        game.tick!

        action = Magic::Actions::Cast.new(player: p1, card: sol_ring)
        expect(action.can_perform?).to eq(true)
        game.take_action(action)

        game.tick!
        expect(p1.permanents.by_name(sol_ring.name).count).to eq(1)
      end
    end
  end
end
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The body of the test ensures that we can pay 3 red mana to cast the Foundry Inspector, and then by casting that we can then cast the &lt;a href=&quot;https://scryfall.com/card/dmc/190/sol-ring&quot;&gt;Sol Ring&lt;/a&gt; by not paying any mana at all. It finishes by using some more DSL code to ensure that the Sol Ring has been registered as a permanent controlled by Player 1.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;If you’re looking for where the proverbial bodies are buried on this particular project, well, there are &lt;em&gt;plenty&lt;/em&gt;. This project was coded up over nights, after work and sometimes even after a glass of Port or two. Caution was thrown to the wind, and past that.&lt;/p&gt;

&lt;p&gt;The worst of it would be demonstrated in &lt;code&gt;attacking_creature_creates_attacking_token_spec.rb&lt;/code&gt;, where a card called &lt;a href=&quot;https://scryfall.com/card/m21/18/falconer-adept&quot;&gt;Falconer Adept&lt;/a&gt; has a triggered ability of:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Whenever Falconer Adept attacks, create a 1/1 white Bird creature token with flying that’s tapped and attacking.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;What this means is that you can declare that Falconer Adept is attacking as a part of the &lt;em&gt;regular&lt;/em&gt; “Declare Attackers” phase of combat, and then by doing that, a different game object (a Bird token) is created, where you will need to delcare what that Bird token is attacking. In effect, “Declare Attackers” happens &lt;em&gt;twice&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;You can see how this code is handled in the &lt;code&gt;Turn&lt;/code&gt; class’s state machine, particularly anywhere the &lt;code&gt;final_attackers_declared&lt;/code&gt; method is used.&lt;/p&gt;

&lt;p&gt;This one took me a &lt;em&gt;long&lt;/em&gt; time to implement.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;I like fiddling with this project. It’s outside my regular wheelhouse and is teaching me more about event-driven game programming.&lt;/p&gt;

&lt;p&gt;If I get stuck on a card, it’s not like I &lt;em&gt;have&lt;/em&gt; to implement it. There’s thousands more out there to choose from.&lt;/p&gt;

&lt;p&gt;I’d suggest if your interested in practicing some Ruby code outside of the usual web sphere to find &lt;a href=&quot;https://scryfall.com/random&quot;&gt;a card at random&lt;/a&gt; and attempting to impelment it here. Or if you’re looking for something more challenging, have a read through of this code and see if you can refactor it to handle certain events or effects in a more straightforward way.&lt;/p&gt;</content><author><name></name></author><summary type="html">For about the past 5 months, I’ve been fiddling with a little Ruby project called “Magic: The Gathering: The Ruby Project”. It’s my attempt to make Magic: The Gathering, in Ruby.</summary></entry><entry><title type="html">Are the switches on a Kinesis Gaming Freestyle Edge RGB Keyboard hot-swappable?</title><link href="http://localhost:4000/2023/01/are-the-switches-on-a-kinesis-gaming-freestyle-edge-rgb-keyboard-hot-swappable" rel="alternate" type="text/html" title="Are the switches on a Kinesis Gaming Freestyle Edge RGB Keyboard hot-swappable?" /><published>2023-01-28T00:00:00+11:00</published><updated>2023-01-28T00:00:00+11:00</updated><id>http://localhost:4000/2023/01/are-the-switches-on-a-kinesis-gaming-freestyle-edge-rgb-keyboard-hot-swappable</id><content type="html" xml:base="http://localhost:4000/2023/01/are-the-switches-on-a-kinesis-gaming-freestyle-edge-rgb-keyboard-hot-swappable">&lt;p&gt;No.&lt;/p&gt;

&lt;p&gt;The switches on this keyboard are not hot-swappable. They are soldered on to the board.&lt;/p&gt;

&lt;p&gt;(This post brought to you by attempting to find this information online, failing at that, and then dissecting the keyboard to inspect it myself.)&lt;/p&gt;</content><author><name></name></author><summary type="html">No.</summary></entry><entry><title type="html">Ruby GraphQL field notes</title><link href="http://localhost:4000/2023/01/ruby-graphql-field-notes" rel="alternate" type="text/html" title="Ruby GraphQL field notes" /><published>2023-01-24T00:00:00+11:00</published><updated>2023-01-24T00:00:00+11:00</updated><id>http://localhost:4000/2023/01/ruby-graphql-field-notes</id><content type="html" xml:base="http://localhost:4000/2023/01/ruby-graphql-field-notes">&lt;p&gt;Here’s a series of my notes of working within a GraphQL application as I can think of them. This comes out of my work on &lt;a href=&quot;https://github.com/radar/twist-v2/blob/master/backend/lib/twist/web/graphql/schema.rb&quot;&gt;Twist’s GraphQL API&lt;/a&gt;, and other GraphQL APIs that are deployed in production.&lt;/p&gt;

&lt;p&gt;Overall sentiment is that GraphQL is an improvement over the classic REST approach because:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;It gives you clear types of fields&lt;/li&gt;
  &lt;li&gt;You can choose which fields you wish to select&lt;/li&gt;
  &lt;li&gt;You can choose to select from a single resource, or from multiple, disparate resources at the same time.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;I like its interoperability between Ruby and JavaScript, with good tooling existing on both sides of that divide in the &lt;a href=&quot;https://rubygems.org/gems/graphql&quot;&gt;GraphQL Rubygem&lt;/a&gt; and the &lt;a href=&quot;https://www.apollographql.com/docs/react/get-started/&quot;&gt;Apollo Client&lt;/a&gt; on the JavaScript side of things. Honorable mention to the &lt;a href=&quot;https://the-guild.dev/graphql/codegen&quot;&gt;GraphQL codegen&lt;/a&gt; library too, which provides the ability of generating TypeScript types from a GraphQL schema.&lt;/p&gt;

&lt;h2 id=&quot;schema-definition&quot;&gt;Schema definition&lt;/h2&gt;

&lt;p&gt;A schema can be defined in &lt;code&gt;app/graphql&lt;/code&gt; in a Rails application (since its &lt;em&gt;application&lt;/em&gt; code), or a directory of your choosing in any other Ruby project.&lt;/p&gt;

&lt;p&gt;I’d recommend disabling the introspection endpoints here so that 3rd parties cannot find out that your API contains particular admin-only endpoints. I’d also recommend setting up a &lt;code&gt;max_complexity&lt;/code&gt; and a &lt;code&gt;max_depth&lt;/code&gt; value. This prevents API requests from recursively requesting data (think post -&amp;gt; comments -&amp;gt; post -&amp;gt; …), and from also building queries that might rate as “highly complex” database operations. You can read more about &lt;a href=&quot;https://graphql-ruby.org/queries/complexity_and_depth&quot;&gt;complexity and depth here&lt;/a&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-ruby&quot;&gt;class AppSchema &amp;lt; GraphQL::Schema
  mutation(Types::MutationType)
  query(Types::QueryType)
  disable_introspection_entry_points unless Rails.env.development?

  max_complexity 200
  max_depth 20
end
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&quot;schema-dumping-from-ruby&quot;&gt;Schema dumping from Ruby&lt;/h2&gt;

&lt;p&gt;On that topic, the Ruby library provides the ability to dump the schema out with a custom Rake task (that I’ve put in &lt;code&gt;lib/tasks/graphql.rake&lt;/code&gt;)&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-ruby&quot;&gt;require &quot;graphql/rake_task&quot;

GraphQL::RakeTask.new(
  schema_name: &quot;AppSchema&quot;,
  directory: &quot;./app/javascript/graphql&quot;,
  dependencies: [:environment]
)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Running this Rake task:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;bundle exec rake graphql:schema:dump
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Will generate two files, a &lt;code&gt;schema.json&lt;/code&gt; and a &lt;code&gt;schema.graphql&lt;/code&gt;, which are both representations of the &lt;em&gt;shape&lt;/em&gt; of the GraphQL API. Different tools (such as GraphQL codegen) can then use this schema to work with the GraphQL API.&lt;/p&gt;

&lt;h2 id=&quot;queries-and-resolvers&quot;&gt;Queries and Resolvers&lt;/h2&gt;

&lt;p&gt;The GraphQL Ruby library &lt;a href=&quot;https://graphql-ruby.org/fields/introduction.html&quot;&gt;recommends&lt;/a&gt; defining the fields and their resolvers within the same class:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-ruby&quot;&gt;module Twist
  module Web
    module GraphQL
      class QueryType &amp;lt; ::GraphQL::Schema::Object
        field :books, [Types::Book], null: false

        def books
          ...
        end
      end
    end
  end
end
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I feel like this gets messy particularly quickly if your types have a large (&amp;gt; 5) amount of fields.&lt;/p&gt;

&lt;p&gt;For top level fields like this, I would recommend defining separate resolver classes:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-ruby&quot;&gt;field :books, [Types::Book], null: false, resolver: Resolvers::Books
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&quot;language-ruby&quot;&gt;module Twist
  module Web
    module GraphQL
      module Resolvers
        class Books &amp;lt; Resolver
          def resolve
            ...
          end
        end
      end
    end
  end
end
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This allows for you to have potentially complex logic for resolution separate from the field definitions, allowing you to read &lt;em&gt;what&lt;/em&gt; fields are defined by looking at the type, rather than reading &lt;em&gt;what&lt;/em&gt; the fields are and &lt;em&gt;how&lt;/em&gt; they’re also implemented.&lt;/p&gt;

&lt;p&gt;If we had a resolver for a book chapter, then I’d put that class under &lt;code&gt;Resolvers::Books::Chapters&lt;/code&gt; to indicate that it’s not resolving &lt;em&gt;all&lt;/em&gt; chapters, but rather chapters for a particular book.&lt;/p&gt;

&lt;h2 id=&quot;mutations&quot;&gt;Mutations&lt;/h2&gt;

&lt;p&gt;Along similar lines to queries and resolvers, I also suggest using separate classes for mutations, namespacing them down the lines of the particular &lt;em&gt;context&lt;/em&gt; of the application (&lt;code&gt;Mutations::Users::Login&lt;/code&gt;), or at least along the lines of the resource thats undergoing mutation:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-ruby&quot;&gt;field :add_comment, mutation: Mutations::Comments::Add
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;It’s worth noting that if your &lt;code&gt;BaseMutation&lt;/code&gt; class inherits from &lt;code&gt;GraphQL::Schema::RelayClassicMutation&lt;/code&gt;, that these mutations will have an &lt;code&gt;input&lt;/code&gt; argument defined for them. In the GraphQL documentation, this would appear as:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;addComment(input: AddInput!): AddPayload
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If you have a separate class called &lt;code&gt;Post::Add&lt;/code&gt;, it will have an identical &lt;code&gt;AddInput&lt;/code&gt; type and &lt;code&gt;AddPayload&lt;/code&gt; defined. GraphQL supports only one type of each different name, and so we must differentiate these. To do this, inside the mutation class we define its &lt;code&gt;graphql_name&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-ruby&quot;&gt;module Mutations
  class Comments::Add &amp;lt; BaseMutation
    graphql_name &quot;AddComment&quot;
  end
end
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This will rename both the input and payload types:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;addComment(input: AddCommentInput!): AddCommentPayload
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&quot;union-types&quot;&gt;Union types&lt;/h2&gt;

&lt;p&gt;Occassionally, it can be helpful to return one or another type from a GraphQL query or a mutation. For this, GraphQL has &lt;em&gt;union types&lt;/em&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-ruby&quot;&gt;module Twist
  module Web
    module GraphQL
      module Types
        class BookPermissionCheckResult &amp;lt; BaseUnion
          description &quot;The result from attempting a login&quot;
          possible_types Types::Book, Types::PermissionDenied

          def self.resolve_type(object, _context)
            if object.is_a?(Twist::Entities::Book)
              Types::Book
            else
              Types::PermissionDenied
            end
          end
        end
      end
    end
  end
end
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This type is used in the &lt;code&gt;book&lt;/code&gt; field:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-ruby&quot;&gt;field :book, Types::BookPermissionCheckResult, null: false, resolver: Resolvers::Book
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If the resolver returns a &lt;code&gt;Twist::Entities::Book&lt;/code&gt; instance, then this union type will use the GraphQL class &lt;code&gt;Types::Book&lt;/code&gt; to resolve this field. Otherwise, it uses &lt;code&gt;Types::PermissionDenied&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;In the client-side GraphQL query, utilising these union types looks like this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;query {
  book(permalink: &quot;exploding-rails&quot;) {
    __typename
    ... on Book {
      id
      title
      defaultBranch {
        name
        chapters(part: FRONTMATTER) {
          ...chapterFields
        }
      }
    }

    ... on PermissionDenied {
      error
    }
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The query uses the GraphQL &lt;code&gt;__typename&lt;/code&gt; to return the type of the &lt;code&gt;book&lt;/code&gt; field. We can then read this type on the client side to determine how to act (to show a book, or not). The fields selected within both branches of this union allow us to display information about a book if the query has gone through successfully, without having to first check for permission, and then querying for a book.&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;resolve_type&lt;/code&gt; method from union classes can also return an &lt;em&gt;array&lt;/em&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-ruby&quot;&gt;def self.resolve_type(object, _context)
  if object.success?
    [Types::BookType, object.success]
  else
    [Types::PermissionDenied, object.failure]
  end
end
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This is helpful if we wish to do something with the object being resolved. In this case, we’re unwrapping that &lt;code&gt;object&lt;/code&gt; from a &lt;code&gt;Dry::Result&lt;/code&gt; wrapping. If we did not do this unwrapping, then the &lt;code&gt;BookType&lt;/code&gt; type would not be able to work on the object it receives, as the wrapped &lt;code&gt;Dry::Result&lt;/code&gt; object does not have the &lt;code&gt;title&lt;/code&gt; that &lt;code&gt;Types::Book&lt;/code&gt; would expect that object to have.&lt;/p&gt;

&lt;h2 id=&quot;authentication&quot;&gt;Authentication&lt;/h2&gt;

&lt;p&gt;To authenticate against the GraphQL API, I’d recommend supporting sessions as well as authentication by tokens. While requests may come into the application from the same domain, they also may not. Allowing that flexibility of your API to be queryable by a 3rd party from the outset (assuming they have the right token!) can only be a good thing. It will also allow you to make requests from within tests by providing a token.&lt;/p&gt;

&lt;p&gt;You can do this with something like the following code:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-ruby&quot;&gt;  def current_user

    @current_user = super
    @current_user ||= User.authenticate_by_token(request.authorization)
  end
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&quot;testing&quot;&gt;Testing&lt;/h2&gt;

&lt;p&gt;To test the GraphQL endpoints, I would recommend request specs over testing the schema itself by calling &lt;code&gt;Schema.execute(...)&lt;/code&gt;. This ensures that you can run tests against your API as close to how it will be used as possible.&lt;/p&gt;

&lt;p&gt;To aid in this, I like adding a &lt;code&gt;GraphqlHelpers&lt;/code&gt; module with a little helper:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-ruby&quot;&gt;  def graphql_request(query:, variables: {})
    post &quot;/graphql&quot;,
      params: {
        query: query,
        variables: variables,
      }.to_json,
      headers: { Authorization: user.token, &apos;Content-Type&apos;: &quot;application/json&quot; }
  end
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You can then use this in a test:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-ruby&quot;&gt;query = %|
  query {
    book(permalink: &quot;exploding-rails&quot;) {
      title
    }
  }
|

json = graphql_request(query: query)
expect(json.dig(&quot;book&quot;, &quot;title&quot;)).to eq(&quot;Exploding Rails&quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&quot;preventing-n1-queries&quot;&gt;Preventing N+1 queries&lt;/h2&gt;

&lt;p&gt;By default, GraphQL Ruby will perform N+1 queries if you write a query such as:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;query {
  users {
    books {
      chapters
    }
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This will make one query for all the users, N queries for all of those users’ books, and M queries for all of those users’ books’ chapters.&lt;/p&gt;

&lt;p&gt;To prevent N+1 queries, I’d recommend relying on the &lt;code&gt;GraphQL::Dataloader&lt;/code&gt; features &lt;a href=&quot;https://graphql-ruby.org/dataloader/overview.html&quot;&gt;shown here&lt;/a&gt;. This will collect all the IDs for the relevant resources, and then perform one large fetch for each of the users, each of the users’ books, and each of the users’ books’ chapters, resulting in only 3 queries.&lt;/p&gt;</content><author><name></name></author><summary type="html">Here’s a series of my notes of working within a GraphQL application as I can think of them. This comes out of my work on Twist’s GraphQL API, and other GraphQL APIs that are deployed in production.</summary></entry><entry><title type="html">The method method</title><link href="http://localhost:4000/2023/01/the-method-method" rel="alternate" type="text/html" title="The method method" /><published>2023-01-20T00:00:00+11:00</published><updated>2023-01-20T00:00:00+11:00</updated><id>http://localhost:4000/2023/01/the-method-method</id><content type="html" xml:base="http://localhost:4000/2023/01/the-method-method">&lt;p&gt;The &lt;code&gt;method&lt;/code&gt; method in Ruby is one of my favourite methods in Ruby. It gives you an object that represents an underlying method. It’s helpful for demonstrating that integer addition in Ruby is a method call:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;1.method(:+)
=&amp;gt; #&amp;lt;Method: Integer#+(_)&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&quot;where-is-this-method-defined&quot;&gt;Where is this method defined?&lt;/h2&gt;

&lt;p&gt;With this method &lt;code&gt;method&lt;/code&gt;, you can find out where a method is defined, if it is defined in Ruby code anywhere:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;SomeModel.method(:find).source_location
=&amp;gt; [&quot;...activerecord-x.x.x/lib/active_record/core.rb&quot;, 337]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Then I can look at this source code within the Active Record gem to &lt;em&gt;find out&lt;/em&gt; how &lt;code&gt;find&lt;/code&gt; works.&lt;/p&gt;

&lt;h2 id=&quot;call-me-maybe&quot;&gt;Call me, maybe?&lt;/h2&gt;

&lt;p&gt;Methods can also be passed in place of traditional block arguments:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;class Maths
  def self.square(num)
    num ** 2
  end
end

square = Maths.method(:square)

[1, 2, 3, 4].map(&amp;amp;square)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The &lt;code&gt;map&lt;/code&gt; syntax here is short-hand for:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;[1, 2, 3, 4].map { |number| square.call(number) }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Which is exactly the same behaviour that a &lt;code&gt;Proc&lt;/code&gt; has:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;a_proc = -&amp;gt; (num) { num ** 2 }
[1, 2, 3, 4].map(&amp;amp;square)
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&quot;more-documentation&quot;&gt;More documentation&lt;/h2&gt;

&lt;p&gt;You can find more about the &lt;a href=&quot;https://devdocs.io/ruby~3.1/method&quot;&gt;Method class&lt;/a&gt; here. You can even find out why this code returns &lt;code&gt;true&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;def moo(arg) arg == 3; end

number = 3
case number
when method(:moo)
  true
else
  false
end
&lt;/code&gt;&lt;/pre&gt;</content><author><name></name></author><summary type="html">The method method in Ruby is one of my favourite methods in Ruby. It gives you an object that represents an underlying method. It’s helpful for demonstrating that integer addition in Ruby is a method call:</summary></entry><entry><title type="html">CSS :has selector for selects that have options</title><link href="http://localhost:4000/2022/12/using-a-css-has-selector-to-target-selects-that-have-selected-options" rel="alternate" type="text/html" title="CSS :has selector for selects that have options" /><published>2022-12-02T00:00:00+11:00</published><updated>2022-12-02T00:00:00+11:00</updated><id>http://localhost:4000/2022/12/using-a-css-has-selector-to-target-selects-that-have-selected-options</id><content type="html" xml:base="http://localhost:4000/2022/12/using-a-css-has-selector-to-target-selects-that-have-selected-options">&lt;p&gt;Based on a question on the Ruby AU Slack, someone wanted to know how they could make a 2nd select box appear after an option in an original select box was selected.&lt;/p&gt;

&lt;p&gt;I worked out today that thanks to the new &lt;code&gt;:has&lt;/code&gt; selector in CSS, you can achieve this:&lt;/p&gt;

&lt;div class=&quot;mb-4&quot;&gt;
&lt;p class=&quot;codepen&quot; data-height=&quot;300&quot; data-default-tab=&quot;html,result&quot; data-slug-hash=&quot;bGKmaRz&quot; data-user=&quot;ryanbigg&quot; style=&quot;height: 300px; box-sizing: border-box; display: flex; align-items: center; justify-content: center; border: 2px solid; margin: 1em 0; padding: 1em;&quot;&gt;
  &lt;span&gt;See the Pen &lt;a href=&quot;https://codepen.io/ryanbigg/pen/bGKmaRz&quot;&gt;
  Untitled&lt;/a&gt; by Ryan Bigg (&lt;a href=&quot;https://codepen.io/ryanbigg&quot;&gt;@ryanbigg&lt;/a&gt;)
  on &lt;a href=&quot;https://codepen.io&quot;&gt;CodePen&lt;/a&gt;.&lt;/span&gt;
&lt;/p&gt;
&lt;/div&gt;
&lt;script async=&quot;&quot; src=&quot;https://cpwebassets.codepen.io/assets/embed/ei.js&quot;&gt;&lt;/script&gt;

&lt;p&gt;&lt;strong&gt;This demo will work in most modern browsers, with the exception of Internet Explorer 11 and Firefox.&lt;/strong&gt; Selecting from the 1st select box will make the 2nd one appear, then selecting from that makes the 3rd box appear.&lt;/p&gt;

&lt;p&gt;Given that this feature is &lt;em&gt;currently&lt;/em&gt; not supported in either IE11 (at all) or Firefox (without enabling a configuration flag), I would be hesitant to use it in production.&lt;/p&gt;

&lt;p&gt;Nevertheless, it’s pretty cool to see that CSS can do this and we do not have to reach for JavaScript.&lt;/p&gt;</content><author><name></name></author><summary type="html">Based on a question on the Ruby AU Slack, someone wanted to know how they could make a 2nd select box appear after an option in an original select box was selected.</summary></entry><entry><title type="html">Hanami 2.0 Thoughts</title><link href="http://localhost:4000/2022/11/hanami-20-thoughts" rel="alternate" type="text/html" title="Hanami 2.0 Thoughts" /><published>2022-11-28T00:00:00+11:00</published><updated>2022-11-28T00:00:00+11:00</updated><id>http://localhost:4000/2022/11/hanami-20-thoughts</id><content type="html" xml:base="http://localhost:4000/2022/11/hanami-20-thoughts">&lt;p&gt;&lt;a href=&quot;https://ryanbigg.com/2018/03/my-thoughts-on-hanami&quot;&gt;I’ve been a fan of Hanami&lt;/a&gt; for a number of years now. One of my favourite apps to work on is &lt;a href=&quot;https://github.com/radar/twist-v2&quot;&gt;even an open-source Hanami app!&lt;/a&gt; I have also been writing &lt;a href=&quot;https://github.com/radar/chirper&quot;&gt;an ActivityPub app called “Chirper”&lt;/a&gt; in Hanami.&lt;/p&gt;

&lt;p&gt;Now that Hanami 2.0 has come out, a few people have been asking me for my thoughts on this major Hanami release.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;The headline is: it’s really, really fast. It’s really clean. And it’s really good if you’re building an API at the moment.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;It’s currently missing opinions/support on a view layer (so no templating) and DB persistence (although the Getting Started guide does recommend a way to set it up). Hanami 2.1 is supposed to come out (in early 2023) with proper baked-in support for both of those things.&lt;/p&gt;

&lt;p&gt;When working on Chirper, I haven’t missed view templates as the application is all APIs. And I didn’t mind that there wasn’t a built-in configuration for databases, as the Getting Started guide for Hanami provided everything I needed there. It was refreshing to be able to “choose my own adventure” in that way, allowing me to opt for even something such as &lt;a href=&quot;https://rubygems.org/gems/sequel&quot;&gt;Sequel&lt;/a&gt; if I chose to.&lt;/p&gt;

&lt;p&gt;I like that Hanami hasn’t got an opinion du jour on JavaScript and CSS assets, like Rails had with Sprockets, Webpacker, etc. It leaves that particular responsibility up to the build tools that are great at that, such as ESBuild.&lt;/p&gt;

&lt;p&gt;I love that the actions are clearly separated out into their own classes, rather than all being bundled into a single class. I love that you can &lt;a href=&quot;https://github.com/radar/chirper/blob/40c4c532449deedbfaaac61dd2914fde7728cd97/app/actions/api/accounts/outbox.rb#L12-L17&quot;&gt;specify the types of parameters&lt;/a&gt; that an action receives.&lt;/p&gt;

&lt;p&gt;I really enjoy the dependency injection support that &lt;a href=&quot;https://github.com/radar/chirper/blob/81504258fbe74e3269c4f7ab013d6f0009b38cb6/spec/activity_pub/processors/create_spec.rb#L3-L7&quot;&gt;allows me to test parts of the application without hitting a real database&lt;/a&gt;. This makes those tests really fast. In the class itself, dependency injection also highlights the dependencies that a particular class has. If you notice the list of &lt;code&gt;Deps&lt;/code&gt; getting long, then it’s a good sign that the class is trying to do too much; such a thing signposts the complexity of the class right at the top.&lt;/p&gt;

&lt;p&gt;I love that &lt;a href=&quot;https://github.com/decafsucks/decafsucks&quot;&gt;Tim Riley, who is on the Hanami Core Team, is re-building Decaf Sucks in public&lt;/a&gt; to really show how it’s done.&lt;/p&gt;

&lt;p&gt;There’s also a bunch of &lt;a href=&quot;https://hanamimastery.com/&quot;&gt;Hanami screencasts (HanamiMastery) recorded by Seb Wilgosz&lt;/a&gt;, which come in both video and text format.&lt;/p&gt;

&lt;p&gt;Overall, I’m glad that the Hanami team has taken their time to really polish up this release, and I’m looking forward to building more things in what is shaping up to be &lt;em&gt;the&lt;/em&gt; Ruby web framework of the future.&lt;/p&gt;</content><author><name></name></author><summary type="html">I’ve been a fan of Hanami for a number of years now. One of my favourite apps to work on is even an open-source Hanami app! I have also been writing an ActivityPub app called “Chirper” in Hanami.</summary></entry><entry><title type="html">The Gem Foundation</title><link href="http://localhost:4000/2022/11/the-gem-foundation" rel="alternate" type="text/html" title="The Gem Foundation" /><published>2022-11-24T00:00:00+11:00</published><updated>2022-11-24T00:00:00+11:00</updated><id>http://localhost:4000/2022/11/the-gem-foundation</id><content type="html" xml:base="http://localhost:4000/2022/11/the-gem-foundation">&lt;div class=&quot;text-3xl text-center&quot;&gt;&lt;p&gt;Today, I am excited to announce the launch of &lt;strong&gt;The Gem Foundation&lt;/strong&gt;.&lt;/p&gt;&lt;/div&gt;

&lt;p&gt;Its mission is assist contributors in the Ruby community in their task to further the adoption of the Ruby language, expanding the scope more broadly than just one particular web framework.&lt;/p&gt;

&lt;p&gt;Because Ruby &lt;em&gt;is&lt;/em&gt; more than just a single framework.&lt;/p&gt;

&lt;p&gt;Immediately after establishment of this foundation, we have already surpassed &lt;a href=&quot;https://rubyonrails.org/2022/11/14/the-rails-foundation&quot;&gt;The Rails Foundation&lt;/a&gt; in terms of dollars donated, as we have donated &lt;strong&gt;ONE SINGLE U.S. DOLLAR&lt;/strong&gt; to &lt;a href=&quot;https://ruby.social/@baweaver&quot;&gt;Brandon Weaver&lt;/a&gt;, who was the first developer to get in touch with the foundation. Brandon contributes to the Ruby community by &lt;a href=&quot;https://dev.to/baweaver&quot;&gt;writing articles on his personal blog&lt;/a&gt;, and also runs the Ruby Learning Center Discord.&lt;/p&gt;

&lt;p&gt;The Gem Foundation has also donated &lt;strong&gt;TWO U.S. DOLLARS&lt;/strong&gt; to &lt;a href=&quot;https://ruby.social/@jaredwhite@indieweb.social&quot;&gt;Jared White&lt;/a&gt;, who is a contributor to &lt;a href=&quot;https://www.bridgetownrb.com/&quot;&gt;the Bridgetown&lt;/a&gt; site generator.&lt;/p&gt;

&lt;p&gt;The Gem Foundation is also contributing $25/USD a month towards the &lt;a href=&quot;https://github.com/sponsors/hanami&quot;&gt;Hanami&lt;/a&gt; web framework. If you would like there to be real competition in the Ruby web framework sphere, I would encourage you to do the same.&lt;/p&gt;

&lt;p&gt;That’s &lt;em&gt;$28USD&lt;/em&gt; already donated by the Gem Foundation!&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;strong&gt;UPDATE&lt;/strong&gt;: Kieran Andrews from Adelaide (and of &lt;a href=&quot;https://activerailsbook.com&quot;&gt;Active Rails fame&lt;/a&gt;) has also donated &lt;em&gt;$30USD&lt;/em&gt; to the &lt;a href=&quot;https://github.com/pry/pry&quot;&gt;Pry gem&lt;/a&gt;, bringing The Gem Foundation’s donation total up to $58USD!&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;UPDATE #2&lt;/strong&gt;: As it’s now the 1st of December, a payment of $35USD has been made to the Hanami organisation on GitHub. This brings our total donations almost to $100!&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;UPDATE #3&lt;/strong&gt;: As it’s now the 1st of February, yet another payment of $35USD has been made to the Hanami organisation on GitHub. This brings our total of donations up to $173.&lt;/p&gt;

&lt;p&gt;Here’s a helpful chart to track our donations:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/gem-foundation/donations.png&quot; alt=&quot;The Gem Foundation donations&quot; /&gt;&lt;/p&gt;</content><author><name></name></author><summary type="html">Today, I am excited to announce the launch of The Gem Foundation.</summary></entry><entry><title type="html">A replacement for strong parameters</title><link href="http://localhost:4000/2022/11/a-replacement-for-strong-parameters" rel="alternate" type="text/html" title="A replacement for strong parameters" /><published>2022-11-09T00:00:00+11:00</published><updated>2022-11-09T00:00:00+11:00</updated><id>http://localhost:4000/2022/11/a-replacement-for-strong-parameters</id><content type="html" xml:base="http://localhost:4000/2022/11/a-replacement-for-strong-parameters">&lt;p&gt;I’m not going to take &lt;a href=&quot;https://dev.37signals.com/vanilla-rails-is-plenty&quot;&gt;this week’s (very obvious) bait about how “Vanilla Rails is plenty”&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;In the past, I’ve spent effort watching DHH’s videos and &lt;a href=&quot;https://ryanbigg.com/2018/03/on-writing-software-well-2-a-review&quot;&gt;issuing a (time-stamped) rebuttal&lt;/a&gt;, and writing up about &lt;a href=&quot;https://ryanbigg.com/2017/06/current-considered-harmful&quot;&gt;a new Rails feature I would consider harmful&lt;/a&gt;.&lt;/p&gt;

&lt;p style=&quot;font-size: 125%&quot;&gt;&lt;strong&gt;I even &lt;a href=&quot;https://leanpub.com/maintain-rails/&quot;&gt;wrote a book called Maintainable Rails&lt;/a&gt; that offers my take on how to build a maintainable Rails application. A whole 30,000 words of it!&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;I am not going to follow that pattern today, even though the vanilla Rails article is &lt;em&gt;concerning&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;You know, if their apps were &lt;em&gt;maintainable&lt;/em&gt;, then they wouldn’t need to keep re-writing them completely, yeah?&lt;/p&gt;

&lt;p&gt;I digress.&lt;/p&gt;

&lt;p&gt;Today, I want to cover a &lt;em&gt;different&lt;/em&gt; feature of Rails that I think could be improved: strong parameters.&lt;/p&gt;

&lt;p&gt;The &lt;a href=&quot;https://guides.rubyonrails.org/action_controller_overview.html#nested-parameters&quot;&gt;documentation for strong_parameters&lt;/a&gt; always makes me a little confused with all of its different kinds of brackets. It feels like someone discovered Lisp and then thought it would be good to have as many brackets in Ruby, only to abandon the idea half-way.&lt;/p&gt;

&lt;p&gt;Here’s a complicated example from that documentation.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-ruby&quot;&gt;params.permit(:name, { emails: [] },
              friends: [ :name,
                         { family: [ :name ], hobbies: [] }])
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The documentation goes on to explain:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;This declaration permits the name, emails, and friends attributes. It is expected that emails will be an array of permitted scalar values, and that friends will be an array of resources with specific attributes: they should have a name attribute (any permitted scalar values allowed), a hobbies attribute as an array of permitted scalar values, and a family attribute which is restricted to having a name (any permitted scalar values allowed here, too).&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;The documentation also explains that the permitted scalar values are:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;The permitted scalar types are `String`, `Symbol`, `NilClass`, `Numeric`, `TrueClass`, `FalseClass`, `Date`, `Time`, `DateTime`, `StringIO`, `IO`, `ActionDispatch::Http::UploadedFile`, and `Rack::Test::UploadedFile`.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;That’s quite a few permitted types!&lt;/p&gt;

&lt;p&gt;How might we approach this differently? I think we could do this in a clearer fashion with a gem called &lt;a href=&quot;https://dry-rb.org/gems/dry-schema/1.10/&quot;&gt;dry-schema&lt;/a&gt;. The dry-schema gem allows us to define particular schemas that our data should comply with, and like strong parameters it will automatically drop keys that are not specified in the schema itself.&lt;/p&gt;

&lt;h3 id=&quot;creating-the-schema&quot;&gt;Creating the schema&lt;/h3&gt;

&lt;p&gt;Let’s try creating a schema from the above strong parameters code, but this time in dry-schema. I’m also going to add an extra field here called age:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-ruby&quot;&gt;PersonSchema = Dry::Schema.Params do
  required(:name).filled(:string)
  required(:age).filled(:integer)
  required(:emails).value(array[:string]).value(min_size?: 1)
  required(:friends).array(:hash) do
    required(:name).filled(:string)
    required(:family).hash do
      required(:name).filled(:string)
    end
  end
  required(:hobbies).array(:string)
end
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;With this schema we’re clearly defining the types of the data that we expect. Now we’ve limited the type of &lt;code&gt;name&lt;/code&gt; to string, so it can no longer accept a file for its value. That is probably for the best.&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;required(:friends).array(:hash)&lt;/code&gt; syntax might hurt a little bit to read, but it means “an array of any length, where the values are all hashes”. The block of this method then defines the permitted keys within those hashes.&lt;/p&gt;

&lt;p&gt;You could define this schema at the top of your controller, if you like, or in its own file at &lt;code&gt;app/schemas/person_schema.rb&lt;/code&gt;. It really should depend on the context in which it is used.&lt;/p&gt;

&lt;p&gt;It goes further than strong parameters, because it specifies the types expected for things such as emails and hobbies, whereas strong parameters would allow any “permitted scalar values” in there, including things such as numbers. The &lt;code&gt;dry-schema&lt;/code&gt; version &lt;em&gt;also&lt;/em&gt; specifies that there has to be at least one email address.&lt;/p&gt;

&lt;h3 id=&quot;using-a-valid-set-of-parameters&quot;&gt;Using a valid set of parameters&lt;/h3&gt;

&lt;p&gt;A hash that would pass the checks for this schema.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-ruby&quot;&gt;params = {
  name: &quot;Ryan&quot;,
  age: 34,
  emails: [&quot;me@ryanbigg.com&quot;],
  hobbies: [&quot;MTG&quot;, &quot;Coding&quot;],
  friends: [
    {
      name: &quot;Dear&quot;,
      family: { name: &quot;Reader&quot; }
    }
  ]
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We can check this with:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-ruby&quot;&gt;result = PersonSchema.(params)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We will get a &lt;code&gt;Dry::Schema::Result&lt;/code&gt; back from this, which we can grab the output of with:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;result.output
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&quot;type-coercions&quot;&gt;Type-coercions&lt;/h3&gt;

&lt;p&gt;Another hash that would pass the checks, even though it might not look like it, is this one:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-ruby&quot;&gt;params = {
  name: &quot;Ryan&quot;,
  age: &quot;34&quot;,
  emails: [&quot;me@ryanbigg.com&quot;],
  hobbies: [&quot;MTG&quot;, &quot;Coding&quot;],
  friends: [
    {
      name: &quot;Dear&quot;,
      family: { name: &quot;Reader&quot; }
    }
  ]
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The &lt;code&gt;age&lt;/code&gt; key here is specified as a string, but the schema says the type must be an &lt;code&gt;integer&lt;/code&gt;. Let’s look at what happens:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-ruby&quot;&gt;result = PersonSchema.(params)
result.output[:age] # =&amp;gt; 34
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The &lt;code&gt;Dry::Schema.Params&lt;/code&gt; type will do its best to cooerce string parameter values to their matching Ruby counterparts. This will also work for things such as dates in the “YYYY-MM-DD” formats, too. No more needing to do a &lt;code&gt;Date.parse&lt;/code&gt; if that parameter is being sent to something else, like a service object instead of a model.&lt;/p&gt;

&lt;h3 id=&quot;unknown-keys-are-removed&quot;&gt;Unknown Keys are removed&lt;/h3&gt;

&lt;p&gt;Like with strong parameters, if we attempt to pass an extra key:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-ruby&quot;&gt;params = {
  name: &quot;Ryan&quot;,
  age: 34,
  emails: [&quot;me@ryanbigg.com&quot;],
  hobbies: [&quot;MTG&quot;, &quot;Coding&quot;],
  friends: [
    {
      name: &quot;Dear&quot;,
      family: { name: &quot;Reader&quot; }
    }
  ],
  very_smart: true
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Then the schema will remove this additional key, proving that I am just regular smart, if that.&lt;/p&gt;

&lt;h3 id=&quot;re-using-schemas&quot;&gt;Re-using schemas&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;dry-schema&lt;/code&gt; also allows us to re-use schemas. Let’s say that we have two schemas, our &lt;code&gt;PersonSchema&lt;/code&gt; and another schema called &lt;code&gt;FriendSchema&lt;/code&gt; that defines the shape of the friend keys. Heres how we could use those together:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-ruby&quot;&gt;FriendSchema = Dry::Schema.params do
  required(:name).filled(:string)
  required(:family).hash do
    required(:name).filled(:string)
  end
end

PersonSchema = Dry::Schema.Params do
  required(:name).filled(:string)
  required(:age).filled(:integer)
  required(:emails).value(array[:string]).value(min_size?: 1)
  required(:friends).array(FriendSchema)
  required(:hobbies).array(:string)
end
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This is particularly helpful if you had a couple of complicated data structures that you wanted to validate at the same time, and use each of those schemas in different locations.&lt;/p&gt;

&lt;p&gt;I’d like to see strong parameters do that!&lt;/p&gt;

&lt;h3 id=&quot;error-messages-are-provided&quot;&gt;Error messages are provided&lt;/h3&gt;

&lt;p&gt;If the hash passed in is completely invalid, like this one:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-ruby&quot;&gt;params = {}
result = PersonSchema.(params)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Then we can retrieve error messages that are similar to Active Model validations back out:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;=&amp;gt; {:name=&amp;gt;[&quot;is missing&quot;], :age=&amp;gt;[&quot;is missing&quot;], :emails=&amp;gt;[&quot;is missing&quot;], :friends=&amp;gt;[&quot;is missing&quot;], :hobbies=&amp;gt;[&quot;is missing&quot;]}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;On top of this, the &lt;code&gt;result&lt;/code&gt; is also going to respond to &lt;code&gt;success?&lt;/code&gt; with &lt;code&gt;false&lt;/code&gt;, meaning we could use this in a controller action to check if the parameters are valid, before even passing them to their final destination. That might be a model (with, perhaps, it’s own validations), or it could
be another service.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;I’ve only scratched the surface on what &lt;code&gt;dry-schema&lt;/code&gt; can do. I purposely wanted to keep this post short today to cover how it could replace strong parameters within Rails to provide a much better developer experience than that bracketed mess.&lt;/p&gt;

&lt;p&gt;If you’d like to know what else dry-schema can do, make sure to check out &lt;a href=&quot;https://dry-rb.org/gems/dry-schema/&quot;&gt;its documentation here&lt;/a&gt;.&lt;/p&gt;</content><author><name></name></author><summary type="html">I’m not going to take this week’s (very obvious) bait about how “Vanilla Rails is plenty”.</summary></entry><entry><title type="html">Using Union Types with GraphQL Mutations in Ruby</title><link href="http://localhost:4000/2022/05/ruby-graphql-mutations-with-union-types" rel="alternate" type="text/html" title="Using Union Types with GraphQL Mutations in Ruby" /><published>2022-05-06T00:00:00+10:00</published><updated>2022-05-06T00:00:00+10:00</updated><id>http://localhost:4000/2022/05/ruby-graphql-mutations-with-union-types</id><content type="html" xml:base="http://localhost:4000/2022/05/ruby-graphql-mutations-with-union-types">&lt;p&gt;The &lt;a href=&quot;https://graphql-ruby.org/mutations/mutation_classes.html&quot;&gt;official documentation for the graphql-ruby gem&lt;/a&gt; recommends this code for a mutation class that can either succeed or fail:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-ruby&quot;&gt;class Mutations::CreateComment &amp;lt; Mutations::BaseMutation
  argument :body, String
  argument :post_id, ID

  field :comment, Types::Comment
  field :errors, [String], null: false

  def resolve(body:, post_id:)
    post = Post.find(post_id)
    comment = post.comments.build(body: body, author: context[:current_user])
    if comment.save
      # Successful creation, return the created object with no errors
      {
        comment: comment,
        errors: [],
      }
    else
      # Failed save, return the errors to the client
      {
        comment: nil,
        errors: comment.errors.full_messages
      }
    end
  end
end
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I’d like to show an alternative to this that I think leads to cleaner code by using GraphQL concept called &lt;em&gt;union types&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;We use union types in GraphQL when we want a field to return one or more distinct types as its result. In the case of the above comment mutation, the two types of things we would like to return are either:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;A comment, if the mutation was successful&lt;/li&gt;
  &lt;li&gt;Errors, if the mutation was unsuccessful&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Let’s change that mutation above to use a union type by declaring the type at the top of the mutation, and removing the two fields:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-ruby&quot;&gt;class Mutations::CreateComment &amp;lt; Mutations::BaseMutation
  type Types::CreateCommentResult
  argument :body, String
  argument :post_id, ID

  def resolve(body:, post_id:)
    post = Post.find(post_id)
    comment = post.comments.build(body: body, author: context[:current_user])
    if comment.save
      # Successful creation, return the created object with no errors
      {
        comment: comment,
        errors: [],
      }
    else
      # Failed save, return the errors to the client
      {
        comment: nil,
        errors: comment.errors.full_messages
      }
    end
  end
end
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This new type will be our union type that will represent either a successful creation for a comment, or a failed one.&lt;/p&gt;

&lt;p&gt;We can define this type in our &lt;code&gt;types&lt;/code&gt; directory under &lt;code&gt;graphql&lt;/code&gt;, in a file called &lt;code&gt;create_comment_result.rb&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-ruby&quot;&gt;module Types
  class CreateCommentResult &amp;lt; BaseUnion
    description &quot;The result from attempting to create a comment&quot;
    possible_types Types::Comment, Types::Errors

    def self.resolve_type(object, _context)
      if object[:comment]
        [Types::Comment, object[:comment]]
      else
        [Types::Errors, object]
      end
    end
  end
end
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;A union type is defined by first inheriting from &lt;code&gt;BaseUnion&lt;/code&gt;. If we had common logic to share between union types in our GraphQL API, that logic would go into &lt;code&gt;BaseUnion&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Inside this &lt;code&gt;CreateCommentResult&lt;/code&gt; type itself, we provide a description that’ll appear in our API documentation, and inform this class what the possible types are. For this union type, we’re defining two possible types: &lt;code&gt;Types::Comment&lt;/code&gt;, and &lt;code&gt;Types::Errors&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;When the GraphQL code runs, it will call this &lt;code&gt;resolve_type&lt;/code&gt; method to determine the correct GraphQL type to use when representing the result of the mutation. This method checks if &lt;code&gt;object[:comment]&lt;/code&gt; is present, and if it is the type that’ll be used is a &lt;code&gt;Types::Comment&lt;/code&gt;, and we can fetch the comment from that object using &lt;code&gt;object[:comment]&lt;/code&gt;. In Rails parlance, this &lt;code&gt;object[:comment]&lt;/code&gt; will be an instance of the &lt;code&gt;Comment&lt;/code&gt; model – a result of a successful &lt;code&gt;build&lt;/code&gt; and &lt;code&gt;save&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;If the operation was to fail, we would instead return a &lt;code&gt;Types::Error&lt;/code&gt; type, and use the resulting object as the base object for that type.&lt;/p&gt;

&lt;p&gt;These two types can be defined in the &lt;code&gt;types&lt;/code&gt; directory too. Let’s look at &lt;code&gt;CommentType&lt;/code&gt; first, defined in &lt;code&gt;types/comment.rb&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-ruby&quot;&gt;class Types::Comment &amp;lt; Types::BaseObject
  field :id, ID, null: false
  field :body, String, null: false
end
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This type is used to represent comments in our GraphQL API. It provides access to both the &lt;code&gt;id&lt;/code&gt; and &lt;code&gt;body&lt;/code&gt; attributes from any &lt;code&gt;Comment&lt;/code&gt; instance that is represented by this API.&lt;/p&gt;

&lt;p&gt;Then, the &lt;code&gt;Errors&lt;/code&gt; type:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-ruby&quot;&gt;class Types::Errors &amp;lt; Types::BaseObject
  field :errors, [String], null: false
end
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This type represents the &lt;code&gt;{ comment: nil, errors: [...] }&lt;/code&gt; hash that will be returned when a comment creation fails.&lt;/p&gt;

&lt;p&gt;With these union types setup, we can write this GraphQL query that will rely on them:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;mutation {
  createComment(input: { postId: 1, body: &quot;Hello world&quot; }) {
    __typename
    ... on Comment {
      id
    }

    ...on Errors {
      errors
    }
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Firstly, we call this mutation by passing in its required arguments. After that, we fetch a field called &lt;code&gt;__typename&lt;/code&gt;. This field is automatically defined, and it will return the type whatever object is returned, either &lt;code&gt;Comment&lt;/code&gt; or &lt;code&gt;Errors&lt;/code&gt;. When calling this GraphQL API, we can use &lt;code&gt;__typename&lt;/code&gt; to determine how to act.&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;... on&lt;/code&gt; syntax here tells GraphQL which fields we would like to use in the case of each part of the union being returned here. If it’s a comment, we will fetch just the &lt;code&gt;id&lt;/code&gt;. If it’s &lt;code&gt;Errors&lt;/code&gt;, we can fetch just the errors.&lt;/p&gt;

&lt;p&gt;If we were to call this mutation with an empty comment body, we would see this as the result:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-json&quot;&gt;{
  &quot;data&quot;: {
    &quot;createComment&quot;: {
      &quot;__typename&quot;: &quot;Errors&quot;,
      &quot;errors&quot;: [
        &quot;Body can&apos;t be blank&quot;
      ]
    }
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And if we were to call it with a valid body, we would see this:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-json&quot;&gt;{
  &quot;data&quot;: {
    &quot;createComment&quot;: {
      &quot;__typename&quot;: &quot;Comment&quot;,
      &quot;id&quot;: &quot;6&quot;
    }
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;When using this API (for example, within a frontend codebase), we can assert on &lt;code&gt;__typename&lt;/code&gt; to determine how to show the result to a user – if it’s a &lt;code&gt;Comment&lt;/code&gt;, then indicate a successful comment creation. If it’s &lt;code&gt;Errors&lt;/code&gt;, then show those errors on the form.&lt;/p&gt;</content><author><name></name></author><summary type="html">The official documentation for the graphql-ruby gem recommends this code for a mutation class that can either succeed or fail:</summary></entry></feed>