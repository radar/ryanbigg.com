<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.3.2">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2024-09-19T09:23:49+10:00</updated><id>http://localhost:4000/feed.xml</id><entry><title type="html">Use classes to represent data</title><link href="http://localhost:4000/2024/09/use-classes-to-represent-data" rel="alternate" type="text/html" title="Use classes to represent data" /><published>2024-09-18T00:00:00+10:00</published><updated>2024-09-18T00:00:00+10:00</updated><id>http://localhost:4000/2024/09/use-classes-to-represent-data</id><content type="html" xml:base="http://localhost:4000/2024/09/use-classes-to-represent-data"><![CDATA[<p><strong>Accessing JSON structures through strings is an anti-pattern and a sign of lazy programming.</strong></p>

<p>When we write Ruby code, we use classes to represent data within our own applications. Typically, these are models from within the Rails application. But I’ve seen a repeated pattern of Rubyists consuming JSON data <em>without first casting that to an object</em>.</p>

<p>It opens the door for mistakes to be made, especially when it comes to typos in strings. It’s too easy to get muddled up and think things are different to what they are — for example, a string that’s under_scored is different to one that’s camelCased. Accessing values in a JSON payload with the wrong key will result in a <code>nil</code> value.</p>

<p>Take for example this JSON object:</p>

<pre><code class="language-json">{
  "contacts": [
    {
      "first_name": "Ryan",
      "last_name": "Bigg",
      "address": {
        "address_line_1": "1 Test Lane"
      }
    }
  ]
}
</code></pre>

<p>To access this data, we might mistakenly write this code in Ruby:</p>

<pre><code class="language-ruby">data[0]["address"]["adddress_line_1"]
</code></pre>

<p>Not only is this full to the brim of unnecessary punctuation, but this will then return a nil value as there is no such key as <code>adddress_line_1</code> – we’ve mistakenly added a 3rd “d”.</p>

<p>To get around this, we could define a struct class to represent these contacts</p>

<pre><code class="language-ruby">Contact = Struct.new(:first_name, :last_name, :address, keyword_init: true)
</code></pre>

<p>We could even go a step further and add a helper method for combining the first and last name:</p>

<pre><code class="language-ruby">Contact = Struct.new(:first_name, :last_name, :address, keyword_init: true) do
  def full_name
    "#{first_name} #{last_name}"
  end
end
</code></pre>

<p>However, this only addresses the outer-layer of contacts, and not the inner-layer of addresses. To get that information, we would still need to use the bracket syntax:</p>

<pre><code class="language-ruby">puts contacts.first["address"]["address_line_1"]
</code></pre>

<p>Or, we can use <code>dig</code>, which is a little neater but still has lots of punctuation:</p>

<pre><code class="language-ruby">puts contacts.dig(0, "address", "address_line_1")
</code></pre>

<p>To tidy this up further, we can use <code>dry-struct</code> instead of Ruby’s built-in structs, and then define two classes to represent both contacts and addresses.</p>

<pre><code class="language-ruby">module Types
  include Dry.Types()
end

class Address &lt; Dry::Struct
  transform_keys(&amp;:to_sym)

  attribute :address_line_1, Types::String
end

class Contact &lt; Dry::Struct
  transform_keys(&amp;:to_sym)

  attribute :first_name, Types::String
  attribute :last_name, Types::String
  attribute :address, Address

  def full_name
    "#{first_name} #{last_name}"
  end
end
</code></pre>

<p>We can then use this to load the data by running:</p>

<pre><code class="language-ruby">contacts = data["contacts"].map &amp;Contact.method(:new)
</code></pre>

<p>(Keen observers will note that we could have an outer structure with a <code>contacts</code> attribute too!)</p>

<p>When we load the contact + address data like this, we can then access the data within it like a typical Ruby model:</p>

<pre><code>contacts.first.address.address_line_1
</code></pre>

<p>Only the most minimal amount of punctuation required. Then, if we happen to mis-type the key again:</p>

<pre><code>contacts.first.address.adddress_line_1
</code></pre>

<p>We get a runtime error:</p>

<pre><code>undefined method `adddress_line_1' for #&lt;Address address_line_1="1 Test Lane"&gt; (NoMethodError)

contacts.first.address.adddress_line_1
                      ^^^^^^^^^^^^^^^^
</code></pre>

<p>By using <code>dry-struct</code> we’ve added some guardrails around our data structure, and avoided the possibility for mis-typing keys. On top of this, we can enforce that certain keys are always required by using the <code>required</code> method on the type.</p>

<pre><code class="language-ruby">class Contact &lt; Dry::Struct
  transform_keys(&amp;:to_sym)

  attribute :first_name, Types::String.required
  attribute :last_name, Types::String.required
  attribute :address, Address

  def full_name
    "#{first_name} #{last_name}"
  end
end
</code></pre>

<p>While we’ve define just string types for our values, we may have additional fields (such as a contact’s date of birth) that we could enforce stricter types on if we wished as well:</p>

<pre><code class="language-ruby">class Contact &lt; Dry::Struct
  transform_keys(&amp;:to_sym)

  attribute :first_name, Types::String.required
  attribute :last_name, Types::String.required
  attribute :date_of_birth, Types::Date.required
  attribute :address, Address

  def full_name
    "#{first_name} #{last_name}"
  end
end
</code></pre>

<p>All this ensures that JSON data that we ingest is modeled in a similar manner to the models within our application. We avoid the time sinks of mis-typed data resulting in nils. We avoid the excessive punctuation of accessing nested data. And ultimately: We have type enforcement for the data that we’re ingesting.</p>]]></content><author><name></name></author><summary type="html"><![CDATA[Accessing JSON structures through strings is an anti-pattern and a sign of lazy programming.]]></summary></entry><entry><title type="html">Debugging Checklist</title><link href="http://localhost:4000/2024/07/debugging-checklist" rel="alternate" type="text/html" title="Debugging Checklist" /><published>2024-07-09T00:00:00+10:00</published><updated>2024-07-09T00:00:00+10:00</updated><id>http://localhost:4000/2024/07/debugging-checklist</id><content type="html" xml:base="http://localhost:4000/2024/07/debugging-checklist"><![CDATA[<p>Above my screen, I have simple reminder: “IT IS ALWAYS TIMEZONES.” It used to be a simple black-and-white sign until my daughter decided it needed to be turned into a brilliant rainbow of a warning.</p>

<p>The sign was put up after experiencing not one <em>but two</em> timezone-related bugs within a relatively close proximity. Periodically, I’ll see something similar crop up like a test failing before 10am, but not after, thanks to the differences between what day of the week it is in UTC vs my local computer (in +1000 or +1100, depending on the day).</p>

<p>In a work discussion yesterday we talked about debugging checklists and I wrote up one with what I could think of. I’m sharing it here as it might be useful to others. Maybe there’ll be more signs that come out of it.</p>

<p><strong>First: have you eaten or drunk anything recently? Do you need to take a break?</strong></p>

<p><strong>Then:</strong></p>

<ol>
  <li>Are you in the right app?</li>
  <li>Right file?</li>
  <li>Right function?</li>
  <li>Is the function spelled correctly?</li>
  <li>If you’re running locally:
    <ol>
      <li>Is the server up?</li>
      <li>Is the server running on the port you expect?</li>
    </ol>
  </li>
  <li>Is there information in the logs?
    <ol>
      <li>Can you add more logs to provide more useful information? (Usually, yes.)</li>
      <li>Can you reduce other logging to focus on just what you need?</li>
    </ol>
  </li>
  <li>Are you sure you’re in the right environment (local / staging, etc) for this?</li>
  <li>Can you inspect this function to determine if it is what you expect?
    <ol>
      <li>Is the input what you expect?</li>
      <li>Is the output what you expect?</li>
      <li>Are there intermediary steps where the input is transformed into a new form?</li>
    </ol>
  </li>
  <li>Is it a string issue?
    <ol>
      <li>Does casing matter in this situation?</li>
      <li>Are you comparing this string to another? Inspect both to see any differences.</li>
      <li>Does pluralization or non-pluralization of the string matter?</li>
      <li>Are there extra characters blank spaces?</li>
      <li>Null-byte prefix? (check with #codepoints)</li>
    </ol>
  </li>
  <li>If the behaviour is new:
    <ol>
      <li>Do you see this behaviour on the main branch, or just your own?</li>
      <li>If you see it on the main branch, can you use <code>git bisect</code> to find out when this issue was introduced?</li>
      <li>Were there packages updated recently that may have introduced this bug?</li>
    </ol>
  </li>
  <li>Is an exception happening, and then being rescued too quickly by something like <code>rescue</code> or <code>rescue StandardError</code>?
    <ol>
      <li>Can you narrow down the exception class to something more specific?</li>
    </ol>
  </li>
  <li>If it is a time bug:
    <ol>
      <li>Is it a different day in UTC compared to your local time?</li>
      <li>Do you need to freeze time for this test?</li>
      <li>Are you certain the time zone your code is running in is the right time zone?</li>
    </ol>
  </li>
  <li>If it’s an integer / float bug:
    <ol>
      <li>Are there numbers being rounded?</li>
      <li>Can you push the rounding “down” the stack, so it is one of the final operations to simplify?</li>
    </ol>
  </li>
  <li>If it’s a browser issue:
    <ol>
      <li>Can you reproduce this issue in a different browser?</li>
      <li>Are you trying to use a browser API that is not currently supported in this browser?</li>
      <li>Are there any errors displayed in the console?</li>
      <li>Were there any network requests that failed, or contain errors?</li>
    </ol>
  </li>
  <li>If this code depends on environment variables:
    <ol>
      <li>Is the environment variable spelled correctly?</li>
      <li>Is the value of that variable what you expect?</li>
    </ol>
  </li>
  <li>If this code depends on a configuration file:
    <ol>
      <li>Is the configuration file in the right place?</li>
      <li>Is the configuration key set up where you expect it?</li>
      <li>Does that key have the right value?</li>
    </ol>
  </li>
</ol>]]></content><author><name></name></author><summary type="html"><![CDATA[Above my screen, I have simple reminder: “IT IS ALWAYS TIMEZONES.” It used to be a simple black-and-white sign until my daughter decided it needed to be turned into a brilliant rainbow of a warning.]]></summary></entry><entry><title type="html">Separation of data and view layers in React components</title><link href="http://localhost:4000/2024/07/separation-of-react-components-with-graphql" rel="alternate" type="text/html" title="Separation of data and view layers in React components" /><published>2024-07-05T00:00:00+10:00</published><updated>2024-07-05T00:00:00+10:00</updated><id>http://localhost:4000/2024/07/separation-of-react-components-with-graphql</id><content type="html" xml:base="http://localhost:4000/2024/07/separation-of-react-components-with-graphql"><![CDATA[<p>In my <a href="https://leanpub.com/apollo-handbook">Apollo Handbook</a> I cover how to use React + Apollo to interact with a GraphQL API. I thought I’d share a pattern from that book that is making working with this library easier, in particular the pattern where we separate the <em>data layer</em> from the <em>view layer</em> of a component.</p>

<p>With Apollo and <a href="https://the-guild.dev/graphql/codegen">GraphQL code generator</a>, we get React hooks that we can use in our component. It can be tempting to combine both these layers together in a single component:</p>

<pre><code class="language-tsx">const Product = (id: string) =&gt; {
  const { data, loading, error } = usePurchaseQuery({ variables: { id } });

  // handle loading + error states...

  const { product } = data;

  return (
    &lt;div&gt;
      &lt;h1&gt;{product.name}&lt;/h1&gt;

      {product.description}
    &lt;/div&gt;
  );
};
</code></pre>

<p>But then this component is tied too closely to where it gets its data from, and if you want to test (such as in React Testing Library) how your components behave when they receive certain props, you must then stub the data layer.</p>

<p>An alternative approach that I like is separating the data and view layers into two distinct functions. The first function is the data function:</p>

<pre><code class="language-tsx">const WrappedProduct = (id: string) =&gt; {
  const { data, loading, error } = usePurchaseQuery({ variables: { id } });

  // handle loading + error states...

  const { product } = data;

  return (
    &lt;Product {...product} /&gt;
  );
}
</code></pre>

<p>Its responsibility is to grab the data and pass it to the view component. The <code>loading</code> and <code>error</code> states can also be handled by this component, or something such as a higher-order <code>ErrorBoundary</code> component.</p>

<p>When the <code>Product</code> component receives the props, we can use the type from the query itself to inform the view component of the correct types:</p>

<pre><code class="language-tsx">
import ProductQuery from "@graphql/types"

type ProductType = ProductQuery["product"]
const Product = ({ name, description }: ProductType) =&gt; {
   return (
    &lt;div&gt;
      &lt;h1&gt;{product.name}&lt;/h1&gt;

      {product.description}
    &lt;/div&gt;
  );
}
</code></pre>

<p>This is a small contrived example, but for a more complicated component this would make it easier to use this component in React Testing Library to run assertions on its behaviour, or to render it in Storybook to see how it looks.</p>

<p>Rather than stubbing the GraphQL request / response cycle, we can instead pass typed props along to the component.</p>

<p>Here’s what our test file might look like:</p>

<pre><code class="language-tsx">type ProductType = ProductQuery["product"]

const product: ProductType = {
  name: "Rolo Tomassi - Where Myth Becomes Memory",
  description: "2022 Album"
}

it("displays a product name", () =&gt; {
  render(&lt;Product {...product}&gt;)

  expect(screen).toHaveContent("Rolo Tomassi - Where Myth Becomes Memory")
})
</code></pre>

<p>If we’re concerned with how the GraphQL layer is handling its response, then we still have the option to test that layer with something like <a href="https://mswjs.io/docs/api/graphql/">Mock Service Worker’s GraphQL API</a>.</p>]]></content><author><name></name></author><summary type="html"><![CDATA[In my Apollo Handbook I cover how to use React + Apollo to interact with a GraphQL API. I thought I’d share a pattern from that book that is making working with this library easier, in particular the pattern where we separate the data layer from the view layer of a component.]]></summary></entry><entry><title type="html">Decreasing Ruby app build times</title><link href="http://localhost:4000/2024/06/make-rspec-tests-go-faster" rel="alternate" type="text/html" title="Decreasing Ruby app build times" /><published>2024-06-28T00:00:00+10:00</published><updated>2024-06-28T00:00:00+10:00</updated><id>http://localhost:4000/2024/06/make-rspec-tests-go-faster</id><content type="html" xml:base="http://localhost:4000/2024/06/make-rspec-tests-go-faster"><![CDATA[<p><strong>EDIT:</strong> I wrote these as notes for myself a few weeks ago when my brain wouldn’t stop spinning on this problem. Writing things down gets it out of my brain and lets me do simple things, like “engage in conversations” or “sleep”.</p>

<p>We’ve now undertaken <em>some</em> of this work mentioned in the post, and our builds have gone from 45 minutes down to as low as 14 minutes. The major thing that improved build time was making the build machines faster… but don’t discount the rest of the stuff in this post too. After all, tests are code, and all code should be maintained and made to perform when necessary.</p>

<hr />

<p>This week and next it’s the “cooldown sprint” at work where we prioritise addressing tech debt over regular feature development. As a part of that work, I’m working on bringing down the test run time on one of our biggest and well-tested Rails apps from its current mean duration of 45 minutes.</p>

<p>This 45 minute cost is paid thrice:</p>

<ol>
  <li>Once for your branch</li>
  <li>Once it gets to <code>develop</code> (shipped to staging environments)</li>
  <li>Once it gets to <code>master</code> (shipped to sandbox + production environments)</li>
</ol>

<p>So to get out a change of even just a single line to production takes 2.25 hours total, assuming you’re getting a median build time. 2.25 hours seems like an exorbitantly long time. And it is. Over the 8 hour work day, we would be able to ship 3.5 different changes to production.</p>

<p>This app has quite a number of end-to-end feature requests which follow this pattern:</p>

<ol>
  <li>Create a user + merchant account</li>
  <li>Create some relevant data</li>
  <li>Login as that user + merchant combo</li>
  <li>Navigate to page where the data is</li>
  <li>Make some assertions about what the page looks like or how it performs</li>
</ol>

<p>And a lot of these tests test business-critical features of our application, like that we can submit payments through our Virtual Terminal or that a payment plan is setup to reoccur on the correct schedule.</p>

<p>For these tests, we’ve relied a lot on Capybara running Selenium and a headless Chrome instance. This setup works exceptionally well for us, allowing us to write more Ruby code to test the Ruby code we’ve written in the app.</p>

<h2 id="straightforward-ways-of-solving-things">Straightforward ways of solving things</h2>

<p>There are some straightforward ways we could solve this slowness. We could upgrade the machines that run our tests. The current configuration is by no means at the top (or bottom) end for the configuration bracket for the type of machines. Faster machines surely mean faster tests, right? The caveat there is that faster machines also mean more dollars. Are there things we can do that don’t cost us money?</p>

<p>The other straightforward thing is to parallelise these tests out so that they don’t run in sequence all on the same machine. We did that, parallelising to 4 nodes and then to 8, using the wonderful <a href="https://knapsackpro.com">Knapsack Pro</a> gem. Knapsack suggests parallelising up to 19 nodes, but again this means more machines and more dollars. This could potentially block other builds on other projects from running as well, as we have a low ceiling on how many concurrent build machines we are running across the whole org. The moment we run two distinct builds for this project that would mean up to 38 build machines tied up.</p>

<p>If the tests for one build across 19 machines were to run for 5 minutes, the total cost would be $0.28USD. The old adage of developer time being expensive and computer time being cheap holds up.</p>

<h2 id="and-then-it-gets-murky-from-there">And then it gets murky from there</h2>

<p>Then there are the not so straightforward things. Are there particular reasons for the slowness of our tests? Are the factories that are being used to build up the data for these tests doing too much?  In our case, I’ve added <a href="https://github.com/test-prof/test-prof"><code>test-prof</code></a> to our app and run its factory profiler and detected no overly large factory there.</p>

<p>Is there a particular page which is slow, that a large majority of these tests hit? I noticed that when I ran a <em>headful</em> browser of Chrome (so I could see what each test was doing) that each of the tests hit the dashboard page, which has a collection of charts. Every test waited for these charts to finish loading before proceeding. I commented out the line of code which was rendering all of these charts, and saw a 20% improvement in test run time. Obviously we can’t comment these out all the time, but at least that’s something we could probably toggle on/off depending on if the test needed it. I’ll have to dig into this one.</p>

<h2 id="an-alternative-approach-for-feature-specs">An alternative approach for feature specs</h2>

<p>Could we have written these tests in a different way? Do they need to be full-on integration tests that set up data in the database, just to validate information appears in certain positions on the page?</p>

<p>I would say that for the less important pages, we don’t have to do such a setup. We have a frontend that’s built on React and TypeScript, with those TypeScript types being informed by our backend GraphQL API. And notably here we’re not just blindly grabbing things like <code>Purchase</code> off <code>@graphql/types</code>, we’re specifically defining types that match the relevant query, using code like:</p>

<pre><code class="language-tsx">type Merchant = NonNullable&lt;GetPurchaseDetailQuery['merchant']&gt;;
export type Purchase = NonNullable&lt;Merchant['purchase']&gt;;
</code></pre>

<p>The components expect the <em>exact</em> data from the query, and nothing different. We could write some frontend-focussed tests for these using React Testing Library, creating some tests that test:</p>

<ol>
  <li>When a particular component…</li>
  <li>receives a particular structure…</li>
  <li>it looks a certain way.</li>
</ol>

<p>There’s no need to interact with a database here, given that the automatically generated types are going to tell us if the data structure is right or wrong. We can write lighter-weight request specs that assert that, yes, when certain data exists in the database that our GraphQL API presents it in <em>this</em> particular format. The difficulty here is that the query structure used in these tests may vary over time from the structure defined in the components.</p>

<p>In my experience, these React Testing Library tests have been just as easy to write as the Capybara specs, and I’ve been able to setup the fixture data again thanks to the TypeScript types. These tests then run in <em>milliseconds</em> as opposed to <em>seconds</em>. The original RSpec tests for a particular part of our test suite, the Transaction Detail page, ran in 24.75 seconds. These same tests in React Testing Library take 1.66 seconds, and that’s including test runner setup time. That’s almost 15x faster.</p>

<p>I think there’s definitely some things we could work on pulling out of Capybara feature specs and into React Testing Library tests, to really bring down the slow tests. The biggest culprits for the slowness, looking purely at test duration have been the feature tests, by far.</p>

<h2 id="docker-setup-is-also-a-factor">Docker setup is also a factor</h2>

<p>The tests are run inside a Docker container which is built before most test runs rather than read from a cache, due to the ephemeral nature of the build machines. The base image for these containers has to come from <em>somewhere</em>, and that <em>somewhere</em> is a Docker registry. I’ve looked into ways of making the build machines use the cache with mixed success. It’s still an avenue I’d like to pursue, as it turns a 5-minute initial build step (that blocks every other step!) into one that runs for about half a minute. I’ve even seen some cases where that step can run in as quick as 14 seconds.</p>

<p>One aspect that has helped here is splitting the Dockerfile into a multi-stage build that builds it in 4 separate stages:</p>

<ol>
  <li>OS-level setup</li>
  <li>Ruby setup</li>
  <li>Node setup</li>
  <li>Final compilation for CSS + JS</li>
</ol>

<p>The Ruby + Node steps run concurrently, saving roughly 2-3 minutes compared to if they ran sequentially. We have investigated adding Docker-level caching for both the Ruby and Node steps, but haven’t gotten as far as having a system that reliably works for each build. It feels like a <code>cache-from</code> declared that matches the multi-stage target would work, but I can’t seem to make the build machines acknowledge that config and pull it in.</p>

<p>Or perhaps there’s a way to cache the packages gathered for those steps, storing them off the machines in some long-term storage and pulling them down before each build? Then Ruby + Node would only install the differences (if any) that are on that branch.</p>

<h2 id="slicing-up-the-app">Slicing up the app</h2>

<p>Finally, my absolute <em>golden path</em> idea on this topic is that the tests that run when you push a branch, should only be the tests related to the code that you changed. If I’m making changes on Part A of the system, then it doesn’t make sense to run tests for Part B on all branches. Running the entire test suite before a production deploy makes sense, but not on the earlier branches.</p>

<p>To that end, there’s probably investigative work to go on with this app where the app could be split into something like Hanami’s “slices”, so we have Slice A with its own tests, then if there’s file changes in Slice A then Slice A’s tests get run, but Slice B’s tests don’t. That seems like work that would be greater than many cooldown sprints in a row, and so I’m happy to leave that as just a thought bubble for the time-being.</p>]]></content><author><name></name></author><summary type="html"><![CDATA[EDIT: I wrote these as notes for myself a few weeks ago when my brain wouldn’t stop spinning on this problem. Writing things down gets it out of my brain and lets me do simple things, like “engage in conversations” or “sleep”.]]></summary></entry><entry><title type="html">Scheduling with Ice Cube</title><link href="http://localhost:4000/2024/05/scheduling-with-ice-cube" rel="alternate" type="text/html" title="Scheduling with Ice Cube" /><published>2024-05-22T00:00:00+10:00</published><updated>2024-05-22T00:00:00+10:00</updated><id>http://localhost:4000/2024/05/scheduling-with-ice-cube</id><content type="html" xml:base="http://localhost:4000/2024/05/scheduling-with-ice-cube"><![CDATA[<p>I work in a system that needs to have recurring calendar-based payments happen, where the frequency of these payments is down to a (mostly) arbitrary selection by users. Recurring calendar events are interesting, especially if someone picks the <em>end of the month</em> for an event to occur. Some months that means the 30th, but it can also mean the 28th, 29th and 31st, depending on not only the <em>month</em> but also the <em>year</em>, thanks to leap years. Recurring payments can occur over multiple years, so one year there might be a payment done on the 29th of February one year, and another done on the 28th of February the year either side of that.</p>

<p>The frequency of these payments that we allow for in our system are weekly, fortnightly, every-4-weeks, monthly, quarterly, half-yearly, and yearly. When a schedule is created, we use the start date for the schedule as the basis for the ongoing payments. Schedules can optionally have an end date too, where those payments will stop happening.</p>

<p>On top of that, weekly and fortnightly payments can optionally have a day of the week chosen for payments, which means that they sometimes don’t line up with the declared start date.</p>

<p>Monthly payments can also have the same option, but instead of day of the week it’s day of the month. If someone selects the 31st as their billing day, we need to consider what we’d do in months like February, April, June, September and November, which don’t have those days.</p>

<p>All of this sounds like quite the headache, given it involves the two most difficult things: <em>time</em> and <em>money</em>. Putting the money thing to one side for the moment, we’ll stay focussed on just the <em>time</em> thing.</p>

<p>To help with the scheduling calculation, we use the <a href="https://rubygems.org/gems/ice_cube">ice_cube</a> gem.</p>

<p>Let’s say that we have a schedule that:</p>

<ul>
  <li>Starts today: <code>2024-05-22</code>.</li>
  <li>Has no end date</li>
  <li>Reoccurs monthly</li>
  <li>Day of the month: 31st</li>
</ul>

<p>With <code>ice_cube</code>, we can write code to generate schedules:</p>

<pre><code class="language-ruby">start_date = Date.parse('2024-05-22')

schedule_rule = IceCube::Rule.monthly.day_of_month(31)

schedule = IceCube::Schedule.new(start_date) do |s|
  s.add_recurrence_rule(schedule_rule)
end

puts schedule.first(10)
</code></pre>

<p>This seems innocent enough. But if we run it, we’ll see that it’s not quite right:</p>

<pre><code class="language-text">2024-05-31 00:00:00 +1000
2024-07-31 00:00:00 +1000
2024-08-31 00:00:00 +1000
2024-10-31 00:00:00 +1100
2024-12-31 00:00:00 +1100
2025-01-31 00:00:00 +1100
2025-03-31 00:00:00 +1100
2025-05-31 00:00:00 +1000
2025-07-31 00:00:00 +1000
2025-08-31 00:00:00 +1000
</code></pre>

<p>We asked for a monthly recurring schedule, but we also said that this has to be on the 31st day of the month. The <code>ice_cube</code> gem dutifully follows our instructions, and sets a reoccurring schedule for all months with 31 days and the first 5 months there are May, July, August, October, and December.</p>

<p>We would also see this bug if we specified the 30th or 29th for the day of the month.</p>

<p>To fix this, we can instead specify a negative day:</p>

<pre><code class="language-ruby">start_date = Date.parse('2024-05-22')

schedule_rule = IceCube::Rule.monthly.day_of_month(-1)

schedule = IceCube::Schedule.new(start_date) do |s|
  s.add_recurrence_rule(schedule_rule)
end

puts schedule.next_occurrences(10)
</code></pre>

<p>This will produce the following schedule:</p>

<pre><code class="language-text">2024-05-31 00:00:00 +1000
2024-06-30 00:00:00 +1000
2024-07-31 00:00:00 +1000
2024-08-31 00:00:00 +1000
2024-09-30 00:00:00 +1000
2024-10-31 00:00:00 +1100
2024-11-30 00:00:00 +1100
2024-12-31 00:00:00 +1100
2025-01-31 00:00:00 +1100
2025-02-28 00:00:00 +1100
</code></pre>

<p>We can do similar scheduling rules for the things I mentioned earlier too, such as scheduling things on Mondays:</p>

<pre><code class="language-ruby">schedule_rule = IceCube::Rule.weekly.day(:monday)
</code></pre>

<pre><code class="language-text">2024-05-27 00:00:00 +1000
2024-06-03 00:00:00 +1000
2024-06-10 00:00:00 +1000
2024-06-17 00:00:00 +1000
2024-06-24 00:00:00 +1000
2024-07-01 00:00:00 +1000
2024-07-08 00:00:00 +1000
2024-07-15 00:00:00 +1000
2024-07-22 00:00:00 +1000
2024-07-29 00:00:00 +1000
</code></pre>

<p>The <a href="https://github.com/ice-cube-ruby/ice_cube">README for the gem</a> contains plenty of other examples.</p>]]></content><author><name></name></author><summary type="html"><![CDATA[I work in a system that needs to have recurring calendar-based payments happen, where the frequency of these payments is down to a (mostly) arbitrary selection by users. Recurring calendar events are interesting, especially if someone picks the end of the month for an event to occur. Some months that means the 30th, but it can also mean the 28th, 29th and 31st, depending on not only the month but also the year, thanks to leap years. Recurring payments can occur over multiple years, so one year there might be a payment done on the 29th of February one year, and another done on the 28th of February the year either side of that.]]></summary></entry><entry><title type="html">Thought Experiment: Without React or GraphQL</title><link href="http://localhost:4000/2024/05/without-react-or-graphql" rel="alternate" type="text/html" title="Thought Experiment: Without React or GraphQL" /><published>2024-05-20T00:00:00+10:00</published><updated>2024-05-20T00:00:00+10:00</updated><id>http://localhost:4000/2024/05/without-react-or-graphql</id><content type="html" xml:base="http://localhost:4000/2024/05/without-react-or-graphql"><![CDATA[<p>I’ve spent a great deal of my writing time in the past few years arguing for GraphQL in my <a href="https://pragprog.com/titles/d-rbgql/graphql-for-rails-developers/">GraphQL for Rails Developers</a> and its frontend companion Apollo in the <a href="https://pragprog.com/titles/d-rbgql/graphql-for-rails-developers/">Apollo Handbook</a>. I think these are very good tools for providing a clear separation between an API layer and a frontend layer.</p>

<p>But in saying that, I acknowledge there is no silver bullet for software development. So what would I do if I <em>couldn’t</em> use React or GraphQL?</p>

<p>To replace React on the frontend, I would use <a href="https://viewcomponent.org/">View Component</a> as I have written about <a href="https://ryanbigg.com/2024/01/view-components-table-edition">here</a> and <a href="https://ryanbigg.com/2023/06/rails-7-react-typescript-setup">here</a>. I could also be convinced to use <a href="https://www.phlex.fun/">Phlex</a>.</p>

<p>I think having a typed layer between your database and view is just something that <em>makes sense</em>, and so to that end I would define a <em>separate</em> class for the data types for these components, using <code>dry-types</code> and then pass objects of those classes to the view, in a way that if you squint hard enough you could see it as the Presenter Pattern. I proposed something similar to this <a href="https://ryanbigg.com/2022/03/typed-view-components">two years ago in my “Typed View Components” post</a></p>

<p>Riffing on the example from that post, I would have this as:</p>

<pre><code class="language-ruby">class RefundComponent &lt; ViewComponent::Base
  extend Dry::Initializer
  Types = Dry.Types()

  class Refund &lt; Dry::Struct
    schema schema.strict

    attribute :standalone, Types::Bool
    attribute :amount, Types::Float
    attribute :currency, Types::String
  end

  option :refund, Refund
end
</code></pre>

<p>This allows you to keep together the logic of the component (both its Ruby code and its associated views) and the presenter in one directory.</p>

<p>In the controller, the code would look like this:</p>

<pre><code class="language-ruby">refund = RefundComponent::Refund.new(
  standalone: @refund.standalone?
  amount: @refund.amount,
  currency: @refund.currency,
)

@refund_component = RefundComponent.new(refund: refund)
</code></pre>

<p>This would still give us an interface <em>similar</em> to GraphQL, where the connecting layer between the database and the frontend is still typed. I think it’s teetering on the edge of being too verbose, but in all things trade-offs.</p>

<p>You then don’t end up exposing any way of doing database queries to the view, which would help prevent N+1 queries. And you can test your views in isolation from the database too. The <code>refund</code> passed to the component doesn’t have to come from the database; it could be a stubbed object, as long as it responds to the right methods.</p>

<p>In the view file itself you might or might not get smart tab-completion like you do within TypeScript-powered GraphQL code, but I think that’s a fair trade-off.</p>

<p>This whole approach trades off React’s “reactivity” as well, so there’s no state management going on here or DOM updating when the state changes. There are probably ways around this (like Hotwire, etc.) but I haven’t gone down those paths yet.</p>

<p>Another benefit here is that all the code is in one language, rather than three (Ruby, GraphQL and TypeScript), and that might make it easier for frontend-adverse people to pick it up as well.</p>]]></content><author><name></name></author><summary type="html"><![CDATA[I’ve spent a great deal of my writing time in the past few years arguing for GraphQL in my GraphQL for Rails Developers and its frontend companion Apollo in the Apollo Handbook. I think these are very good tools for providing a clear separation between an API layer and a frontend layer.]]></summary></entry><entry><title type="html">What was that branch?</title><link href="http://localhost:4000/2024/05/what-was-that-branch" rel="alternate" type="text/html" title="What was that branch?" /><published>2024-05-14T00:00:00+10:00</published><updated>2024-05-14T00:00:00+10:00</updated><id>http://localhost:4000/2024/05/what-was-that-branch</id><content type="html" xml:base="http://localhost:4000/2024/05/what-was-that-branch"><![CDATA[<p>When I’m working in an app I tend to have multiple branches on the go at any one time while waiting for feedback on those branches, be that feedback from CI systems or people. Occasionally, it’s a few days / weeks between visits to a branch because the flow of work meant it that way. And sometimes, I forget what the branch name was.</p>

<p>To help with this, I’ve got this function in my <code>~/.zshrc</code>:</p>

<pre><code>fbr () {
	local branches branch
	branches=$(git for-each-ref --count=30 --sort=-committerdate refs/heads/ --format="%(refname:short)")  &amp;&amp; branch=$(echo "$branches" |
  fzf-tmux -d $(( 2 + $(wc -l &lt;&lt;&lt; "$branches") )) +m)  &amp;&amp; git checkout $(echo "$branch" | sed "s/.* //" | sed "s#remotes/[^/]*/##")
}
</code></pre>

<p>This complicated looking function finds the 30 most recent local branches and presents them in a date-ordered list using <code>fzf-tmux</code>. To pick a branch, I can type part of the branch name if I remember it, and <code>fzf</code> will filter the list of branches to just the ones that match that. When I find the branch I want, I hit enter and this will swap over to the branch.</p>]]></content><author><name></name></author><summary type="html"><![CDATA[When I’m working in an app I tend to have multiple branches on the go at any one time while waiting for feedback on those branches, be that feedback from CI systems or people. Occasionally, it’s a few days / weeks between visits to a branch because the flow of work meant it that way. And sometimes, I forget what the branch name was.]]></summary></entry><entry><title type="html">code is like garden</title><link href="http://localhost:4000/2024/05/code-is-like-garden" rel="alternate" type="text/html" title="code is like garden" /><published>2024-05-04T00:00:00+10:00</published><updated>2024-05-04T00:00:00+10:00</updated><id>http://localhost:4000/2024/05/code-is-like-garden</id><content type="html" xml:base="http://localhost:4000/2024/05/code-is-like-garden"><![CDATA[<p>Code is like garden.</p>

<p>Sometimes, you come into garden and find out past gardener put sun-loving plant in the cupboard at the back of the shed. You discover more sheds and cupboards later on.</p>

<p>The materials used in shed construction make you think past gardener may have been ticking off a list of known elements, rather than trying to build sturdy shed.</p>

<p>Past gardener put picket fence going vertically up the side of one shed. You ask other gardeners why the fence is there and they say “it’s always been that way”. No other shed has a fence.</p>

<p>Some gardeners like a particular brand of hand trowel and get into religious arguments over which hand trowel is better.</p>

<p>Sometimes, GM (Garden Manager) ask how long it takes to grow a tree. GM gets grumpy when asked what kind of tree they are talking about.</p>

<p>GM gets jealous of fig tree in big city Botanic Gardens (lots of pro gardeners there). Wants you to grow one exactly like it in 3 months, same size and fruit quantity. The fig tree in the gardens is over four stories tall and has existed for decades. You will be the only gardener tasked with growing this tree.</p>

<p>Weeding will be prioritised next weekend. This weekend is for planting new things that the GM purchased and spraying the bugs, but only ones VIP buyer has pointed out. It rains the next 3 weekends, and the weeds run wild. More things come in to plant in the mean time. You weed in between planting, without telling GM.</p>

<p>Other gardeners can only grow one type of plant and refuse to grow others. Others still seem to know every plant, the perfect conditions under which they grow, their quirks, their Latin names, taxonomy and sub-varietals.</p>

<p>There appears to be a new plant variety released at least weekly. You haven’t yet learned the last five you’ve picked up.</p>]]></content><author><name></name></author><summary type="html"><![CDATA[Code is like garden.]]></summary></entry><entry><title type="html">One year with the Ergodox EZ</title><link href="http://localhost:4000/2024/04/one-year-with-the-ergodox-ez" rel="alternate" type="text/html" title="One year with the Ergodox EZ" /><published>2024-04-29T00:00:00+10:00</published><updated>2024-04-29T00:00:00+10:00</updated><id>http://localhost:4000/2024/04/one-year-with-the-ergodox-ez</id><content type="html" xml:base="http://localhost:4000/2024/04/one-year-with-the-ergodox-ez"><![CDATA[<p>A year ago I upgraded from a <a href="https://kinesis-ergo.com/keyboards/freestyle-edge-rgb/">Kinesis Freestyle Edge</a> to an <a href="https://ergodox-ez.com">Ergodox EZ</a>. What initially enticed me was the thumb keys, as well as the ability to program different macros into the “spare” keys littered around the board. (I still have the Kinesis Freestyle sitting in storage, buyers enquire within…)</p>

<p>I used <a href="https://monkeytype.com">Monkeytype</a> to practice typing on the keyboard, and the stats there show that it took me about a month to go from the initial speed of 40wpm (quite painful) back up to 90wpm. That’s when I started feeling properly comfortable with it. I can now do about 130wpm on this keyboard, which is the same speed I could do on the Freestyle and my laptop keyboard.</p>

<p>I originally bought the Kinesis keyboard because of persistent shoulder pain from using a single keyboard. Having two keyboards that I can keep a little over shoulder width apart has helped to keep my physiotherapy bills down. Since using split keyboards, I haven’t had to go to a physio to get my shoulders “unlocked”. So the keyboards have paid for themselves that way.</p>

<p>Since buying the Ergodox, I’ve also started to make good use of the layering system. You can see the full set of layouts here:</p>

<div style="padding-top: 60%; position: relative;">
	<iframe src="https://configure.zsa.io/embed/ergodox-ez/layouts/5wDLX/latest/0" style="border: 0; height: 100%; left: 0; position: absolute; top: 0; width: 100%"></iframe>
</div>

<p>A few things to note about Layer 0:</p>

<ol>
  <li>Backspace is where caps lock usually is. I feel strongly about this – it should be standard on all keyboards.</li>
  <li>Held keys: Z becomes Left control, Forward slash becomes right control, semi-colon switches to the 2nd layer.</li>
  <li>Backtick and tilde are on the bottom left of the left keyboard. This button, when held, switches to the 1st layer.</li>
  <li>Command, option and escape are on the thumb keys. No “Emacs claw” for complicated shortcuts.</li>
  <li>Top left is equals. It gets special preference as I type it a lot when coding.</li>
  <li>The “Hyper” key is one of the keys required for my <a href="https://www.hammerspoon.org/">Hammerspoon</a> shortcuts. I use these to move quickly between apps.</li>
  <li>There are shortcuts on the thumb keys for cut (the knife), paste and copy.</li>
  <li>I could probably remap that spare “Tab” on the right thumb to something else – I use the top-left tab out of habit. I don’t have an immediate idea of what it could map to.</li>
</ol>

<p>A keen observer would note that there’s no curly brackets on here, and yet I still somehow manage to write Ruby hashes and JavaScript objects. I keep those on Layer 1, where the “E” and “R” keys are my brackets. If I hold backtick (bottom left of the left keyboard), this triggers the layer switcher to switch to Layer 1. My keyboard indicates this by lighting up a red LED. When I then press “E”, I get a square bracket. If I do the same holding of backtick but press “E” twice, I get a curly bracket. I think this is one of the cooler features of this keyboard. You can configure actions when a key is tapped, double tapped, held, or tapped then held. I use the first 3 of these, but haven’t found a use for tapped then held yet.</p>

<p>On Layer 1’s right-hand panel is the arrow keys. I still can’t map it in my brain that left and right arrows are on the left keyboard, and up and down are on the right. So I’ve got the traditional arrow layout on that layer, on the right of the keyboard roughly where my hand expects it to be.</p>

<p>Next, we have Layer 2 which is the media controls. On my laptop keyboard, these are on the function keys, which always felt like a bit of a hard reach. To get to this layer I hold the semi-colon key, and the keyboard indicates it’s switched with a green LED. I can then do all the regular music things like play, pause, mute, etc.</p>

<p>For reasons that are completely opaque to me, there can be up to 32 different layers on the keyboard. I cannot imagine ever needing more than the few that I have right now. Even thinking about the keyboard contortion that would be required to switch to a 32nd layer and not the 28th layer is giving me a headache.</p>

<p>Finally: a word on the switches inside the keyboard itself. The keyboard came with Cherry Brown switches which are what I would consider to be the greatest argument ever against working from the office. They were ridiculously loud. And stiff enough that even someone who types as hard as I do noticed how hard I had to press. I’ve since replaced the switches with Cherry Reds which are quieter and not as stiff. I think this has made maybe a 5-10% improvement on my accuracy and speed for this keyboard.</p>]]></content><author><name></name></author><summary type="html"><![CDATA[A year ago I upgraded from a Kinesis Freestyle Edge to an Ergodox EZ. What initially enticed me was the thumb keys, as well as the ability to program different macros into the “spare” keys littered around the board. (I still have the Kinesis Freestyle sitting in storage, buyers enquire within…)]]></summary></entry><entry><title type="html">Tailwind has won</title><link href="http://localhost:4000/2024/03/tailwind-has-won" rel="alternate" type="text/html" title="Tailwind has won" /><published>2024-03-26T00:00:00+11:00</published><updated>2024-03-26T00:00:00+11:00</updated><id>http://localhost:4000/2024/03/tailwind-has-won</id><content type="html" xml:base="http://localhost:4000/2024/03/tailwind-has-won"><![CDATA[<p>Over the last couple of months, I’ve been working across multiple applications that use various CSS frameworks. Specifically: <a href="https://bulma.io/">Bulma</a>, <a href="https://getbootstrap.com/">Bootstrap</a> and <a href="https://tailwindcss.com/">Tailwind</a>. There are (at least) three distinct CSS frameworks within these applications because each of these apps have been developed over almost a decade and a half, and the flavour-of-the-month has changed a lot over that time. As people have worked on the systems, they have left the “fingerprints” of personal choices.</p>

<p>Three years ago, I became the Platform Tech Lead at Fat Zebra, which meant I was in charge of the technical side of things when it comes to our frontend. Part of this job meant standardising our frontend tech stack. At this time, Bootstrap (around v4.5) and Bulma (0.9.4) were the only two CSS frameworks used at Fat Zebra. After talking about it with the team, we decided to not use <em>either</em> of these frameworks, and instead opted to go with Tailwind.</p>

<p>The reason for this is that we found Bulma lacking quite a lot of the common things from CSS frameworks we wanted – it was too light. And, similarly, we found Bootstrap <em>too heavy</em> – it did too much.</p>

<p>Tailwind on the other hand, we found <em>just right</em>. It has an absolute wealth of styles, its documentation is absolutely stellar, and the preprocessor that shrinks the base CSS file to <em>just the styles you are using</em>.</p>

<p>On top of this, we’ve found the <a href="https://flowbite.com/">Flowbite</a> component library to be incredibly helpful to declare base styles for our components. Our designer has integrated these styles into our Design System, called Zeal, and he provides designs in Figma based off these modified Flowbite components. These changes are then brought into our code through the <a href="https://tailwindcss.com/docs/configuration">Tailwind config file</a>, that’s shared across our projects.</p>

<p>So now instead of having <em>three</em> distinct CSS frameworks, we’re undertaking work to use just the one: Tailwind, in combination with the customizations from our design system.</p>

<p>To share these Tailwind styles across components, we’ve got two methods that we rely on.</p>

<p>For React apps, we use React components with these class names specified in the <code>className</code> prop. Or if we’re using these in non-React-apps, we’ll move these styles into a shared CSS file, using Tailwind’s <a href="https://tailwindcss.com/docs/reusing-styles#extracting-classes-with-apply"><code>@apply</code> directive</a>:</p>

<pre><code class="language-css">.zeal-button {
  @apply py-2 px-4 h-10 inline-flex items-center rounded-lg text-sm whitespace-nowrap disabled:cursor-not-allowed;
}

.zeal-button-primary {
  @apply zeal-button bg-primary-500 text-white disabled:bg-primary-300 active:bg-primary-700 hover:bg-primary-600 focus:outline-none focus:ring focus:ring-primary-300;
}
</code></pre>

<p>Then we can use these as substitutions in our HTML, instead of spamming it with all the classes:</p>

<pre><code class="language-html">&lt;button class='zeal-button-primary'&gt;
</code></pre>

<p>This setup works incredibly well for our little team, and I suspect it would scale as well for an even bigger team. Changes get applied to the design system, which then are updated in Figma, and those updates flow through to our React components or our CSS files, depending on which component it is.</p>

<p>So for all of these reasons above, <strong>Tailwind has won the CSS framework wars.</strong> It provides a set of very sensible defaults out of the box, with just enough extensibility for us to build a design system on. It works well with React components, or regular HTML views. And it has a ton of useful documentation and example components out there that you can use to get started.</p>]]></content><author><name></name></author><summary type="html"><![CDATA[Over the last couple of months, I’ve been working across multiple applications that use various CSS frameworks. Specifically: Bulma, Bootstrap and Tailwind. There are (at least) three distinct CSS frameworks within these applications because each of these apps have been developed over almost a decade and a half, and the flavour-of-the-month has changed a lot over that time. As people have worked on the systems, they have left the “fingerprints” of personal choices.]]></summary></entry></feed>