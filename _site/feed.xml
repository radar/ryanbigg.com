<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.3.2">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2023-12-21T08:22:18+11:00</updated><id>http://localhost:4000/feed.xml</id><entry><title type="html">Audit Logging Notes</title>z
      <link href="http://localhost:4000/2023/12/audit-logging-notes" rel="alternate" type="text/html" title="Audit Logging Notes" /><published>2023-12-20T00:00:00+11:00</published><updated>2023-12-20T00:00:00+11:00</updated><id>http://localhost:4000/2023/12/audit-logging-notes</id><content type="html" xml:base="http://localhost:4000/2023/12/audit-logging-notes"><![CDATA[<p>I’ve recently been working on adding audit logging to an application at work, and I wanted to share some notes on the process here, as I couldn’t find much written about it online.</p>

<p>This application is called the Merchant Dashboard, and is typically used by merchants to view and process transactions. Common actions that can be taken include things such as creating purchases, issuing refunds, or setting up payment plans for their customers.</p>

<p>Audit logging means tracking all the “write” events that a user can take within our application. We want to provide a history of these actions so that merchants can look through their users’ activities. While we, as application owners, can look through the logs to determine who took what action when, our merchants have not been able to access this data themselves. This audit logging feature aims to address that.</p>

<h2 id="audit-table-schema">Audit Table Schema</h2>

<p>We have a table that tracks all the events a user takes, tracking:</p>

<ul>
  <li><code>timestamp</code>: <strong>When</strong> the event happened.</li>
  <li><code>user_id</code>: <strong>Who</strong> took the action.</li>
  <li><code>merchant_id</code>: The merchant account where the action was taken.</li>
  <li><code>action</code>: <strong>What</strong> the action was (a string like <code>create_purchase</code>)</li>
  <li><code>record_id</code> / <code>record_type</code>: If the action was taken on a record, what the record was. This can be nullable, as some actions do not involve a record that isn’t the user’s record, such as logging in, or resetting a password.</li>
  <li><code>payload</code>: Any additional metadata we wanted to include</li>
</ul>

<p>A record in the audit log table might look like:</p>

<ul>
  <li><code>timestamp</code>: 2023-12-23 09:42:00</li>
  <li><code>user_id</code>: 1</li>
  <li><code>merchant_id</code>: 2</li>
  <li><code>action</code>: <code>create_purchase</code></li>
  <li><code>record_id</code> / <code>record_type</code>: 3 / Purchase</li>
  <li><code>payload</code>: <code>{}</code></li>
</ul>

<p>Or:</p>

<ul>
  <li><code>timestamp</code>: 2023-12-23 09:42:00</li>
  <li><code>user_id</code>: 1</li>
  <li><code>merchant_id</code>: nil</li>
  <li><code>action</code>: <code>login</code></li>
  <li><code>record_id</code> / <code>record_type</code>: nil</li>
  <li><code>payload</code>: <code>{}</code></li>
</ul>

<p>We separate the login event from any particular merchant in our application, as a user can login and then switch between the different merchants they have access to.</p>

<h2 id="displaying-audit-logs">Displaying audit logs</h2>

<p>Displaying this information is done in two distinct ways. We want to display audit log information on a per-user basis; what actions has <em>this particular user</em> taken? And: we want to display audit log information for a whole merchant account; what actions <em>have all users</em> taken on <em>this particular merchant account</em>?</p>

<p>In both situations, all of these things are helpful:</p>

<ul>
  <li>Show events in reverse chronological order</li>
  <li>Group events by date</li>
  <li>Paginate events, rather than showing <em>all events ever</em>, show 25-50 events on a page.</li>
  <li>Provide searching, allowing a user to search for <em>actions</em> or <em>record IDs / types</em>.</li>
  <li>Allow users to filter by a specific date range. Default this date range to the last 30 days.</li>
  <li>Indicate potentially dangerous events with a specific label, such as password reset for the user, failed login attempts or deletion of data.</li>
</ul>

<h2 id="handling-deleted-records">Handling deleted records</h2>

<p>Also worth considering here is how you would display an audit log line for a deleted record. Say that these two events occurred:</p>

<ol>
  <li>A customer was created</li>
  <li>The same customer record was deleted</li>
</ol>

<p>Is it still relevant that the customer was created in the first place? Perhaps. A customer could’ve had a payment processed for them in the interleaving time, which would be a very relevant log line to catch.</p>

<p>For this reason, consider soft-deletion of important records using something such as <a href="https://github.com/jhawthorn/discard">the discard gem</a>. That way, you can still point the audit log to the record in question, even if it remains invisible from other parts of the system.</p>

<h2 id="staff--system-level-events">Staff / system level events</h2>

<p>Our system allows for internal staff to “impersonate” users and act on their behalf. For events such as this, the impersonation attempt should be logged. If there are any other write actions taken while impersonation is happening, the event is logged against the user being impersonated, and tagged (using the payload) as an impersonation event.</p>

<p>For automatic system-level events, such as scheduled payments, we will log these as well on a merchant account level so that they appear tied to a “system” user.</p>

<h2 id="audit-log-retention">Audit log retention</h2>

<p>While it would be great to keep data for all time, disk space is finite, and when it’s not it’s <em>expensive</em>.</p>

<p>Consider automatically culling audit logs after a pre-defined period, perhaps a year or two.</p>]]></content><author><name></name></author><summary type="html"><![CDATA[I’ve recently been working on adding audit logging to an application at work, and I wanted to share some notes on the process here, as I couldn’t find much written about it online.]]></summary></entry><entry><title type="html">Ruby 3, Hashes and Keyword Arguments</title>z
      <link href="http://localhost:4000/2023/11/ruby-32-hashes-and-keyword-arguments" rel="alternate" type="text/html" title="Ruby 3, Hashes and Keyword Arguments" /><published>2023-11-09T00:00:00+11:00</published><updated>2023-11-09T00:00:00+11:00</updated><id>http://localhost:4000/2023/11/ruby-32-hashes-and-keyword-arguments</id><content type="html" xml:base="http://localhost:4000/2023/11/ruby-32-hashes-and-keyword-arguments"><![CDATA[<p>We debugged a fun one today.</p>

<p>There’s a method provided by Rails called <code>tag</code>, and it provides a way to write HTML tags.</p>

<p>We were using it like this:</p>

<pre><code class="language-ruby">def react_component(component_name, props, options = {})
  tag.div({
    data: {
      react_component: component_name,
      props: props.to_json,
    }
  }.merge(options)) { "" }
end
</code></pre>

<p>Did you spot the bug? We didn’t for a while. The symptom was that we were seeing completely blank <code>&lt;div&gt;&lt;/div&gt;</code> tag, when we were expecting them to have at least the <code>data</code> attributes populated.</p>

<p>The issue here has to do with how Ruby 3 has changed how it processes keyword arguments. In Ruby 2.7, the argument passed to <code>react_component</code> was interpreted as keyword arguments. In Ruby 3, it’s interpreted as a regular argument, where the value of that argument is a Hash object.</p>

<p>This means that when <a href="https://github.com/rails/rails/blob/60d05cda7f0000692391cb761caa496e8fa9014c/actionview/lib/action_view/helpers/tag_helper.rb#L320-L326">the <code>TagHelper#method_missing</code> method</a> is called in Action View, the parameters of this are:</p>

<ul>
  <li><code>called</code>: “div”</li>
  <li><code>*args</code>: <code>[{data: { react_component: component_name, props: props.to_json }}]</code>`</li>
  <li><code>**options</code>: {}</li>
</ul>

<p>The fix for this is to tell Ruby that we mean to use keyword arguments here, rather than a Hash argument:</p>

<pre><code class="language-ruby">def react_component(component_name, props, options = {})
  react_options = {
    data: {
      react_component: component_name,
      props: props.to_json,
    }
  }.merge(options)

  tag.div(**react_options) { "" }
end
</code></pre>]]></content><author><name></name></author><summary type="html"><![CDATA[We debugged a fun one today.]]></summary></entry><entry><title type="html">Saving time with fzf</title>z
      <link href="http://localhost:4000/2023/08/saving-time-with-fzf" rel="alternate" type="text/html" title="Saving time with fzf" /><published>2023-08-27T00:00:00+10:00</published><updated>2023-08-27T00:00:00+10:00</updated><id>http://localhost:4000/2023/08/saving-time-with-fzf</id><content type="html" xml:base="http://localhost:4000/2023/08/saving-time-with-fzf"><![CDATA[<p>One of my favourite terminal utilities is <a href="https://github.com/junegunn/fzf">a little utility called fzf</a> (fuzzy finder). It’s how I save a bunch of time by not writing out commands, or even remembering them.</p>

<h2 id="command-history">Command history</h2>

<p>The thing I use fzf for the most is command history. To access the history, I use Ctrl+R and I get a list of my most recent commands:</p>

<pre><code>10024 z ryanbigg
10026 bundle exec jekyll serve
</code></pre>

<p>(The numbers represent the position of that command in my <code>.zsh_history</code> file.)</p>

<p>If I then write the word “serve”, fzf will only show me commands with that word in it:</p>

<pre><code>10026 serve
</code></pre>

<p>I usually use this for running some different Rails apps on certain ports. So I would hit Ctrl+R, and then type a particular port number such as 3004 to get:</p>

<pre><code>10007 bundle exec rails s -p 3004
</code></pre>

<p>Instead of typing out the full command, I can type Ctrl+R and 4 keystrokes later arrive at the right command.</p>

<h2 id="files-in-current-directory">Files in current directory</h2>

<p>Another thing I use fzf for is its relative file searching. Most of the time, I’m using this to run RSpec tests. I type:</p>

<pre><code>ber
</code></pre>

<p>(Which is my alias for “bundle exec rspec”), and then I hit Ctrl+T and I get a list of files in my terminal:</p>

<pre><code>app
app/models
app/models/category.rb
...
</code></pre>

<p>Then I can type a few words, or even parts of words, to get what I’m after. In this example, I’d like to find the file at <code>spec/requests/graphql/queries/repo_categories_spec.rb</code>. What a mouthful! With <code>fzf</code>, I can type <code>repocat</code> and arrive at that spec in only seven keystrokes:</p>

<pre><code>spec/requests/graphql/queries/repo_categories_spec.rb
&lt;other files here&gt;
</code></pre>

<p>When I hit enter here, my <code>ber</code> command becomes:</p>

<pre><code>ber spec/requests/graphql/queries/repo_categories_spec.rb
</code></pre>

<p>Then I can run this test.</p>

<p>(If I’ve run this command before, I might use <code>Ctrl+R</code> to find the “full version” of <code>ber</code> + the file path!)</p>

<h2 id="filtering-output">Filtering output</h2>

<p>Finally, the last way I use <code>fzf</code> is to filter output. You can pipe a list of inputs to <code>fzf</code> and it will provide its fuzzy finding features on that list.</p>

<p>The way I use this the most is this very complicated looking function:</p>

<pre><code>fbr () {
	local branches branch
	branches=$(git for-each-ref --count=30 --sort=-committerdate refs/heads/ --format="%(refname:short)")  &amp;&amp; branch=$(echo "$branches" |
  fzf-tmux -d $(( 2 + $(wc -l &lt;&lt;&lt; "$branches") )) +m)  &amp;&amp; git checkout $(echo "$branch" | sed "s/.* //" | sed "s#remotes/[^/]*/##")
}
</code></pre>

<p>I didn’t come up with this myself, but I borrowed it from elsewhere.</p>

<p>This command finds the 30 most recent Git branches (surely more than adequate!) and provides a way of filtering through them. Here’s what I see when I run <code>fbr</code> in a gem I have checked out:</p>

<pre><code>patch-1
fix-locale-with-separator
prep-1-1-4
...
</code></pre>

<p>If I type the word <code>locale</code> and hit enter, the <code>git checkout</code> command will switch me into that branch.</p>

<p>I find this one really useful when I can only half-remember a branch name, or if I’ve got a branch with an issue number in it, then I can jump straight to that branch if I know the number.</p>]]></content><author><name></name></author><summary type="html"><![CDATA[One of my favourite terminal utilities is a little utility called fzf (fuzzy finder). It’s how I save a bunch of time by not writing out commands, or even remembering them.]]></summary></entry><entry><title type="html">Alpine Linux, Selenium Manager, Chrome and ChromeDriver</title>z
      <link href="http://localhost:4000/2023/08/alpine-linux-selenium-manager-chrome-and-chromedriver" rel="alternate" type="text/html" title="Alpine Linux, Selenium Manager, Chrome and ChromeDriver" /><published>2023-08-22T00:00:00+10:00</published><updated>2023-08-22T00:00:00+10:00</updated><id>http://localhost:4000/2023/08/alpine-linux-selenium-manager-chrome-and-chromedriver</id><content type="html" xml:base="http://localhost:4000/2023/08/alpine-linux-selenium-manager-chrome-and-chromedriver"><![CDATA[<p>Selenium, and by extension the selenium-webdriver gem, after version 4.11 come with <a href="https://www.selenium.dev/blog/2022/introducing-selenium-manager/">a new feature called Selenium Manager</a>. This CLI tool will automatically install whatever browser and driver you need to run your Selenium tests. (These are installed under <code>~/.cache/selenium...</code>)</p>

<p>Today, I tried setting this up in an Alpine linux based Docker image and ran into trouble where it claimed it could not find the executable.</p>

<p>I was seeing errors such as:</p>

<pre><code>/bin/sh: ./chromedriver-linux64/chromedriver: not found
</code></pre>

<p>The file was definitely present though!</p>

<p>Other answers on the internet pointed to this being an issue with missing libraries. Those answers pointed to the <code>ldd</code> tool, and sure enough that showed the libraries that were required for chromedriver. The command was:</p>

<pre><code>ldd ./chromedriver-linux64/chromedriver
</code></pre>

<p>This listed the system libaries that the chromedriver executable was dependent on Then I read through those messages that were output and attempted to find packages that matched the messages.</p>

<p>To make Chromedriver v116 work on Alpine Linux, you have to have these packages installed:</p>

<pre><code>apk add gcompat glib nss libxcb libgcc
</code></pre>

<p>After installing these packages, Chromedriver was able to start.</p>

<p>But Chromedriver is not so useful without a Chrome to drive it. I used <code>ldd</code> once again, and found a <em>huge</em> list of packages that Chrome requires. Instead of installing all of these, you can install Chrome using:</p>

<pre><code>apk add chromium
</code></pre>

<p>This will then install Chromium (whatever’s latest and all of the package dependencies). This will be enough to get Chrome running.</p>

<p>Ultimately, I ended up building a small Docker image to test this out properly. Here’s that image’s <code>Dockerfile</code>:</p>

<pre><code>FROM ruby:3.2.2-alpine
RUN apk update &amp;&amp; apk add gcompat glib nss libxcb libgcc chromium

RUN adduser -D app
RUN mkdir /app
RUN chown app:app /app
USER app
WORKDIR /app
COPY --chown=app:app . /app

RUN bundle config set --local path vendor/bundle
RUN bundle install
CMD bundle exec irb
</code></pre>

<p>I build this with:</p>

<pre><code>docker build . -t selenium
</code></pre>

<p>Then I run it with:</p>

<pre><code> docker run -it selenium
</code></pre>

<p>This will launch me into an IRB session. To check if Selenium can correctly download + use Chrome and ChromeDriver, I run this code, which is very similar to the code that would be used to configure this within <code>rails_helper.rb</code> in a Rails app:</p>

<pre><code class="language-ruby">Bundler.require

Selenium::WebDriver.logger.level = Logger::DEBUG

options = ::Selenium::WebDriver::Chrome::Options.new

options.add_argument("--headless")
options.add_argument("--no-sandbox")
options.add_argument("--disable-dev-shm-usage")
options.add_argument("--disable-gpu")

Selenium::WebDriver.for :chrome, capabilities: options
</code></pre>

<p>This output should include things like a check for both Chrome + ChromeDriver, which will fail:</p>

<pre><code>DEBUG Selenium [:selenium_manager] Checking chromedriver in PATH
DEBUG Selenium [:selenium_manager] Running command: chromedriver --version
DEBUG Selenium [:selenium_manager] Output: ""
DEBUG Selenium [:selenium_manager] chromedriver not found in PATH
DEBUG Selenium [:selenium_manager] Checking chrome in PATH
DEBUG Selenium [:selenium_manager] Running command: which chrome
DEBUG Selenium [:selenium_manager] Output: ""
DEBUG Selenium [:selenium_manager] chrome not found in PATH
DEBUG Selenium [:selenium_manager] chrome has not been discovered in the system
</code></pre>

<p>(The chrome one fails here, as <code>chromium</code> has installed Chrome at <code>/usr/bin/chromium</code>.)</p>

<p>After that, we’ll see log lines for downloads of Chrome + ChromeDriver:</p>

<pre><code>DEBUG Selenium [:selenium_manager] Reading metadata from https://googlechromelabs.github.io/chrome-for-testing/last-known-good-versions-with-downloads.json
DEBUG Selenium [:selenium_manager] Required browser: chrome 116.0.5845.96
DEBUG Selenium [:selenium_manager] Downloading chrome 116.0.5845.96 from https://edgedl.me.gvt1.com/edgedl/chrome/chrome-for-testing/116.0.5845.96/linux64/chrome-linux64.zip
DEBUG Selenium [:selenium_manager] chrome 116.0.5845.96 has been downloaded at /home/app/.cache/selenium/chrome/linux64/116.0.5845.96/chrome
DEBUG Selenium [:selenium_manager] Reading metadata from https://googlechromelabs.github.io/chrome-for-testing/known-good-versions-with-downloads.json
DEBUG Selenium [:selenium_manager] Required driver: chromedriver 116.0.5845.96
DEBUG Selenium [:selenium_manager] Driver URL: https://edgedl.me.gvt1.com/edgedl/chrome/chrome-for-testing/116.0.5845.96/linux64/chromedriver-linux64.zip
DEBUG Selenium [:selenium_manager] Driver path: /home/app/.cache/selenium/chromedriver/linux64/116.0.5845.96/chromedriver
DEBUG Selenium [:selenium_manager] Browser path: /home/app/.cache/selenium/chrome/linux64/116.0.5845.96/chrome
</code></pre>

<p>Importantly, this shows version 116.0.5845.96 for both Chrome + ChromeDriver. We want these to match for compatibility reasons. As Chrome releases newer versions, the version that’s downloaded here will differ.</p>

<p>Then we’ll see ChromeDriver starting up:</p>

<pre><code>DEBUG Selenium [:selenium_manager] Browser path: /home/app/.cache/selenium/chrome/linux64/116.0.5845.96/chrome
DEBUG Selenium [:driver_service] port prober could not bind to ::1:9515 (Address not available - bind(2) for "::1" port 9515)
DEBUG Selenium [:driver_service] Executing Process ["/home/app/.cache/selenium/chromedriver/linux64/116.0.5845.96/chromedriver", "--port=9515"]
DEBUG Selenium [:process] Starting process: ["/home/app/.cache/selenium/chromedriver/linux64/116.0.5845.96/chromedriver", "--port=9515"] with {[:out, :err]=&gt;#&lt;IO:&lt;STDOUT&gt;&gt;, :pgroup=&gt;true}
DEBUG Selenium [:process]   -&gt; pid: 28
2023-08-22 05:46:27 DEBUG Selenium [:driver_service] polling for socket on ["127.0.0.1", 9515]
Starting ChromeDriver 116.0.5845.96 (1a391816688002153ef791ffe60d9e899a71a037-refs/branch-heads/5845@{#1382}) on port 9515
Only local connections are allowed.
Please see https://chromedriver.chromium.org/security-considerations for suggestions on keeping ChromeDriver safe.
[1692683187.222][SEVERE]: bind() failed: Address not available (99)
ChromeDriver was started successfully.
</code></pre>

<p>The “address not available (99)” error here is because ChromeDriver is trying to bind to <code>::1:9515</code>, but this Docker image is not setup with IPv6 support, so that will fail.</p>

<p>Finally, we’ll see some JSON requests to <code>POST session</code> going back and forth from <code>9515</code>, indicating ChromeDriver’s opening a Chrome window and that’s succeeding.</p>

<pre><code>DEBUG Selenium [:command] -&gt; POST session
DEBUG Selenium [:command]    &gt;&gt;&gt; http://127.0.0.1:9515/session | {"capabilities":{"alwaysMatch":{"browserName":"chrome","goog:chromeOptions":{"args":["--headless","--no-sandbox","--disable-dev-shm-usage","--disable-gpu"],"binary":"/home/app/.cache/selenium/chrome/linux64/116.0.5845.96/chrome"}}}}
</code></pre>

<p>So the important thing to note here is that if you’ve got:</p>

<ol>
  <li>A Ruby image that uses <code>ruby:3.2.2-alpine</code> (or similar) as its base</li>
  <li>And you want to use the built-in Selenium Manager to download Chrome + Chromium</li>
  <li>You will need to have these packages installed:</li>
</ol>

<pre><code>apk add gcompat glib nss libxcb libgcc chromium
</code></pre>]]></content><author><name></name></author><summary type="html"><![CDATA[Selenium, and by extension the selenium-webdriver gem, after version 4.11 come with a new feature called Selenium Manager. This CLI tool will automatically install whatever browser and driver you need to run your Selenium tests. (These are installed under ~/.cache/selenium...)]]></summary></entry><entry><title type="html">Ubuntu, Ruby, Selenium Manager, Chrome and ChromeDriver</title>z
      <link href="http://localhost:4000/2023/08/ubuntu-ruby-selenium-manager-chrome-and-chromedriver" rel="alternate" type="text/html" title="Ubuntu, Ruby, Selenium Manager, Chrome and ChromeDriver" /><published>2023-08-22T00:00:00+10:00</published><updated>2023-08-22T00:00:00+10:00</updated><id>http://localhost:4000/2023/08/ubuntu-ruby-selenium-manager-chrome-and-chromedriver</id><content type="html" xml:base="http://localhost:4000/2023/08/ubuntu-ruby-selenium-manager-chrome-and-chromedriver"><![CDATA[<p><a href="/2023/08/alpine-linux-selenium-manager-chrome-and-chromedriver">This is a rehash of my Alpine Linux version of this post</a>. I’ll skip the fluff here and jump straight to the good stuff.</p>

<p>The packages needed for Chromedriver are:</p>

<pre><code>libnss3 libnspr4
</code></pre>

<p>The packages needed for Chrome are:</p>

<pre><code>libatk1.0-0 libatk-bridge2.0-0 libcups2 libdrm2 libxkbcommon0 libxcomposite1 libxdamage1 libxfixes3 libxrandr2 libgbm1 libasound2
</code></pre>

<p>(There’s also a package called <code>chromium-shell</code> that installs all of these necessary dependencies, and at least half a kitchen sink too. The install time for this package is very long.)</p>

<p>The <code>Dockerfile</code> is therefore:</p>

<pre><code>FROM ruby:3.2.2

RUN apt-get update &amp;&amp; apt-get install libnss3 libnspr4 libatk1.0-0 libatk-bridge2.0-0 libcups2 libdrm2 libxkbcommon0 libxcomposite1 libxdamage1 libxfixes3 libxrandr2 libgbm1 libasound2

# OR this, but the install time is much longer:
# RUN apt-get update &amp;&amp; apt-get install chromium-shell

RUN adduser --disabled-password --gecos "" app
COPY --chown app:app . /app
WORKDIR /app
USER app

RUN bundle config set --local path vendor/bundle
RUN bundle install
CMD bundle exec irb
</code></pre>

<p>And we can then build and run this image:</p>

<pre><code>docker build . -t ubuntu-selenium
docker run -it ubuntu-selenium
</code></pre>

<p>And confirm it works by running:</p>

<pre><code class="language-ruby">Bundler.require

Selenium::WebDriver.logger.level = Logger::DEBUG

options = ::Selenium::WebDriver::Chrome::Options.new

options.add_argument("--headless")
options.add_argument("--no-sandbox")
options.add_argument("--disable-dev-shm-usage")
options.add_argument("--disable-gpu")

Selenium::WebDriver.for :chrome, capabilities: options
</code></pre>

<p>This output should include things like a check for both Chrome + ChromeDriver, which will fail:</p>

<pre><code>DEBUG Selenium [:selenium_manager] Checking chromedriver in PATH
DEBUG Selenium [:selenium_manager] Running command: chromedriver --version
DEBUG Selenium [:selenium_manager] Output: ""
DEBUG Selenium [:selenium_manager] chromedriver not found in PATH
DEBUG Selenium [:selenium_manager] Checking chrome in PATH
DEBUG Selenium [:selenium_manager] Running command: which chrome
DEBUG Selenium [:selenium_manager] Output: ""
DEBUG Selenium [:selenium_manager] chrome not found in PATH
DEBUG Selenium [:selenium_manager] chrome has not been discovered in the system
</code></pre>

<p>(The chrome one fails here, as <code>chromium</code> has installed Chrome at <code>/usr/bin/chromium</code>.)</p>

<p>After that, we’ll see log lines for downloads of Chrome + ChromeDriver:</p>

<pre><code>DEBUG Selenium [:selenium_manager] Reading metadata from https://googlechromelabs.github.io/chrome-for-testing/last-known-good-versions-with-downloads.json
DEBUG Selenium [:selenium_manager] Required browser: chrome 116.0.5845.96
DEBUG Selenium [:selenium_manager] Downloading chrome 116.0.5845.96 from https://edgedl.me.gvt1.com/edgedl/chrome/chrome-for-testing/116.0.5845.96/linux64/chrome-linux64.zip
DEBUG Selenium [:selenium_manager] chrome 116.0.5845.96 has been downloaded at /home/app/.cache/selenium/chrome/linux64/116.0.5845.96/chrome
DEBUG Selenium [:selenium_manager] Reading metadata from https://googlechromelabs.github.io/chrome-for-testing/known-good-versions-with-downloads.json
DEBUG Selenium [:selenium_manager] Required driver: chromedriver 116.0.5845.96
DEBUG Selenium [:selenium_manager] Driver URL: https://edgedl.me.gvt1.com/edgedl/chrome/chrome-for-testing/116.0.5845.96/linux64/chromedriver-linux64.zip
DEBUG Selenium [:selenium_manager] Driver path: /home/app/.cache/selenium/chromedriver/linux64/116.0.5845.96/chromedriver
DEBUG Selenium [:selenium_manager] Browser path: /home/app/.cache/selenium/chrome/linux64/116.0.5845.96/chrome
</code></pre>

<p>Importantly, this shows version 116.0.5845.96 for both Chrome + ChromeDriver. We want these to match for compatibility reasons. As Chrome releases newer versions, the version that’s downloaded here will differ.</p>

<p>Then we’ll see ChromeDriver starting up:</p>

<pre><code>DEBUG Selenium [:selenium_manager] Browser path: /home/app/.cache/selenium/chrome/linux64/116.0.5845.96/chrome
DEBUG Selenium [:driver_service] port prober could not bind to ::1:9515 (Address not available - bind(2) for "::1" port 9515)
DEBUG Selenium [:driver_service] Executing Process ["/home/app/.cache/selenium/chromedriver/linux64/116.0.5845.96/chromedriver", "--port=9515"]
DEBUG Selenium [:process] Starting process: ["/home/app/.cache/selenium/chromedriver/linux64/116.0.5845.96/chromedriver", "--port=9515"] with {[:out, :err]=&gt;#&lt;IO:&lt;STDOUT&gt;&gt;, :pgroup=&gt;true}
DEBUG Selenium [:process]   -&gt; pid: 28
2023-08-22 05:46:27 DEBUG Selenium [:driver_service] polling for socket on ["127.0.0.1", 9515]
Starting ChromeDriver 116.0.5845.96 (1a391816688002153ef791ffe60d9e899a71a037-refs/branch-heads/5845@{#1382}) on port 9515
Only local connections are allowed.
Please see https://chromedriver.chromium.org/security-considerations for suggestions on keeping ChromeDriver safe.
[1692683187.222][SEVERE]: bind() failed: Address not available (99)
ChromeDriver was started successfully.
</code></pre>

<p>The “address not available (99)” error here is because ChromeDriver is trying to bind to <code>::1:9515</code>, but this Docker image is not setup with IPv6 support, so that will fail.</p>

<p>Finally, we’ll see some JSON requests to <code>POST session</code> going back and forth from <code>9515</code>, indicating ChromeDriver’s opening a Chrome window and that’s succeeding.</p>

<pre><code>DEBUG Selenium [:command] -&gt; POST session
DEBUG Selenium [:command]    &gt;&gt;&gt; http://127.0.0.1:9515/session | {"capabilities":{"alwaysMatch":{"browserName":"chrome","goog:chromeOptions":{"args":["--headless","--no-sandbox","--disable-dev-shm-usage","--disable-gpu"],"binary":"/home/app/.cache/selenium/chrome/linux64/116.0.5845.96/chrome"}}}}
</code></pre>]]></content><author><name></name></author><summary type="html"><![CDATA[This is a rehash of my Alpine Linux version of this post. I’ll skip the fluff here and jump straight to the good stuff.]]></summary></entry><entry><title type="html">Zoom’s return to the office</title>z
      <link href="http://localhost:4000/2023/08/zooms-return-to-the-office" rel="alternate" type="text/html" title="Zoom’s return to the office" /><published>2023-08-07T00:00:00+10:00</published><updated>2023-08-07T00:00:00+10:00</updated><id>http://localhost:4000/2023/08/zooms-return-to-the-office</id><content type="html" xml:base="http://localhost:4000/2023/08/zooms-return-to-the-office"><![CDATA[<p>This news <a href="https://nypost.com/2023/08/05/zoom-tells-employees-to-return-to-office-for-work/">about Zoom forcing their employees back into the office for 2 days a week</a> is just bonkers.</p>

<p>For an Australian perspective:</p>

<p>In Melbourne, 50 miles would mean people on Phillip Island and Geelong would need to commute into the city, a 2 hour commute one way. Geelong people could take the V/Line, thankfully. Phillip Islanders are shit out of luck and would have to drive in.</p>

<p>In Sydney, 50 miles would mean people in Wentworth Falls, San Remo and Wollongong would also be forced to commute 2 hours into the office as well. Katoomba residents thank your lucky stars, you’re just outside of the magic number.</p>

<p>Two hour commutes! “Give up 8 hours of your week <em>in traffic</em> in the name of <em>synergy</em>.” What baloney.</p>

<hr />

<p>I really enjoy the flexibility of working from home. I can put on a load of washinxtg over my lunch break or potter around in the garden when the sun’s out. I can take the dog for a walk or a run to the park. I can take some time out at around 3 and collect my daughter from school without having to commute first back to home and then out again to the school.</p>

<p>Environmentally: I can control the temperature in my office. There’s nobody walking around behind my monitor or talking loudly on their phone nearby. I have control over my desk and I can set it up however I like without some HR person mandating that I’m sharing it with someone due to space reasons.</p>

<p>And for all of these reasons, I’m a happy employee. I get my work done, and <em>more of it</em>, because I can choose the conditions in how that work is done. And if I need to <em>synergise</em> with another employee, why there’s Zoom for that.</p>]]></content><author><name></name></author><summary type="html"><![CDATA[This news about Zoom forcing their employees back into the office for 2 days a week is just bonkers.]]></summary></entry><entry><title type="html">How to fix: Chromedriver 115, cannot find chrome binary</title>z
      <link href="http://localhost:4000/2023/07/how-to-fix-chromedriver-115-cannot-find-chrome-binary" rel="alternate" type="text/html" title="How to fix: Chromedriver 115, cannot find chrome binary" /><published>2023-07-28T00:00:00+10:00</published><updated>2023-07-28T00:00:00+10:00</updated><id>http://localhost:4000/2023/07/how-to-fix-chromedriver-115-cannot-find-chrome-binary</id><content type="html" xml:base="http://localhost:4000/2023/07/how-to-fix-chromedriver-115-cannot-find-chrome-binary"><![CDATA[<p>Chromedriver v115 was released recently and causes this issue to appear on Macs that use Chromedriver for automated testing.</p>

<pre><code>unknown error: cannot find Chrome binary

Traceback (most recent call last):
       16: from 15  chromedriver                        0x0000000100df056c chromedriver + 4179308
       15: from 14  chromedriver                        0x0000000100df0414 chromedriver + 4178964
       14: from 13  chromedriver                        0x0000000100dacd1c chromedriver + 3902748
</code></pre>

<p>This is due to Chromedriver looking for a new binary called “Chrome for Testing”, which was <a href="https://developer.chrome.com/blog/chrome-for-testing/">recently released from the Chrome team</a>.</p>

<p>To fix this bug, you need to <a href="https://googlechromelabs.github.io/chrome-for-testing/#stable">download Chrome for Testing</a>, unzip it and move it into your <code>/Applications</code> directory.</p>

<p>Mac’s Gatekeeper program will not let you open this executable by default, as it came from a <code>.zip</code> file. To work around that problem, run:</p>

<pre><code>sudo xattr -cr '/Applications/Google Chrome for Testing.app'
</code></pre>

<p>This will remove the security restriction that is blocking this application from opening.</p>

<p>Run your test suite again, and it will now work.</p>]]></content><author><name></name></author><summary type="html"><![CDATA[Chromedriver v115 was released recently and causes this issue to appear on Macs that use Chromedriver for automated testing.]]></summary></entry><entry><title type="html">Rails 7, React, TypeScript, ESBuild and View Components</title>z
      <link href="http://localhost:4000/2023/06/rails-7-react-typescript-setup" rel="alternate" type="text/html" title="Rails 7, React, TypeScript, ESBuild and View Components" /><published>2023-06-01T00:00:00+10:00</published><updated>2023-06-01T00:00:00+10:00</updated><id>http://localhost:4000/2023/06/rails-7-react-typescript-setup</id><content type="html" xml:base="http://localhost:4000/2023/06/rails-7-react-typescript-setup"><![CDATA[<p>Here’s a short guide to setting up an existing Rails 7 application with React, TypeScript, ESBuild. One approach here would be to use the <code>react-rails</code> gem, but I would like to show you the individual steps to setting it up here instead.</p>

<h3 id="installing-esbuild">Installing ESBuild</h3>

<p>First you’ll want to install the <code>jsbundling-rails</code> gem:</p>

<pre><code>bundle add jsbundling-rails
</code></pre>

<p>Next, you’ll run the generator for this gem to setup ESBuild:</p>

<pre><code>bin/rails javascript:install:esbuild
</code></pre>

<p>This will create an <code>app/javascript/application.js</code> file that we will not need – so delete this file.</p>

<p>ESBuild will be setup to build assets in <code>app/javascript</code>, and put them into <code>app/assets/builds</code>. From there, Rails will be able to serve those assets.</p>

<p>This install script has added a new <code>build</code> script to <code>package.json</code>:</p>

<pre><code class="language-json">"scripts": {
  "build": "esbuild app/javascript/*.* --bundle --sourcemap --outdir=app/assets/builds --public-path=assets"
}
</code></pre>

<p>Once we’ve setup our React code we will be able to run this command to take that code and compile it into some JavaScript browsers can run.</p>

<p>I like to change this script to point at an <code>entrypoints</code> subdirectory:</p>

<pre><code class="language-json">"scripts": {
  "build": "esbuild app/javascript/entrypoints/*.* --bundle --sourcemap --outdir=app/assets/builds --public-path=assets"
}
</code></pre>

<p>This is so that I can put other directories inside <code>app/javascript</code>, such as directories including little helper functions, or bigger component structures like <code>app/javascript/Purchases/Table.tsx</code>.</p>

<p>It also means that ESBuild will not build <em>everything</em> in that directory – just the files we declare as entrypoints.</p>

<h3 id="installing-react--typescript">Installing React &amp; TypeScript</h3>

<p>To install React and TypeScript we’ll run this <code>yarn</code> command:</p>

<pre><code>yarn add react@^18.2 @react-dom@^18.2 @types/react @types/react-dom typescript
</code></pre>

<p>To configure TypeScript so that it supports React’s JSX templating, we’ll create a <code>tsconfig.json</code> file at the root of our Rails application with this content in it:</p>

<pre><code class="language-json">{
  "compilerOptions": {
    "module": "commonjs",
    "esModuleInterop": true,
    "forceConsistentCasingInFileNames": true,
    "strict": true,
    "skipLibCheck": true,
    "jsx": "react",
  }
}
</code></pre>

<p>To see some React code in action and to check out setup, we can create a new file at <code>app/javascript/entrypoints/application.tsx</code> and put this code into it:</p>

<pre><code class="language-tsx">import React from "react";
import ReactDOM from "react-dom/client";

const App = () =&gt; &lt;h1&gt;Hello from React!&lt;/h1&gt;;

const root = ReactDOM.createRoot(
  document.getElementById("root") as HTMLElement
);

root.render(&lt;App /&gt;);
</code></pre>

<p>After this, we can build our application’s assets by running:</p>

<pre><code>yarn build
</code></pre>

<p>This will show us that it has built these assets:</p>

<pre><code>yarn run v1.22.19
warning package.json: No license field
$ esbuild app/javascript/*.* --bundle --sourcemap --outdir=app/assets/builds --public-path=assets

  app/assets/builds/application.js      1.0mb ⚠️
  app/assets/builds/application.js.map  1.5mb
</code></pre>

<p>To test that it’s all working, we can generate a simple view:</p>

<pre><code>rails g controller home index
</code></pre>

<p>And into <code>app/views/home/index.html.erb</code> we can put a simple div with the ID of <code>root</code>. This is the element that our <code>ReactDOM.createRoot</code> code was targeting earlier:</p>

<pre><code class="language-html">&lt;div id='root'&gt;&lt;/div&gt;
</code></pre>

<p>When we start our Rails app with <code>bundle exec rails s</code> and go to http://localhost:3000/home/index, we’ll see our “Hello from React!” message.</p>

<p><img src="/images/css-bundling/react/hello.png" alt="Hello from React" /></p>

<p>This works “out of the box” because our application layout already brings in this compiled asset:</p>

<pre><code class="language-erb">&lt;%= javascript_include_tag "application", "data-turbo-track": "reload", defer: true %&gt;
</code></pre>

<h3 id="multiple-mount-points">Multiple mount points</h3>

<p>If you’re running a single-page app, you can probably stop reading here and continue throwing things into <code>&lt;App&gt;</code>.</p>

<p>If you’re wanting to go down a different route, then keep reading. That different route is multiple individual components, where you may wish to mount a component on a per-page basis, than one component for the whole app.</p>

<p>To do this, we can create a file at <code>app/javascript/mount.tsx</code>:</p>

<pre><code class="language-tsx">import React from "react";
import ReactDOM from "react-dom/client";

type Components = Record&lt;string, React.ElementType&gt;;

export default function mount(components: Components): void {
  document.addEventListener("DOMContentLoaded", () =&gt; {
    const mountPoints = document.querySelectorAll("[data-react-component]");
    mountPoints.forEach((mountPoint) =&gt; {
      const { dataset } = mountPoint as HTMLElement;
      const componentName = dataset.reactComponent;
      if (componentName) {
        const Component = components[componentName];
        if (Component) {
          const props = JSON.parse(dataset.props as string);
          const root = ReactDOM.createRoot(mountPoint);
          root.render(&lt;Component {...props} /&gt;);
        } else {
          console.warn(
            "WARNING: No component found for: ",
            dataset.reactComponent,
            components
          );
        }
      }
    });
  });
}
</code></pre>

<p>This code attempts to find all elements that contain a <code>data-react-component</code> attribute, and then to mount components matching that name onto the page in those locations. This code also parses any props contained in a <code>data-props</code> attribute and passes those along to the component too.</p>

<p>In practical terms, a page containing:</p>

<pre><code class="language-html">&lt;div data-react-component='App' data-props="{}"&gt;&lt;/div&gt;
</code></pre>

<p>Would have a component called <code>App</code> mounted into the location of that div tag. This then allows us to intermix React components with our Rails application, which can be particularly helpful if we have an older Rails app that we’re enhancing with some newer React components.</p>

<p>To see this in action, let’s use this new <code>mount</code> function over in <code>application.tsx</code> by replacing the code in that file with this code:</p>

<pre><code>import React from "react";
import mount from "./mount";

const App = () =&gt; &lt;h1&gt;Hello from React!&lt;/h1&gt;;

mount({
  App,
});
</code></pre>

<p>And also the code in <code>app/views/home/index.html.erb</code> with this code:</p>

<pre><code class="language-html">&lt;div data-react-component='App' data-props="{}"&gt;&lt;/div&gt;
</code></pre>

<p>We can then run <code>yarn build</code> to rebuild our assets, and then refresh our browser to see the same message as before.</p>

<h3 id="view-components">View Components</h3>

<p>Writing this lengthy HTML into our views every time we want to render a React component will get tiresome quickly. To save us repeating ourselves again and again, we’re going to use a gem called <code>view_component</code>. We can install this gem with:</p>

<pre><code>bundle add view_component
</code></pre>

<p>We can then create a new component class using this gem, placing it into <code>app/components/react_component.rb</code>:</p>

<pre><code class="language-ruby"># frozen_string_literal: true

class ReactComponent &lt; ViewComponent::Base
  attr_reader :component, :raw_props

  def initialize(component, raw_props: {})
    @component = component
    @raw_props = raw_props
  end

  def call
    helpers.tag.div(
      '',
      data: {
        react_component: component,
        props: props
      }
    )
  end

  private

  def props
    raw_props
  end
end

</code></pre>

<p>This class is then going to place that <code>div</code> tag onto our page for us. This class will serve as a base class for any other component classes we define in our app. Those subclasses of <code>ReactComponent</code> can override <code>props</code> if they need to do work to prepare the props before they’re passed through to the component.</p>

<p>Then we can use this component to render React components within our application. Let’s change the code in <code>app/views/home/index.html.erb</code> to render the <code>App</code> component by using this component class:</p>

<pre><code class="language-erb">&lt;%= render ReactComponent.new("App") %&gt;
</code></pre>

<p>We can use the view component just like a partial. I’ll get to why we’re <em>not</em> using partials in a moment. It deserves its own section!</p>

<p>We will need to restart the Rails server at this point so that it picks up the file in <code>app/components</code>. After restarting the server, and refreshing the browser, we’ll once again see our React component’s output.</p>

<h3 id="why-view-components-over-partials">Why view components over partials</h3>

<p>Why did we complicate things by bringing in a new gem rather than using the wonderful partial features Rails provides?</p>

<p>The simple answer is: Ruby code belongs in Ruby files. And I don’t just mean calls to <code>tag.div</code>. I mean if you had any sort of Ruby code that needed to run before rendering this component, you could now put that code into the component class.</p>

<p>As an example here, let’s create a new React component called <code>Product</code>. It will render a name and a price. We’ll put this component at <code>app/javascript/Product/index.tsx</code>:</p>

<pre><code class="language-tsx">import React from "react";

const Product = ({ name, price }: { name: string; price: string }) =&gt; {
  return (
    &lt;&gt;
      &lt;h1&gt;
        {name} - {price}
      &lt;/h1&gt;
    &lt;/&gt;
  );
};

export default Product;
</code></pre>

<p>We can then tell our application to mount this component whenever it sees a <code>div[data-react-component=Product]</code> tag, by using the <code>mount</code> helper in <code>app/javascript/entrypoints/application.tsx</code>:</p>

<pre><code>import React from "react";
import mount from "../mount";
import Product from "../Product";

const App = () =&gt; &lt;h1&gt;Hello from React!&lt;/h1&gt;;

mount({
  App,
  Product,
});
</code></pre>

<p>As we’ve now changed <code>application.tsx</code>, we will need to rebuild it with <code>yarn build</code> again. Now is a good time to say we could’ve been running <code>yarn build --watch</code> this whole time… but I preferred being explicit about when things were being rebuilt and why. Now you know the secret.</p>

<p>To render this React component, we’ll create a new Ruby file to represent the Ruby-side of this component. We’ll put this component into <code>app/components/products/show_component.rb</code>:</p>

<pre><code class="language-ruby">module Products
  class ShowComponent &lt; ReactComponent
    def initialize(raw_props)
      super("Product", raw_props: raw_props)
    end

    def props
      raw_props.merge(
        price: helpers.number_to_currency(raw_props[:price])
      )
    end
  end
end
</code></pre>

<p>This component file inherits from our <code>ReactComponent</code> component class and will render that component. To use this Ruby component class, we can go back into <code>app/views/home/index.html.erb</code> and put this code there:</p>

<pre><code class="language-erb">&lt;%= render Products::ShowComponent.new(name: "Shoes", price: 100) %&gt;
</code></pre>

<p>Using this component will mean that we will end up with this <code>div</code> tag on the page:</p>

<pre><code class="language-html">&lt;div data-react-component="Product" data-props="{&amp;quot;name&amp;quot;:&amp;quot;Shoes&amp;quot;,&amp;quot;price&amp;quot;:100}"&gt;&lt;/div&gt;
</code></pre>

<p>Our <code>mount.tsx</code> code will see that <code>div</code> tag and mount the <code>Product</code> React component into that place, passing through the props.</p>

<p>Now, the reason for this whole section: <strong>we use view components over partials because Ruby code belongs in Ruby files</strong>.</p>

<p>As a quick example of this, if we want to format the price before it goes to the component, we can update our <code>ShowComponent</code> code to process those props:</p>

<pre><code class="language-ruby">module Products
  class ShowComponent &lt; ReactComponent
    def initialize(raw_props)
      super("Product", raw_props: raw_props)
    end

    def props
      raw_props.merge(
        price: helpers.number_to_currency(raw_props[:price])
      )
    end
  end
end
</code></pre>

<p>Here we’re calling a Ruby method in Ruby code in order to format the price. We’re not limited to just methods from <code>helpers</code> here – we could call any Ruby code that we wanted to. This is, in my opinion, better than interspersing Ruby and HTML code into the same file.</p>

<p>What this also means is that we could pass a product through to our component from the <code>app/views/home/index.html.erb</code>, rather than passing attributes one-by-one:</p>

<pre><code class="language-erb">&lt;%= render Products::ShowComponent.new(product: @product) %&gt;
</code></pre>

<p>(I’m making an assumption here about having a <code>@product</code> object set up in the controller – use your imagination!)</p>

<p>And then in that component class, we can take the raw props of the product object itself and do our formatting of the price:</p>

<pre><code class="language-ruby">module Products
  class ShowComponent &lt; ReactComponent
    def initialize(product)
      super("Product", raw_props: product)
    end

    def props
      {
        name: product.name,
        price: helpers.number_to_currency(product.price)
      }
    end
  end
end
</code></pre>

<p>The View Component class finally gives our Ruby view code a proper home to live: in a Ruby file, NOT a HTML file!</p>]]></content><author><name></name></author><summary type="html"><![CDATA[Here’s a short guide to setting up an existing Rails 7 application with React, TypeScript, ESBuild. One approach here would be to use the react-rails gem, but I would like to show you the individual steps to setting it up here instead.]]></summary></entry><entry><title type="html">Rails 7, Bootstrap CSS + JavaScript with ESBuild</title>z
      <link href="http://localhost:4000/2023/04/rails-7-bootstrap-css-javascript-with-esbuild" rel="alternate" type="text/html" title="Rails 7, Bootstrap CSS + JavaScript with ESBuild" /><published>2023-04-24T00:00:00+10:00</published><updated>2023-04-24T00:00:00+10:00</updated><id>http://localhost:4000/2023/04/rails-7-bootstrap-css-javascript-with-esbuild</id><content type="html" xml:base="http://localhost:4000/2023/04/rails-7-bootstrap-css-javascript-with-esbuild"><![CDATA[<p>Here’s a short guide to setting up an existing Rails 7 application with Bootstrap, using ESBuild to build both the JavaScript and CSS files for Bootstrap.</p>

<p>First you’ll want to install the <code>jsbundling-rails</code> gem:</p>

<pre><code>bundle add jsbundling-rails
</code></pre>

<p>Next, you’ll run the generator for this gem to setup ESBuild:</p>

<pre><code>bin/rails javascript:install:esbuild
</code></pre>

<p>ESBuild will be setup to build assets in <code>app/javascript</code>, and put them into <code>app/assets/builds</code>. From there, Rails will be able to serve those assets.</p>

<p>To setup Bootstrap itself, we’ll add Bootstrap and its dependencies, PopperJS and jQuery:</p>

<pre><code>yarn add bootstrap @popperjs/core jquery
</code></pre>

<p>To use these dependencies, we will need to import them into our application’s build entrypoint file, which is located at <code>app/javascript/application.js</code>. The lines that we need to add to this file to get Bootstrap loaded are:</p>

<pre><code class="language-js">import "bootstrap";
import "bootstrap/dist/css/bootstrap.min.css";
</code></pre>

<p>After this, we can build our application’s assets by running:</p>

<pre><code>yarn build
</code></pre>

<p>This will show us that it has built these assets:</p>

<pre><code>yarn run v1.22.19
$ esbuild app/javascript/*.* --bundle --sourcemap --outdir=app/assets/builds --public-path=assets

  app/assets/builds/application.css      229.9kb
  app/assets/builds/application.js       186.9kb
  app/assets/builds/application.css.map  479.0kb
  app/assets/builds/application.js.map   356.7kb
</code></pre>

<p>ESBuild is smart enough here to know that we’re bringing in a CSS asset in our JS file, and due to that it will generate <em>both</em> a JS and a CSS file as assets. In addition to this, sourcemaps have been generated for both the CSS and JS files too.</p>

<p>To test that it’s all working, we can generate a simple view:</p>

<pre><code>rails g controller home index
</code></pre>

<p>And into <code>app/views/home/index.html.erb</code> we can put this HTML that I’ve “borrowed” from Bootstrap’s own example:</p>

<pre><code class="language-html">&lt;div class="modal fade" id="exampleModalXl" tabindex="-1" aria-labelledby="exampleModalXlLabel" style="display: none;" aria-hidden="true"&gt;
  &lt;div class="modal-dialog modal-xl"&gt;
    &lt;div class="modal-content"&gt;
      &lt;div class="modal-header"&gt;
        &lt;h1 class="modal-title fs-4" id="exampleModalXlLabel"&gt;Extra large modal&lt;/h1&gt;
        &lt;button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"&gt;&lt;/button&gt;
      &lt;/div&gt;
      &lt;div class="modal-body"&gt;
        ...
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/div&gt;
&lt;/div&gt;


&lt;button type="button" class="btn btn-primary" data-bs-toggle="modal" data-bs-target="#exampleModalXl"&gt;Extra large modal&lt;/button&gt;
</code></pre>

<p>When we start our Rails app with <code>bundle exec rails s</code> and go to http://localhost:3000/home/index, we’ll see a blue button. When we click the blue button, the modal will appear:</p>

<p><img src="/images/css-bundling/bootstrap/modal.png" alt="Modal" /></p>]]></content><author><name></name></author><summary type="html"><![CDATA[Here’s a short guide to setting up an existing Rails 7 application with Bootstrap, using ESBuild to build both the JavaScript and CSS files for Bootstrap.]]></summary></entry><entry><title type="html">Open Letter to the Rails Foundation</title>z
      <link href="http://localhost:4000/2023/03/open-letter-to-the-rails-foundation" rel="alternate" type="text/html" title="Open Letter to the Rails Foundation" /><published>2023-03-09T00:00:00+11:00</published><updated>2023-03-09T00:00:00+11:00</updated><id>http://localhost:4000/2023/03/open-letter-to-the-rails-foundation</id><content type="html" xml:base="http://localhost:4000/2023/03/open-letter-to-the-rails-foundation"><![CDATA[<p>I sent this email to Amanda at the <a href="https://rubyonrails.org/foundation">Rails Foundation</a> this morning.</p>

<hr />

<p>Hello, my name is Ryan and I run the Gem Foundation: https://ryanbigg.com/2022/11/the-gem-foundation.</p>

<p>(Just quietly between you and me, id rather you answer this email than David. We’ve got… history.)</p>

<p>I’ve also written several books on Ruby, including the same Rails book 3, almost 4 times: Rails 3 in Action, Rails 4 in Action and Active Rails 1st and 2nd editions. Oh and I wrote a bunch of the Rails guides too. And contributed enough on Rails answers on Stack Overflow to earn me 100k rep, as well as a cool SO T-shirt and socks. I also took over the #rubyonrails IRC channel there for a time.</p>

<p>Point is: I have written multiple of millions of words about Rails to further its adoption.</p>

<p>As we approach the 4 month mark of the Rails Foundation launch, I am absolutely STUNNED that there has been not a single cent that has left the organisation’s coffers since its inception.</p>

<p>The announcement was grandiose in nature. A fat sack of cash for those who do unpaid labour for Rails. Sounds delightful. I like money for the way it buys hot chocolates for my daughter who then proceeds to wear them more than drink them, amongst other things.</p>

<p>Why hasn’t the Rails Foundation donated money to Rails Girls? Why haven’t they incentivised mentoring through FirstRubyFriend for Rails-focussed mentoring? Current and past guide authors: do they get funding? Rails gem authors or those gems that Rails depends on outside of its immediate vicinity? (Oh I maintain i18n as well btw, and GitHub recently sent me an award for that.)</p>

<p>You want to further adoption of Rails. So do I. I love most parts of Rails. I say most parts because after 15 years with a thing you start being really good at seeing the warts. Overall, it’s a framework that’s provided me with a stable income (and some tiny level of notoriety) over the last 15 years.</p>

<p>The framework and its related resources are a monumental achievement of open source collaboration.</p>

<p>So my question today is when will the Rails
foundation start funding these projects? Are we going to be waiting weeks, or months?</p>

<p>I don’t send this email with cap-in-hand expecting money — I’m already paid the Bigg Bucks through my work with Rails and my books.</p>

<p>What I’d like to see is the Rails Foundation actually putting their money where their mouth is and helping grow this wonderful community of ours, and helping it thrive for another 15 years.</p>]]></content><author><name></name></author><summary type="html"><![CDATA[I sent this email to Amanda at the Rails Foundation this morning.]]></summary></entry></feed>