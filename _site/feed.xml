<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.2.2">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2023-01-28T14:32:23+11:00</updated><id>http://localhost:4000/feed.xml</id><entry><title type="html">Are the switches on a Kinesis Gaming Freestyle Edge RGB Keyboard hot-swappable?</title><link href="http://localhost:4000/2023/01/are-the-switches-on-a-kinesis-gaming-freestyle-edge-rgb-keyboard-hot-swappable" rel="alternate" type="text/html" title="Are the switches on a Kinesis Gaming Freestyle Edge RGB Keyboard hot-swappable?" /><published>2023-01-28T00:00:00+11:00</published><updated>2023-01-28T00:00:00+11:00</updated><id>http://localhost:4000/2023/01/are-the-switches-on-a-kinesis-gaming-freestyle-edge-rgb-keyboard-hot-swappable</id><content type="html" xml:base="http://localhost:4000/2023/01/are-the-switches-on-a-kinesis-gaming-freestyle-edge-rgb-keyboard-hot-swappable">&lt;p&gt;No.&lt;/p&gt;

&lt;p&gt;The switches on this keyboard are not hot-swappable. They are soldered on to the board.&lt;/p&gt;

&lt;p&gt;(This post brought to you by attempting to find this information online, failing at that, and then dissecting the keyboard to inspect it myself.)&lt;/p&gt;</content><author><name></name></author><summary type="html">No.</summary></entry><entry><title type="html">Ruby GraphQL field notes</title><link href="http://localhost:4000/2023/01/ruby-graphql-field-notes" rel="alternate" type="text/html" title="Ruby GraphQL field notes" /><published>2023-01-24T00:00:00+11:00</published><updated>2023-01-24T00:00:00+11:00</updated><id>http://localhost:4000/2023/01/ruby-graphql-field-notes</id><content type="html" xml:base="http://localhost:4000/2023/01/ruby-graphql-field-notes">&lt;p&gt;Here’s a series of my notes of working within a GraphQL application as I can think of them. This comes out of my work on &lt;a href=&quot;https://github.com/radar/twist-v2/blob/master/backend/lib/twist/web/graphql/schema.rb&quot;&gt;Twist’s GraphQL API&lt;/a&gt;, and other GraphQL APIs that are deployed in production.&lt;/p&gt;

&lt;p&gt;Overall sentiment is that GraphQL is an improvement over the classic REST approach because:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;It gives you clear types of fields&lt;/li&gt;
  &lt;li&gt;You can choose which fields you wish to select&lt;/li&gt;
  &lt;li&gt;You can choose to select from a single resource, or from multiple, disparate resources at the same time.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;I like its interoperability between Ruby and JavaScript, with good tooling existing on both sides of that divide in the &lt;a href=&quot;https://rubygems.org/gems/graphql&quot;&gt;GraphQL Rubygem&lt;/a&gt; and the &lt;a href=&quot;https://www.apollographql.com/docs/react/get-started/&quot;&gt;Apollo Client&lt;/a&gt; on the JavaScript side of things. Honorable mention to the &lt;a href=&quot;https://the-guild.dev/graphql/codegen&quot;&gt;GraphQL codegen&lt;/a&gt; library too, which provides the ability of generating TypeScript types from a GraphQL schema.&lt;/p&gt;

&lt;h2 id=&quot;schema-definition&quot;&gt;Schema definition&lt;/h2&gt;

&lt;p&gt;A schema can be defined in &lt;code&gt;app/graphql&lt;/code&gt; in a Rails application (since its &lt;em&gt;application&lt;/em&gt; code), or a directory of your choosing in any other Ruby project.&lt;/p&gt;

&lt;p&gt;I’d recommend disabling the introspection endpoints here so that 3rd parties cannot find out that your API contains particular admin-only endpoints. I’d also recommend setting up a &lt;code&gt;max_complexity&lt;/code&gt; and a &lt;code&gt;max_depth&lt;/code&gt; value. This prevents API requests from recursively requesting data (think post -&amp;gt; comments -&amp;gt; post -&amp;gt; …), and from also building queries that might rate as “highly complex” database operations. You can read more about &lt;a href=&quot;https://graphql-ruby.org/queries/complexity_and_depth&quot;&gt;complexity and depth here&lt;/a&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-ruby&quot;&gt;class AppSchema &amp;lt; GraphQL::Schema
  mutation(Types::MutationType)
  query(Types::QueryType)
  disable_introspection_entry_points unless Rails.env.development?

  max_complexity 200
  max_depth 20
end
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&quot;schema-dumping-from-ruby&quot;&gt;Schema dumping from Ruby&lt;/h2&gt;

&lt;p&gt;On that topic, the Ruby library provides the ability to dump the schema out with a custom Rake task (that I’ve put in &lt;code&gt;lib/tasks/graphql.rake&lt;/code&gt;)&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-ruby&quot;&gt;require &quot;graphql/rake_task&quot;

GraphQL::RakeTask.new(
  schema_name: &quot;AppSchema&quot;,
  directory: &quot;./app/javascript/graphql&quot;,
  dependencies: [:environment]
)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Running this Rake task:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;bundle exec rake graphql:schema:dump
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Will generate two files, a &lt;code&gt;schema.json&lt;/code&gt; and a &lt;code&gt;schema.graphql&lt;/code&gt;, which are both representations of the &lt;em&gt;shape&lt;/em&gt; of the GraphQL API. Different tools (such as GraphQL codegen) can then use this schema to work with the GraphQL API.&lt;/p&gt;

&lt;h2 id=&quot;queries-and-resolvers&quot;&gt;Queries and Resolvers&lt;/h2&gt;

&lt;p&gt;The GraphQL Ruby library &lt;a href=&quot;https://graphql-ruby.org/fields/introduction.html&quot;&gt;recommends&lt;/a&gt; defining the fields and their resolvers within the same class:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-ruby&quot;&gt;module Twist
  module Web
    module GraphQL
      class QueryType &amp;lt; ::GraphQL::Schema::Object
        field :books, [Types::Book], null: false

        def books
          ...
        end
      end
    end
  end
end
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I feel like this gets messy particularly quickly if your types have a large (&amp;gt; 5) amount of fields.&lt;/p&gt;

&lt;p&gt;For top level fields like this, I would recommend defining separate resolver classes:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-ruby&quot;&gt;field :books, [Types::Book], null: false, resolver: Resolvers::Books
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&quot;language-ruby&quot;&gt;module Twist
  module Web
    module GraphQL
      module Resolvers
        class Books &amp;lt; Resolver
          def resolve
            ...
          end
        end
      end
    end
  end
end
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This allows for you to have potentially complex logic for resolution separate from the field definitions, allowing you to read &lt;em&gt;what&lt;/em&gt; fields are defined by looking at the type, rather than reading &lt;em&gt;what&lt;/em&gt; the fields are and &lt;em&gt;how&lt;/em&gt; they’re also implemented.&lt;/p&gt;

&lt;p&gt;If we had a resolver for a book chapter, then I’d put that class under &lt;code&gt;Resolvers::Books::Chapters&lt;/code&gt; to indicate that it’s not resolving &lt;em&gt;all&lt;/em&gt; chapters, but rather chapters for a particular book.&lt;/p&gt;

&lt;h2 id=&quot;mutations&quot;&gt;Mutations&lt;/h2&gt;

&lt;p&gt;Along similar lines to queries and resolvers, I also suggest using separate classes for mutations, namespacing them down the lines of the particular &lt;em&gt;context&lt;/em&gt; of the application (&lt;code&gt;Mutations::Users::Login&lt;/code&gt;), or at least along the lines of the resource thats undergoing mutation:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-ruby&quot;&gt;field :add_comment, mutation: Mutations::Comments::Add
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&quot;union-types&quot;&gt;Union types&lt;/h2&gt;

&lt;p&gt;Occassionally, it can be helpful to return one or another type from a GraphQL query or a mutation. For this, GraphQL has &lt;em&gt;union types&lt;/em&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-ruby&quot;&gt;module Twist
  module Web
    module GraphQL
      module Types
        class BookPermissionCheckResult &amp;lt; BaseUnion
          description &quot;The result from attempting a login&quot;
          possible_types Types::Book, Types::PermissionDenied

          def self.resolve_type(object, _context)
            if object.is_a?(Twist::Entities::Book)
              Types::Book
            else
              Types::PermissionDenied
            end
          end
        end
      end
    end
  end
end
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This type is used in the &lt;code&gt;book&lt;/code&gt; field:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-ruby&quot;&gt;field :book, Types::BookPermissionCheckResult, null: false, resolver: Resolvers::Book
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If the resolver returns a &lt;code&gt;Twist::Entities::Book&lt;/code&gt; instance, then this union type will use the GraphQL class &lt;code&gt;Types::Book&lt;/code&gt; to resolve this field. Otherwise, it uses &lt;code&gt;Types::PermissionDenied&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;In the client-side GraphQL query, utilising these union types looks like this:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-gql&quot;&gt;query {
  book(permalink: &quot;exploding-rails&quot;) {
    __typename
    ... on Book {
      id
      title
      defaultBranch {
        name
        chapters(part: FRONTMATTER) {
          ...chapterFields
        }
      }
    }

    ... on PermissionDenied {
      error
    }
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The query uses the GraphQL &lt;code&gt;__typename&lt;/code&gt; to return the type of the &lt;code&gt;book&lt;/code&gt; field. We can then read this type on the client side to determine how to act (to show a book, or not). The fields selected within both branches of this union allow us to display information about a book if the query has gone through successfully, without having to first check for permission, and then querying for a book.&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;resolve_type&lt;/code&gt; method from union classes can also return an &lt;em&gt;array&lt;/em&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-ruby&quot;&gt;def self.resolve_type(object, _context)
  if object.success?
    [Types::BookType, object.success]
  else
    [Types::PermissionDenied, object.failure]
  end
end
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This is helpful if we wish to do something with the object being resolved. In this case, we’re unwrapping that &lt;code&gt;object&lt;/code&gt; from a &lt;code&gt;Dry::Result&lt;/code&gt; wrapping. If we did not do this unwrapping, then the &lt;code&gt;BookType&lt;/code&gt; type would not be able to work on the object it receives, as the wrapped &lt;code&gt;Dry::Result&lt;/code&gt; object does not have the &lt;code&gt;title&lt;/code&gt; that &lt;code&gt;Types::Book&lt;/code&gt; would expect that object to have.&lt;/p&gt;

&lt;h2 id=&quot;authentication&quot;&gt;Authentication&lt;/h2&gt;

&lt;p&gt;To authenticate against the GraphQL API, I’d recommend supporting sessions as well as authentication by tokens. While requests may come into the application from the same domain, they also may not. Allowing that flexibility of your API to be queryable by a 3rd party from the outset (assuming they have the right token!) can only be a good thing. It will also allow you to make requests from within tests by providing a token.&lt;/p&gt;

&lt;p&gt;You can do this with something like the following code:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-ruby&quot;&gt;  def current_user

    @current_user = super
    @current_user ||= User.authenticate_by_token(request.authorization)
  end
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&quot;testing&quot;&gt;Testing&lt;/h2&gt;

&lt;p&gt;To test the GraphQL endpoints, I would recommend request specs over testing the schema itself by calling &lt;code&gt;Schema.execute(...)&lt;/code&gt;. This ensures that you can run tests against your API as close to how it will be used as possible.&lt;/p&gt;

&lt;p&gt;To aid in this, I like adding a &lt;code&gt;GraphqlHelpers&lt;/code&gt; module with a little helper:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-ruby&quot;&gt;  def graphql_request(query:, variables: {})
    post &quot;/graphql&quot;,
      params: {
        query: query,
        variables: variables,
      }.to_json,
      headers: { Authorization: user.token, &apos;Content-Type&apos;: &quot;application/json&quot; }
  end
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You can then use this in a test:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-ruby&quot;&gt;query = %|
  query {
    book(permalink: &quot;exploding-rails&quot;) {
      title
    }
  }
|

json = graphql_request(query: query)
expect(json.dig(&quot;book&quot;, &quot;title&quot;)).to eq(&quot;Exploding Rails&quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&quot;preventing-n1-queries&quot;&gt;Preventing N+1 queries&lt;/h2&gt;

&lt;p&gt;By default, GraphQL Ruby will perform N+1 queries if you write a query such as:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;query {
  users {
    books {
      chapters
    }
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This will make one query for all the users, N queries for all of those users’ books, and M queries for all of those users’ books’ chapters.&lt;/p&gt;

&lt;p&gt;To prevent N+1 queries, I’d recommend relying on the &lt;code&gt;GraphQL::Dataloader&lt;/code&gt; features &lt;a href=&quot;https://graphql-ruby.org/dataloader/overview.html&quot;&gt;shown here&lt;/a&gt;. This will collect all the IDs for the relevant resources, and then perform one large fetch for each of the users, each of the users’ books, and each of the users’ books’ chapters, resulting in only 3 queries.&lt;/p&gt;</content><author><name></name></author><summary type="html">Here’s a series of my notes of working within a GraphQL application as I can think of them. This comes out of my work on Twist’s GraphQL API, and other GraphQL APIs that are deployed in production.</summary></entry><entry><title type="html">The method method</title><link href="http://localhost:4000/2023/01/the-method-method" rel="alternate" type="text/html" title="The method method" /><published>2023-01-20T00:00:00+11:00</published><updated>2023-01-20T00:00:00+11:00</updated><id>http://localhost:4000/2023/01/the-method-method</id><content type="html" xml:base="http://localhost:4000/2023/01/the-method-method">&lt;p&gt;The &lt;code&gt;method&lt;/code&gt; method in Ruby is one of my favourite methods in Ruby. It gives you an object that represents an underlying method. It’s helpful for demonstrating that integer addition in Ruby is a method call:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;1.method(:+)
=&amp;gt; #&amp;lt;Method: Integer#+(_)&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&quot;where-is-this-method-defined&quot;&gt;Where is this method defined?&lt;/h2&gt;

&lt;p&gt;With this method &lt;code&gt;method&lt;/code&gt;, you can find out where a method is defined, if it is defined in Ruby code anywhere:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;SomeModel.method(:find).source_location
=&amp;gt; [&quot;...activerecord-x.x.x/lib/active_record/core.rb&quot;, 337]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Then I can look at this source code within the Active Record gem to &lt;em&gt;find out&lt;/em&gt; how &lt;code&gt;find&lt;/code&gt; works.&lt;/p&gt;

&lt;h2 id=&quot;call-me-maybe&quot;&gt;Call me, maybe?&lt;/h2&gt;

&lt;p&gt;Methods can also be passed in place of traditional block arguments:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;class Maths
  def self.square(num)
    num ** 2
  end
end

square = Maths.method(:square)

[1, 2, 3, 4].map(&amp;amp;square)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The &lt;code&gt;map&lt;/code&gt; syntax here is short-hand for:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;[1, 2, 3, 4].map { |number| square.call(number) }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Which is exactly the same behaviour that a &lt;code&gt;Proc&lt;/code&gt; has:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;a_proc = -&amp;gt; (num) { num ** 2 }
[1, 2, 3, 4].map(&amp;amp;square)
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&quot;more-documentation&quot;&gt;More documentation&lt;/h2&gt;

&lt;p&gt;You can find more about the &lt;a href=&quot;https://devdocs.io/ruby~3.1/method&quot;&gt;Method class&lt;/a&gt; here. You can even find out why this code returns &lt;code&gt;true&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;def moo(arg) arg == 3; end

number = 3
case number
when method(:moo)
  true
else
  false
end
&lt;/code&gt;&lt;/pre&gt;</content><author><name></name></author><summary type="html">The method method in Ruby is one of my favourite methods in Ruby. It gives you an object that represents an underlying method. It’s helpful for demonstrating that integer addition in Ruby is a method call:</summary></entry><entry><title type="html">CSS :has selector for selects that have options</title><link href="http://localhost:4000/2022/12/using-a-css-has-selector-to-target-selects-that-have-selected-options" rel="alternate" type="text/html" title="CSS :has selector for selects that have options" /><published>2022-12-02T00:00:00+11:00</published><updated>2022-12-02T00:00:00+11:00</updated><id>http://localhost:4000/2022/12/using-a-css-has-selector-to-target-selects-that-have-selected-options</id><content type="html" xml:base="http://localhost:4000/2022/12/using-a-css-has-selector-to-target-selects-that-have-selected-options">&lt;p&gt;Based on a question on the Ruby AU Slack, someone wanted to know how they could make a 2nd select box appear after an option in an original select box was selected.&lt;/p&gt;

&lt;p&gt;I worked out today that thanks to the new &lt;code&gt;:has&lt;/code&gt; selector in CSS, you can achieve this:&lt;/p&gt;

&lt;div class=&quot;mb-4&quot;&gt;
&lt;p class=&quot;codepen&quot; data-height=&quot;300&quot; data-default-tab=&quot;html,result&quot; data-slug-hash=&quot;bGKmaRz&quot; data-user=&quot;ryanbigg&quot; style=&quot;height: 300px; box-sizing: border-box; display: flex; align-items: center; justify-content: center; border: 2px solid; margin: 1em 0; padding: 1em;&quot;&gt;
  &lt;span&gt;See the Pen &lt;a href=&quot;https://codepen.io/ryanbigg/pen/bGKmaRz&quot;&gt;
  Untitled&lt;/a&gt; by Ryan Bigg (&lt;a href=&quot;https://codepen.io/ryanbigg&quot;&gt;@ryanbigg&lt;/a&gt;)
  on &lt;a href=&quot;https://codepen.io&quot;&gt;CodePen&lt;/a&gt;.&lt;/span&gt;
&lt;/p&gt;
&lt;/div&gt;
&lt;script async=&quot;&quot; src=&quot;https://cpwebassets.codepen.io/assets/embed/ei.js&quot;&gt;&lt;/script&gt;

&lt;p&gt;&lt;strong&gt;This demo will work in most modern browsers, with the exception of Internet Explorer 11 and Firefox.&lt;/strong&gt; Selecting from the 1st select box will make the 2nd one appear, then selecting from that makes the 3rd box appear.&lt;/p&gt;

&lt;p&gt;Given that this feature is &lt;em&gt;currently&lt;/em&gt; not supported in either IE11 (at all) or Firefox (without enabling a configuration flag), I would be hesitant to use it in production.&lt;/p&gt;

&lt;p&gt;Nevertheless, it’s pretty cool to see that CSS can do this and we do not have to reach for JavaScript.&lt;/p&gt;</content><author><name></name></author><summary type="html">Based on a question on the Ruby AU Slack, someone wanted to know how they could make a 2nd select box appear after an option in an original select box was selected.</summary></entry><entry><title type="html">Hanami 2.0 Thoughts</title><link href="http://localhost:4000/2022/11/hanami-20-thoughts" rel="alternate" type="text/html" title="Hanami 2.0 Thoughts" /><published>2022-11-28T00:00:00+11:00</published><updated>2022-11-28T00:00:00+11:00</updated><id>http://localhost:4000/2022/11/hanami-20-thoughts</id><content type="html" xml:base="http://localhost:4000/2022/11/hanami-20-thoughts">&lt;p&gt;&lt;a href=&quot;https://ryanbigg.com/2018/03/my-thoughts-on-hanami&quot;&gt;I’ve been a fan of Hanami&lt;/a&gt; for a number of years now. One of my favourite apps to work on is &lt;a href=&quot;https://github.com/radar/twist-v2&quot;&gt;even an open-source Hanami app!&lt;/a&gt; I have also been writing &lt;a href=&quot;https://github.com/radar/chirper&quot;&gt;an ActivityPub app called “Chirper”&lt;/a&gt; in Hanami.&lt;/p&gt;

&lt;p&gt;Now that Hanami 2.0 has come out, a few people have been asking me for my thoughts on this major Hanami release.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;The headline is: it’s really, really fast. It’s really clean. And it’s really good if you’re building an API at the moment.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;It’s currently missing opinions/support on a view layer (so no templating) and DB persistence (although the Getting Started guide does recommend a way to set it up). Hanami 2.1 is supposed to come out (in early 2023) with proper baked-in support for both of those things.&lt;/p&gt;

&lt;p&gt;When working on Chirper, I haven’t missed view templates as the application is all APIs. And I didn’t mind that there wasn’t a built-in configuration for databases, as the Getting Started guide for Hanami provided everything I needed there. It was refreshing to be able to “choose my own adventure” in that way, allowing me to opt for even something such as &lt;a href=&quot;https://rubygems.org/gems/sequel&quot;&gt;Sequel&lt;/a&gt; if I chose to.&lt;/p&gt;

&lt;p&gt;I like that Hanami hasn’t got an opinion du jour on JavaScript and CSS assets, like Rails had with Sprockets, Webpacker, etc. It leaves that particular responsibility up to the build tools that are great at that, such as ESBuild.&lt;/p&gt;

&lt;p&gt;I love that the actions are clearly separated out into their own classes, rather than all being bundled into a single class. I love that you can &lt;a href=&quot;https://github.com/radar/chirper/blob/40c4c532449deedbfaaac61dd2914fde7728cd97/app/actions/api/accounts/outbox.rb#L12-L17&quot;&gt;specify the types of parameters&lt;/a&gt; that an action receives.&lt;/p&gt;

&lt;p&gt;I really enjoy the dependency injection support that &lt;a href=&quot;https://github.com/radar/chirper/blob/81504258fbe74e3269c4f7ab013d6f0009b38cb6/spec/activity_pub/processors/create_spec.rb#L3-L7&quot;&gt;allows me to test parts of the application without hitting a real database&lt;/a&gt;. This makes those tests really fast. In the class itself, dependency injection also highlights the dependencies that a particular class has. If you notice the list of &lt;code&gt;Deps&lt;/code&gt; getting long, then it’s a good sign that the class is trying to do too much; such a thing signposts the complexity of the class right at the top.&lt;/p&gt;

&lt;p&gt;I love that &lt;a href=&quot;https://github.com/decafsucks/decafsucks&quot;&gt;Tim Riley, who is on the Hanami Core Team, is re-building Decaf Sucks in public&lt;/a&gt; to really show how it’s done.&lt;/p&gt;

&lt;p&gt;There’s also a bunch of &lt;a href=&quot;https://hanamimastery.com/&quot;&gt;Hanami screencasts (HanamiMastery) recorded by Seb Wilgosz&lt;/a&gt;, which come in both video and text format.&lt;/p&gt;

&lt;p&gt;Overall, I’m glad that the Hanami team has taken their time to really polish up this release, and I’m looking forward to building more things in what is shaping up to be &lt;em&gt;the&lt;/em&gt; Ruby web framework of the future.&lt;/p&gt;</content><author><name></name></author><summary type="html">I’ve been a fan of Hanami for a number of years now. One of my favourite apps to work on is even an open-source Hanami app! I have also been writing an ActivityPub app called “Chirper” in Hanami.</summary></entry><entry><title type="html">The Gem Foundation</title><link href="http://localhost:4000/2022/11/the-gem-foundation" rel="alternate" type="text/html" title="The Gem Foundation" /><published>2022-11-24T00:00:00+11:00</published><updated>2022-11-24T00:00:00+11:00</updated><id>http://localhost:4000/2022/11/the-gem-foundation</id><content type="html" xml:base="http://localhost:4000/2022/11/the-gem-foundation">&lt;div class=&quot;text-3xl text-center&quot;&gt;&lt;p&gt;Today, I am excited to announce the launch of &lt;strong&gt;The Gem Foundation&lt;/strong&gt;.&lt;/p&gt;&lt;/div&gt;

&lt;p&gt;Its mission is assist contributors in the Ruby community in their task to further the adoption of the Ruby language, expanding the scope more broadly than just one particular web framework.&lt;/p&gt;

&lt;p&gt;Because Ruby &lt;em&gt;is&lt;/em&gt; more than just a single framework.&lt;/p&gt;

&lt;p&gt;Immediately after establishment of this foundation, we have already surpassed &lt;a href=&quot;https://rubyonrails.org/2022/11/14/the-rails-foundation&quot;&gt;The Rails Foundation&lt;/a&gt; in terms of dollars donated, as we have donated &lt;strong&gt;ONE SINGLE U.S. DOLLAR&lt;/strong&gt; to &lt;a href=&quot;https://ruby.social/@baweaver&quot;&gt;Brandon Weaver&lt;/a&gt;, who was the first developer to get in touch with the foundation. Brandon contributes to the Ruby community by &lt;a href=&quot;https://dev.to/baweaver&quot;&gt;writing articles on his personal blog&lt;/a&gt;, and also runs the Ruby Learning Center Discord.&lt;/p&gt;

&lt;p&gt;The Gem Foundation has also donated &lt;strong&gt;TWO U.S. DOLLARS&lt;/strong&gt; to &lt;a href=&quot;https://ruby.social/@jaredwhite@indieweb.social&quot;&gt;Jared White&lt;/a&gt;, who is a contributor to &lt;a href=&quot;https://www.bridgetownrb.com/&quot;&gt;the Bridgetown&lt;/a&gt; site generator.&lt;/p&gt;

&lt;p&gt;The Gem Foundation is also contributing $25/USD a month towards the &lt;a href=&quot;https://github.com/sponsors/hanami&quot;&gt;Hanami&lt;/a&gt; web framework. If you would like there to be real competition in the Ruby web framework sphere, I would encourage you to do the same.&lt;/p&gt;

&lt;p&gt;That’s &lt;em&gt;$28USD&lt;/em&gt; already donated by the Gem Foundation!&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;strong&gt;UPDATE&lt;/strong&gt;: Kieran Andrews from Adelaide (and of &lt;a href=&quot;https://activerailsbook.com&quot;&gt;Active Rails fame&lt;/a&gt;) has also donated &lt;em&gt;$30USD&lt;/em&gt; to the &lt;a href=&quot;https://github.com/pry/pry&quot;&gt;Pry gem&lt;/a&gt;, bringing The Gem Foundation’s donation total up to $58USD!&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;UPDATE #2&lt;/strong&gt;: As it’s now the 1st of December, a payment of $25USD has been made to the Hanami organisation on GitHub. This brings our total donations almost to $100!&lt;/p&gt;

&lt;p&gt;Here’s a helpful chart to track our donations:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/gem-foundation/donations.png&quot; alt=&quot;The Gem Foundation donations&quot; /&gt;&lt;/p&gt;</content><author><name></name></author><summary type="html">Today, I am excited to announce the launch of The Gem Foundation.</summary></entry><entry><title type="html">A replacement for strong parameters</title><link href="http://localhost:4000/2022/11/a-replacement-for-strong-parameters" rel="alternate" type="text/html" title="A replacement for strong parameters" /><published>2022-11-09T00:00:00+11:00</published><updated>2022-11-09T00:00:00+11:00</updated><id>http://localhost:4000/2022/11/a-replacement-for-strong-parameters</id><content type="html" xml:base="http://localhost:4000/2022/11/a-replacement-for-strong-parameters">&lt;p&gt;I’m not going to take &lt;a href=&quot;https://dev.37signals.com/vanilla-rails-is-plenty&quot;&gt;this week’s (very obvious) bait about how “Vanilla Rails is plenty”&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;In the past, I’ve spent effort watching DHH’s videos and &lt;a href=&quot;https://ryanbigg.com/2018/03/on-writing-software-well-2-a-review&quot;&gt;issuing a (time-stamped) rebuttal&lt;/a&gt;, and writing up about &lt;a href=&quot;https://ryanbigg.com/2017/06/current-considered-harmful&quot;&gt;a new Rails feature I would consider harmful&lt;/a&gt;.&lt;/p&gt;

&lt;p style=&quot;font-size: 125%&quot;&gt;&lt;strong&gt;I even &lt;a href=&quot;https://leanpub.com/maintain-rails/&quot;&gt;wrote a book called Maintainable Rails&lt;/a&gt; that offers my take on how to build a maintainable Rails application. A whole 30,000 words of it!&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;I am not going to follow that pattern today, even though the vanilla Rails article is &lt;em&gt;concerning&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;You know, if their apps were &lt;em&gt;maintainable&lt;/em&gt;, then they wouldn’t need to keep re-writing them completely, yeah?&lt;/p&gt;

&lt;p&gt;I digress.&lt;/p&gt;

&lt;p&gt;Today, I want to cover a &lt;em&gt;different&lt;/em&gt; feature of Rails that I think could be improved: strong parameters.&lt;/p&gt;

&lt;p&gt;The &lt;a href=&quot;https://guides.rubyonrails.org/action_controller_overview.html#nested-parameters&quot;&gt;documentation for strong_parameters&lt;/a&gt; always makes me a little confused with all of its different kinds of brackets. It feels like someone discovered Lisp and then thought it would be good to have as many brackets in Ruby, only to abandon the idea half-way.&lt;/p&gt;

&lt;p&gt;Here’s a complicated example from that documentation.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-ruby&quot;&gt;params.permit(:name, { emails: [] },
              friends: [ :name,
                         { family: [ :name ], hobbies: [] }])
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The documentation goes on to explain:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;This declaration permits the name, emails, and friends attributes. It is expected that emails will be an array of permitted scalar values, and that friends will be an array of resources with specific attributes: they should have a name attribute (any permitted scalar values allowed), a hobbies attribute as an array of permitted scalar values, and a family attribute which is restricted to having a name (any permitted scalar values allowed here, too).&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;The documentation also explains that the permitted scalar values are:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;The permitted scalar types are `String`, `Symbol`, `NilClass`, `Numeric`, `TrueClass`, `FalseClass`, `Date`, `Time`, `DateTime`, `StringIO`, `IO`, `ActionDispatch::Http::UploadedFile`, and `Rack::Test::UploadedFile`.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;That’s quite a few permitted types!&lt;/p&gt;

&lt;p&gt;How might we approach this differently? I think we could do this in a clearer fashion with a gem called &lt;a href=&quot;https://dry-rb.org/gems/dry-schema/1.10/&quot;&gt;dry-schema&lt;/a&gt;. The dry-schema gem allows us to define particular schemas that our data should comply with, and like strong parameters it will automatically drop keys that are not specified in the schema itself.&lt;/p&gt;

&lt;h3 id=&quot;creating-the-schema&quot;&gt;Creating the schema&lt;/h3&gt;

&lt;p&gt;Let’s try creating a schema from the above strong parameters code, but this time in dry-schema. I’m also going to add an extra field here called age:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-ruby&quot;&gt;PersonSchema = Dry::Schema.Params do
  required(:name).filled(:string)
  required(:age).filled(:integer)
  required(:emails).value(array[:string]).value(min_size?: 1)
  required(:friends).array(:hash) do
    required(:name).filled(:string)
    required(:family).hash do
      required(:name).filled(:string)
    end
  end
  required(:hobbies).array(:string)
end
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;With this schema we’re clearly defining the types of the data that we expect. Now we’ve limited the type of &lt;code&gt;name&lt;/code&gt; to string, so it can no longer accept a file for its value. That is probably for the best.&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;required(:friends).array(:hash)&lt;/code&gt; syntax might hurt a little bit to read, but it means “an array of any length, where the values are all hashes”. The block of this method then defines the permitted keys within those hashes.&lt;/p&gt;

&lt;p&gt;You could define this schema at the top of your controller, if you like, or in its own file at &lt;code&gt;app/schemas/person_schema.rb&lt;/code&gt;. It really should depend on the context in which it is used.&lt;/p&gt;

&lt;p&gt;It goes further than strong parameters, because it specifies the types expected for things such as emails and hobbies, whereas strong parameters would allow any “permitted scalar values” in there, including things such as numbers. The &lt;code&gt;dry-schema&lt;/code&gt; version &lt;em&gt;also&lt;/em&gt; specifies that there has to be at least one email address.&lt;/p&gt;

&lt;h3 id=&quot;using-a-valid-set-of-parameters&quot;&gt;Using a valid set of parameters&lt;/h3&gt;

&lt;p&gt;A hash that would pass the checks for this schema.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-ruby&quot;&gt;params = {
  name: &quot;Ryan&quot;,
  age: 34,
  emails: [&quot;me@ryanbigg.com&quot;],
  hobbies: [&quot;MTG&quot;, &quot;Coding&quot;],
  friends: [
    {
      name: &quot;Dear&quot;,
      family: { name: &quot;Reader&quot; }
    }
  ]
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We can check this with:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-ruby&quot;&gt;result = PersonSchema.(params)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We will get a &lt;code&gt;Dry::Schema::Result&lt;/code&gt; back from this, which we can grab the output of with:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;result.output
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&quot;type-coercions&quot;&gt;Type-coercions&lt;/h3&gt;

&lt;p&gt;Another hash that would pass the checks, even though it might not look like it, is this one:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-ruby&quot;&gt;params = {
  name: &quot;Ryan&quot;,
  age: &quot;34&quot;,
  emails: [&quot;me@ryanbigg.com&quot;],
  hobbies: [&quot;MTG&quot;, &quot;Coding&quot;],
  friends: [
    {
      name: &quot;Dear&quot;,
      family: { name: &quot;Reader&quot; }
    }
  ]
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The &lt;code&gt;age&lt;/code&gt; key here is specified as a string, but the schema says the type must be an &lt;code&gt;integer&lt;/code&gt;. Let’s look at what happens:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-ruby&quot;&gt;result = PersonSchema.(params)
result.output[:age] # =&amp;gt; 34
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The &lt;code&gt;Dry::Schema.Params&lt;/code&gt; type will do its best to cooerce string parameter values to their matching Ruby counterparts. This will also work for things such as dates in the “YYYY-MM-DD” formats, too. No more needing to do a &lt;code&gt;Date.parse&lt;/code&gt; if that parameter is being sent to something else, like a service object instead of a model.&lt;/p&gt;

&lt;h3 id=&quot;unknown-keys-are-removed&quot;&gt;Unknown Keys are removed&lt;/h3&gt;

&lt;p&gt;Like with strong parameters, if we attempt to pass an extra key:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-ruby&quot;&gt;params = {
  name: &quot;Ryan&quot;,
  age: 34,
  emails: [&quot;me@ryanbigg.com&quot;],
  hobbies: [&quot;MTG&quot;, &quot;Coding&quot;],
  friends: [
    {
      name: &quot;Dear&quot;,
      family: { name: &quot;Reader&quot; }
    }
  ],
  very_smart: true
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Then the schema will remove this additional key, proving that I am just regular smart, if that.&lt;/p&gt;

&lt;h3 id=&quot;re-using-schemas&quot;&gt;Re-using schemas&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;dry-schema&lt;/code&gt; also allows us to re-use schemas. Let’s say that we have two schemas, our &lt;code&gt;PersonSchema&lt;/code&gt; and another schema called &lt;code&gt;FriendSchema&lt;/code&gt; that defines the shape of the friend keys. Heres how we could use those together:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-ruby&quot;&gt;FriendSchema = Dry::Schema.params do
  required(:name).filled(:string)
  required(:family).hash do
    required(:name).filled(:string)
  end
end

PersonSchema = Dry::Schema.Params do
  required(:name).filled(:string)
  required(:age).filled(:integer)
  required(:emails).value(array[:string]).value(min_size?: 1)
  required(:friends).array(FriendSchema)
  required(:hobbies).array(:string)
end
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This is particularly helpful if you had a couple of complicated data structures that you wanted to validate at the same time, and use each of those schemas in different locations.&lt;/p&gt;

&lt;p&gt;I’d like to see strong parameters do that!&lt;/p&gt;

&lt;h3 id=&quot;error-messages-are-provided&quot;&gt;Error messages are provided&lt;/h3&gt;

&lt;p&gt;If the hash passed in is completely invalid, like this one:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-ruby&quot;&gt;params = {}
result = PersonSchema.(params)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Then we can retrieve error messages that are similar to Active Model validations back out:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;=&amp;gt; {:name=&amp;gt;[&quot;is missing&quot;], :age=&amp;gt;[&quot;is missing&quot;], :emails=&amp;gt;[&quot;is missing&quot;], :friends=&amp;gt;[&quot;is missing&quot;], :hobbies=&amp;gt;[&quot;is missing&quot;]}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;On top of this, the &lt;code&gt;result&lt;/code&gt; is also going to respond to &lt;code&gt;success?&lt;/code&gt; with &lt;code&gt;false&lt;/code&gt;, meaning we could use this in a controller action to check if the parameters are valid, before even passing them to their final destination. That might be a model (with, perhaps, it’s own validations), or it could
be another service.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;I’ve only scratched the surface on what &lt;code&gt;dry-schema&lt;/code&gt; can do. I purposely wanted to keep this post short today to cover how it could replace strong parameters within Rails to provide a much better developer experience than that bracketed mess.&lt;/p&gt;

&lt;p&gt;If you’d like to know what else dry-schema can do, make sure to check out &lt;a href=&quot;https://dry-rb.org/gems/dry-schema/&quot;&gt;its documentation here&lt;/a&gt;.&lt;/p&gt;</content><author><name></name></author><summary type="html">I’m not going to take this week’s (very obvious) bait about how “Vanilla Rails is plenty”.</summary></entry><entry><title type="html">Using Union Types with GraphQL Mutations in Ruby</title><link href="http://localhost:4000/2022/05/ruby-graphql-mutations-with-union-types" rel="alternate" type="text/html" title="Using Union Types with GraphQL Mutations in Ruby" /><published>2022-05-06T00:00:00+10:00</published><updated>2022-05-06T00:00:00+10:00</updated><id>http://localhost:4000/2022/05/ruby-graphql-mutations-with-union-types</id><content type="html" xml:base="http://localhost:4000/2022/05/ruby-graphql-mutations-with-union-types">&lt;p&gt;The &lt;a href=&quot;https://graphql-ruby.org/mutations/mutation_classes.html&quot;&gt;official documentation for the graphql-ruby gem&lt;/a&gt; recommends this code for a mutation class that can either succeed or fail:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-ruby&quot;&gt;class Mutations::CreateComment &amp;lt; Mutations::BaseMutation
  argument :body, String
  argument :post_id, ID

  field :comment, Types::Comment
  field :errors, [String], null: false

  def resolve(body:, post_id:)
    post = Post.find(post_id)
    comment = post.comments.build(body: body, author: context[:current_user])
    if comment.save
      # Successful creation, return the created object with no errors
      {
        comment: comment,
        errors: [],
      }
    else
      # Failed save, return the errors to the client
      {
        comment: nil,
        errors: comment.errors.full_messages
      }
    end
  end
end
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I’d like to show an alternative to this that I think leads to cleaner code by using GraphQL concept called &lt;em&gt;union types&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;We use union types in GraphQL when we want a field to return one or more distinct types as its result. In the case of the above comment mutation, the two types of things we would like to return are either:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;A comment, if the mutation was successful&lt;/li&gt;
  &lt;li&gt;Errors, if the mutation was unsuccessful&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Let’s change that mutation above to use a union type by declaring the type at the top of the mutation, and removing the two fields:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-ruby&quot;&gt;class Mutations::CreateComment &amp;lt; Mutations::BaseMutation
  type Types::CreateCommentResult
  argument :body, String
  argument :post_id, ID

  def resolve(body:, post_id:)
    post = Post.find(post_id)
    comment = post.comments.build(body: body, author: context[:current_user])
    if comment.save
      # Successful creation, return the created object with no errors
      {
        comment: comment,
        errors: [],
      }
    else
      # Failed save, return the errors to the client
      {
        comment: nil,
        errors: comment.errors.full_messages
      }
    end
  end
end
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This new type will be our union type that will represent either a successful creation for a comment, or a failed one.&lt;/p&gt;

&lt;p&gt;We can define this type in our &lt;code&gt;types&lt;/code&gt; directory under &lt;code&gt;graphql&lt;/code&gt;, in a file called &lt;code&gt;create_comment_result.rb&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-ruby&quot;&gt;module Types
  class CreateCommentResult &amp;lt; BaseUnion
    description &quot;The result from attempting to create a comment&quot;
    possible_types Types::Comment, Types::Errors

    def self.resolve_type(object, _context)
      if object[:comment]
        [Types::Comment, object[:comment]]
      else
        [Types::Errors, object]
      end
    end
  end
end
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;A union type is defined by first inheriting from &lt;code&gt;BaseUnion&lt;/code&gt;. If we had common logic to share between union types in our GraphQL API, that logic would go into &lt;code&gt;BaseUnion&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Inside this &lt;code&gt;CreateCommentResult&lt;/code&gt; type itself, we provide a description that’ll appear in our API documentation, and inform this class what the possible types are. For this union type, we’re defining two possible types: &lt;code&gt;Types::Comment&lt;/code&gt;, and &lt;code&gt;Types::Errors&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;When the GraphQL code runs, it will call this &lt;code&gt;resolve_type&lt;/code&gt; method to determine the correct GraphQL type to use when representing the result of the mutation. This method checks if &lt;code&gt;object[:comment]&lt;/code&gt; is present, and if it is the type that’ll be used is a &lt;code&gt;Types::Comment&lt;/code&gt;, and we can fetch the comment from that object using &lt;code&gt;object[:comment]&lt;/code&gt;. In Rails parlance, this &lt;code&gt;object[:comment]&lt;/code&gt; will be an instance of the &lt;code&gt;Comment&lt;/code&gt; model – a result of a successful &lt;code&gt;build&lt;/code&gt; and &lt;code&gt;save&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;If the operation was to fail, we would instead return a &lt;code&gt;Types::Error&lt;/code&gt; type, and use the resulting object as the base object for that type.&lt;/p&gt;

&lt;p&gt;These two types can be defined in the &lt;code&gt;types&lt;/code&gt; directory too. Let’s look at &lt;code&gt;CommentType&lt;/code&gt; first, defined in &lt;code&gt;types/comment.rb&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-ruby&quot;&gt;class Types::Comment &amp;lt; Types::BaseObject
  field :id, ID, null: false
  field :body, String, null: false
end
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This type is used to represent comments in our GraphQL API. It provides access to both the &lt;code&gt;id&lt;/code&gt; and &lt;code&gt;body&lt;/code&gt; attributes from any &lt;code&gt;Comment&lt;/code&gt; instance that is represented by this API.&lt;/p&gt;

&lt;p&gt;Then, the &lt;code&gt;Errors&lt;/code&gt; type:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-ruby&quot;&gt;class Types::Errors &amp;lt; Types::BaseObject
  field :errors, [String], null: false
end
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This type represents the &lt;code&gt;{ comment: nil, errors: [...] }&lt;/code&gt; hash that will be returned when a comment creation fails.&lt;/p&gt;

&lt;p&gt;With these union types setup, we can write this GraphQL query that will rely on them:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;mutation {
  createComment(input: { postId: 1, body: &quot;Hello world&quot; }) {
    __typename
    ... on Comment {
      id
    }

    ...on Errors {
      errors
    }
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Firstly, we call this mutation by passing in its required arguments. After that, we fetch a field called &lt;code&gt;__typename&lt;/code&gt;. This field is automatically defined, and it will return the type whatever object is returned, either &lt;code&gt;Comment&lt;/code&gt; or &lt;code&gt;Errors&lt;/code&gt;. When calling this GraphQL API, we can use &lt;code&gt;__typename&lt;/code&gt; to determine how to act.&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;... on&lt;/code&gt; syntax here tells GraphQL which fields we would like to use in the case of each part of the union being returned here. If it’s a comment, we will fetch just the &lt;code&gt;id&lt;/code&gt;. If it’s &lt;code&gt;Errors&lt;/code&gt;, we can fetch just the errors.&lt;/p&gt;

&lt;p&gt;If we were to call this mutation with an empty comment body, we would see this as the result:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-json&quot;&gt;{
  &quot;data&quot;: {
    &quot;createComment&quot;: {
      &quot;__typename&quot;: &quot;Errors&quot;,
      &quot;errors&quot;: [
        &quot;Body can&apos;t be blank&quot;
      ]
    }
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And if we were to call it with a valid body, we would see this:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-json&quot;&gt;{
  &quot;data&quot;: {
    &quot;createComment&quot;: {
      &quot;__typename&quot;: &quot;Comment&quot;,
      &quot;id&quot;: &quot;6&quot;
    }
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;When using this API (for example, within a frontend codebase), we can assert on &lt;code&gt;__typename&lt;/code&gt; to determine how to show the result to a user – if it’s a &lt;code&gt;Comment&lt;/code&gt;, then indicate a successful comment creation. If it’s &lt;code&gt;Errors&lt;/code&gt;, then show those errors on the form.&lt;/p&gt;</content><author><name></name></author><summary type="html">The official documentation for the graphql-ruby gem recommends this code for a mutation class that can either succeed or fail:</summary></entry><entry><title type="html">Typed View Components with dry-types</title><link href="http://localhost:4000/2022/03/typed-view-components" rel="alternate" type="text/html" title="Typed View Components with dry-types" /><published>2022-03-08T00:00:00+11:00</published><updated>2022-03-08T00:00:00+11:00</updated><id>http://localhost:4000/2022/03/typed-view-components</id><content type="html" xml:base="http://localhost:4000/2022/03/typed-view-components">&lt;p&gt;This post was originally inspired by &lt;a href=&quot;https://twitter.com/RogersKonnor&quot;&gt;Konnor Rogers&lt;/a&gt;, and &lt;a href=&quot;https://gist.github.com/ParamagicDev/5dc17dea9e8ab414d227461ae521f011&quot;&gt;this gist from him&lt;/a&gt;.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;Last year, I wrote about &lt;a href=&quot;https://ryanbigg.com/2021/04/view-components-the-missing-link&quot;&gt;View Components&lt;/a&gt; for the first time. That post demonstrated how you could use View Components to bridge the gap between Ruby and React by using a View Component to build up the props for a React component.&lt;/p&gt;

&lt;p&gt;Since then, I’ve joined &lt;a href=&quot;https://fatzebra.com&quot;&gt;Fat Zebra&lt;/a&gt; and we’re doing a lot of work involving Rails, React and View Components.&lt;/p&gt;

&lt;p&gt;One thing we’ve discovered that helps with using View Components is adding types by using the &lt;code&gt;dry-initializer&lt;/code&gt; and &lt;code&gt;dry-types&lt;/code&gt; to those View Components. While we have the protection of types in TypeScript, we do not have the same level of protection in Ruby. And since TypeScript only does compile-time checking, it means that we could pass a property from these Ruby View Components down to our React components where that property’s type is incorrect.&lt;/p&gt;

&lt;p&gt;Take for (contrived) example, this simple component that takes in a &lt;code&gt;standalone&lt;/code&gt; property.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-ruby&quot;&gt;class RefundComponent &amp;lt; ViewComponent::Base
  attr_reader :standalone

  def initialize(standalone:)
    @standalone = standalone
  end

  def props
    {
      standalone: standalone,
      # ...
    }
  end
end
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;There’s nothing in this component that dictates the type for &lt;code&gt;standalone&lt;/code&gt;. It should be a boolean. It &lt;em&gt;could be&lt;/em&gt; a string, or a number, or literally any valid object in Ruby. So when this component is used in this way:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-ruby&quot;&gt;render RefundComponent.new(standalone: params[:standalone])
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;What’s going to happen here?&lt;/p&gt;

&lt;p&gt;Well, if we &lt;em&gt;think&lt;/em&gt; standalone is a boolean, we can expect &lt;code&gt;params[:standalone]&lt;/code&gt; is going to be either &lt;code&gt;&quot;true&quot;&lt;/code&gt; or &lt;code&gt;&quot;false&quot;&lt;/code&gt; ,given that Rails parameters are stringified.&lt;/p&gt;

&lt;p&gt;Inside our React component, we might have code like this.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-tsx&quot;&gt;{standalone ? &quot;Standalone&quot; : &quot;Not Standalone&quot;}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The string &lt;code&gt;&quot;true&quot;&lt;/code&gt; does the same as the boolean &lt;code&gt;true&lt;/code&gt;. The string &lt;code&gt;&quot;false&quot;&lt;/code&gt; does not do the same as the boolean &lt;code&gt;&quot;false&quot;&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;This is completely innocent code, and the kind that we might write any old day. Nothing stopped us from writing it. In fact, TypeScript gave us &lt;em&gt;two&lt;/em&gt; thumbs up when we compiled our React code. Ruby doesn’t care. Ruby’s fine as long as the syntax is correct.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;To prevent a mistake like this, we can use the &lt;code&gt;dry-initializer&lt;/code&gt; and &lt;code&gt;dry-types&lt;/code&gt; gems like this:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-ruby&quot;&gt;class RefundComponent &amp;lt; ViewComponent::Base
  extend Dry::Initializer
  Types = Dry.Types()

  option :standalone, Types::Bool

  def props
    {
      standalone: standalone,
      # ...
    }
  end
end
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The &lt;code&gt;Types&lt;/code&gt; constant here is usually defined on a more “global” level. For example, you might define it at &lt;code&gt;lib/types.rb&lt;/code&gt; for your entire application. I’ve just included it in the class here for brevity.&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;option&lt;/code&gt; method here defines a keyword argument initializer for &lt;code&gt;RefundComponent&lt;/code&gt;, so this means our component will still be able to be rendered in the same way:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-ruby&quot;&gt;render RefundComponent.new(standalone: params[:standalone])
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;But this time, if we pass it a stringly-typed &lt;code&gt;standalone&lt;/code&gt; here, it will show us an error:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&quot;false&quot; violates constraints (type?(FalseClass, &quot;false&quot;) failed) (Dry::Types::ConstraintError)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The error message is wordy, but with enough practice (just like TypeScript!) we can learn to read these. The error message here says that the type of &lt;code&gt;FalseClass&lt;/code&gt;, is not the same type as &lt;code&gt;&quot;false&quot;&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;We cannot pass the stringly-typed &lt;code&gt;params[:standalone]&lt;/code&gt; here anymore.&lt;/p&gt;

&lt;p&gt;Instead, we would have to convert this parameter to a boolean so that our code would work:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;render RefundComponent.new(standalone: params[:standalone] == &apos;true&apos;)
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&quot;but-wait-theres-more&quot;&gt;But wait, there’s more…&lt;/h3&gt;

&lt;p&gt;We can also use &lt;code&gt;dry-types&lt;/code&gt; to define the types for our properties too, in case we had some complicated logic there.  Perhaps we have an amount that is returned, and we want to guarantee it’s a float by the time it gets to our React library. To spice things up, for legacy reasons the &lt;code&gt;amount&lt;/code&gt; arrives at our component as a string, not a float. With this amount also comes a currency property, which is also a string.&lt;/p&gt;

&lt;p&gt;Here’s how we would handle that by using another &lt;code&gt;dry-rb&lt;/code&gt; library, &lt;code&gt;dry-struct&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-ruby&quot;&gt;class RefundComponent &amp;lt; ViewComponent::Base
  extend Dry::Initializer
  Types = Dry.Types()

  option :standalone, Types::Bool
  option :amount, Types::String
  option :currency, Types::String

  class Props &amp;lt; Dry::Struct
    schema schema.strict

    attribute :standalone, Types::Bool
    attribute :amount, Types::Float
    attribute :currency, Types::String
  end

  def props
    Props.new(
      standalone: standalone,
      amount: amount.to_money(currency).to_f,
      currency: currency,
      # ...
    ).to_h
  end
end
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This way, we can call &lt;code&gt;RefundComponent&lt;/code&gt; with a stringified &lt;code&gt;amount&lt;/code&gt;, and have &lt;code&gt;props&lt;/code&gt; be the correct type:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;gt;&amp;gt; component = RefundComponent.new(standalone: params[:standalone] == &apos;true&apos;, amount: &quot;1234&quot;, currency: &quot;AUD&quot;)
=&amp;gt; #&amp;lt;RefundComponent:0x000000013e6a76a8 @amount=&quot;1234&quot;, @currency=&quot;AUD&quot;, @standalone=true&amp;gt;
&amp;gt;&amp;gt; component.props
=&amp;gt; {:standalone=&amp;gt;true, :amount=&amp;gt;1234.0, :currency=&amp;gt;&quot;AUD&quot;}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If the type of &lt;code&gt;Props#amount&lt;/code&gt; (once it has been coerced) wasn’t a float and instead was an integer, like this:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-ruby&quot;&gt;amount: amount.to_money(currency).to_i,
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This code would cause this error:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;1234 (Integer) has invalid type for :amount violates constraints (type?(Float, 1234) failed) (Dry::Types::SchemaError)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This helps alert us to a typing issue earlier on in our code, before it even reaches our React code.&lt;/p&gt;</content><author><name></name></author><summary type="html">This post was originally inspired by Konnor Rogers, and this gist from him.</summary></entry><entry><title type="html">Culture and Values</title><link href="http://localhost:4000/2021/12/culture-and-values" rel="alternate" type="text/html" title="Culture and Values" /><published>2021-12-09T00:00:00+11:00</published><updated>2021-12-09T00:00:00+11:00</updated><id>http://localhost:4000/2021/12/culture-and-values</id><content type="html" xml:base="http://localhost:4000/2021/12/culture-and-values">&lt;p&gt;It’s been one year since I was fired.&lt;/p&gt;

&lt;p&gt;The Big Boss at the time wanted everyone to work out of an office in Melbourne (because by the end of 2020, everyone thought that The Pandemic was &lt;em&gt;over&lt;/em&gt;), and I was moving 250km to the west.&lt;/p&gt;

&lt;p&gt;What’s more, is that I was an opinionated asshole who cared too much about things and got angry about it. The whole pandemic thing didn’t help.&lt;/p&gt;

&lt;p&gt;It was the third time I had been let go from a job in just over a year. I was made redundant in November 2019 and again in April 2020. In 13 months, I had left 3 jobs. That doesn’t look so good on a resume.&lt;/p&gt;

&lt;p&gt;So I thought I should change things this year – usher in a new era of stability for myself and my family… and instead undertook consultancy work which has meant that I’ve had &lt;em&gt;at least&lt;/em&gt; 4 on-the-books jobs this year. But why go into consultancy after so many years of working full-time? And &lt;em&gt;especially&lt;/em&gt; why go into consultancy work despite wanting all that precious stability? And in the same year that I got a mortgage?&lt;/p&gt;

&lt;p&gt;Sure, the consulting money’s good (like, really good), but there’s a simpler answer: burnout.&lt;/p&gt;

&lt;p&gt;I was burned out on companies, especially when it came to the culture and values they espoused. &lt;em&gt;Especially&lt;/em&gt; the “F” word: “family”.&lt;/p&gt;

&lt;p&gt;I became too invested in those companies, and when it was time to wrap things up there, it was traumatic and devastating. There’s no nice way to sugar-coat things.&lt;/p&gt;

&lt;p&gt;I want to share a bit about the history of that trauma today, as (I guess) a way of coping with it.&lt;/p&gt;

&lt;p&gt;Perhaps others out there have experienced similar situations. I share this to cope, but I also share this to say to those people that you are not alone, and things can get better.&lt;/p&gt;

&lt;h2 id=&quot;2019-redundancy&quot;&gt;2019 Redundancy&lt;/h2&gt;

&lt;p&gt;The job I was made redundant from 2019 was my favourite job so far. I was running a Junior Engineering Program, and had trained up about 20 different developers. I was expressly told to start plotting and scheming for a 3rd iteration of that program. Two weeks after the “plotting and scheming” meeting, I was told I would be offered a redundancy. I took the remainder of that week off to cope with the whiplash.&lt;/p&gt;

&lt;p&gt;This was in July. I was slated to wrap up in November. It was a nice long goodbye.&lt;/p&gt;

&lt;p&gt;I cared deeply about the company, and its mission, and its people. I forgave it for its sins and transgressions.&lt;/p&gt;

&lt;p&gt;I forgave it for its office in Richmond with its oddly-named, incredibly stuffy meeting rooms. The same office that had windows that were fixed opened directly to the outside, even in Winter. The same cathedral-like office that couldn’t prioritise sound-proofing to prevent the conversations of the 150-people inside echoing off every conceivable surface.&lt;/p&gt;

&lt;p&gt;I’ve almost forgiven it for the time that it decided to run a 5-day-long all-hands conference, where the days were rougly 15 hours long, but may as well have been 150 hours for how exhausted I felt at the end of it all.&lt;/p&gt;

&lt;p&gt;Then November 2019 came around, and the person who did the exit interview at that company wasn’t my manager, or even a long-term HR employee. It was practically a stranger, someone who had started there &lt;em&gt;that very week&lt;/em&gt; in HR and she conducted my exit interview. I had never met this person before this interview, and I haven’t seen her since.&lt;/p&gt;

&lt;p&gt;I do not forgive the company for that.&lt;/p&gt;

&lt;p&gt;What softened the blow was a sizable redundancy payout. One that helped me buy the house that I’m now sitting in. I like that I have a house that’s progressively getting to be more and more my own, brick by sandstone brick, and less and less the bank’s. But I digress.&lt;/p&gt;

&lt;p&gt;It’s after this whole redundancy process that I came to realise that I cared too much about the company. I was &lt;em&gt;too invested&lt;/em&gt; in its values, its success, its &lt;em&gt;culture&lt;/em&gt;. I had tied too much of my own &lt;em&gt;value&lt;/em&gt; to the company’s &lt;em&gt;value&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;It was devastating to be shown the door.&lt;/p&gt;

&lt;h2 id=&quot;april-2020-redundancy&quot;&gt;April 2020 Redundancy&lt;/h2&gt;

&lt;p&gt;Then I found a job with a company whose values I very strongly aligned with. A company that trained up junior-junior developers. People who were just getting started with their programming careers. I thought I could make a real difference here in educating the next generation of developers who were entering the industry.&lt;/p&gt;

&lt;p&gt;Then a little thing called a pandemic hit. I’m sure you’ve heard of it by now. The parent company of the one I joined relied on international students for a large majority of its income. A pandemic in Australia meant closed borders (easy to enforce, as we’re a &lt;em&gt;giant island&lt;/em&gt;), and closed borders meant no international students, which ultimately meant little-to-no money for that company.&lt;/p&gt;

&lt;p&gt;I, along with the entire company, were told about potential redundancies happening in a staff-wide email on a &lt;em&gt;Monday&lt;/em&gt; at the end of March. During this week we found out it was going to be 235 people across the whole company. I got that dreaded call back on &lt;em&gt;Friday&lt;/em&gt; at 3pm. That was a particularly unproductive week, let me tell you. This time again it wasn’t my boss, or even a long-term colleague. It was some high-up HR woman who sounded absolutely exhausted.&lt;/p&gt;

&lt;p&gt;About 5 minutes after this phone call, I was locked out of Slack, GitHub, and email. It was clinical and effective. I went into the office the next week and collected my things. That was the last time I was in an office.&lt;/p&gt;

&lt;p&gt;I had become &lt;em&gt;too invested&lt;/em&gt; again in the company’s success.&lt;/p&gt;

&lt;p&gt;And I was cast out, without pity and this time without compensation.&lt;/p&gt;

&lt;h2 id=&quot;december-2020&quot;&gt;December 2020&lt;/h2&gt;

&lt;p&gt;With the pandemic hitting its stride by April 2020, I didn’t exactly put a lot of thought into where I wanted to go next. What I did put thought into was that I didn’t want to be made redundant again after being made redundant twice in quick succession, and that I didn’t want to lose my job during the pandemic.&lt;/p&gt;

&lt;p&gt;I cared about this job, and poured my focus and attention into it. I wanted things to be &lt;em&gt;right&lt;/em&gt; for our customers. A little too hard. I cared about things that I shouldn’t have cared about. I got upset when things that I thought were important were not considered important by others. I cared about creating a good working culture for the development team. I cared about replacing parts of our Backbone code with something from this decade. I cared too much. I got angry.&lt;/p&gt;

&lt;p&gt;And I got fired.&lt;/p&gt;

&lt;h2 id=&quot;2021&quot;&gt;2021&lt;/h2&gt;

&lt;p&gt;So this year, I started out as a consultant which is a pleasant way of saying “an opinionated asshole for hire”. I could choose to work 3-month contracts with no strings attached. I didn’t &lt;em&gt;need&lt;/em&gt; to care about the company culture, or get invested in its success. I needed to trade labor for dollars.&lt;/p&gt;

&lt;p&gt;I got to work with a few different teams releasing some major features in Rails and Rails-adjacent tech, and even upgraded a Rails app or two. I was trusted for my opinion on things, but really worked hard on giving the opinion in a &lt;em&gt;nice way&lt;/em&gt;. I joked to close friends that I should’ve hung bunting above my desk spelling out the word “PROFESSIONALISM” in giant letters. Sometimes I think I should still put it up.&lt;/p&gt;

&lt;p&gt;Ultimately, I was successful in doing the consultant thing of trading labor for dollars. And leaving things better than I how I found them, just for my own moral satisfaction.&lt;/p&gt;

&lt;p&gt;But, ultimately, it was lonely stuff. Working out of my house this year, by myself, with a 15-minute call for standup at the start of the day… just doesn’t tickle the social aspect of my brain in the right way. It often felt like I was an &lt;em&gt;interloper&lt;/em&gt; into these projects, tossing grenades (or bouquets, depending on the mood) into projects and then skipping off into the sunset with my fat bags of consultant cash.&lt;/p&gt;

&lt;p&gt;You ever walk into a meeting room, except it’s the wrong one? Well, if you like that feeling, become a consultant because that’s the feeling you get every damn day.&lt;/p&gt;

&lt;h2 id=&quot;interviewing-in-2021&quot;&gt;Interviewing in 2021&lt;/h2&gt;

&lt;p&gt;Around about the time that I figured out the “fucking hell, this is lonely work” thing I wrote &lt;a href=&quot;https://ryanbigg.com/2021/07/job-hunt-q2-2021&quot;&gt;this post&lt;/a&gt;. I write &lt;em&gt;this&lt;/em&gt; post today to provide some context, some colour, around why I sound so… bleak in that other post. It wasn’t just the pandemic.&lt;/p&gt;

&lt;p&gt;At the time of that post in July, I interviewed at a number of companies. I got offered coding tests. &lt;a href=&quot;https://ryanbigg.com/2021/07/on-coding-tests&quot;&gt;I got angry about being offered coding tests&lt;/a&gt;. And I refused to do them this time. Some people balked at that. I stood my ground, and was outright refused by some companies because I refused to do coding tests.&lt;/p&gt;

&lt;p&gt;The other half of the interviews that companies love to do is the culture part of the interview.&lt;/p&gt;

&lt;p&gt;A culture interview essentially boils down to “are you an asshole?” and, honestly, you could spend an hour reading about who I am and what I’ve done and get a pretty good idea about that. Or you could spend that hour talking to me and I’ll tell you the same thing. The best answer I can give you right now for that is: “you would probably rather hire 2021 Ryan than 2020 Ryan, and you’d &lt;em&gt;certainly&lt;/em&gt; hire 2020 Ryan over 2015 Ryan”. Just wait for 2022 Ryan. Jeez that guy is good.&lt;/p&gt;

&lt;p&gt;Things have improved. There are things that need improving that I am aware of. There are things that need improving that I’m not aware of. This is what makes us human. We’ll work on it together. I’ll try my damndest to not repeat the mistakes of the past and to prevent future ones.&lt;/p&gt;

&lt;p&gt;A culture interview can sometimes have questions like “what value of ours do you most identify with?” and if you’re interviewing at several different companies and have either been made redundant or fired from the last three big companies you’ve worked for… chances are you’re going to be particularly burned out on that aspect. You’re not going to have done your homework on those values of this one particular company, and you’re going to flub that particular question. Like I did.&lt;/p&gt;

&lt;p&gt;Later on, when &lt;em&gt;at least&lt;/em&gt; 5 friends suggest that I would be really great for that company’s Developer Mentor role (a different one to the one I applied for) that they’ve been advertising for months… the job where you could &lt;em&gt;train junior developers and get paid to do it&lt;/em&gt; and &lt;em&gt;holy fuck you’d be so good at it because this is your wheelhouse&lt;/em&gt;…. it kinda smarts and I get to re-live the trauma of &lt;em&gt;failing an interview as a really experienced developer&lt;/em&gt; again, and again, and again. All because I didn’t read the fucking list of values on their website, because I was seriously burned out on the whole “culture and values” thing.&lt;/p&gt;

&lt;p&gt;Who doesn’t love re-living moments of such abject failure?&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;To me, it is not important what the values written on a page of a company’s website are. It’s all the same bullshit.&lt;/p&gt;

&lt;p&gt;What matters to me is what happens there every single day. The values are not what is written on a website. The values are the stuff &lt;em&gt;in between the people&lt;/em&gt; every day. It’s the holding the proverbial bucket for the developer who’s just found That Piece of Legacy Code. It’s giving people time and space &lt;em&gt;away from the damn screen&lt;/em&gt; when they need it, no questions asked. It’s allowing people to make mistakes, and not punishing them. It’s about making sure the people doing the work are treated like people.&lt;/p&gt;

&lt;p&gt;These are the values that matter to me. It’s ironic that I write these values, on a page, on a website. But there you go.&lt;/p&gt;

&lt;h2 id=&quot;working-full-time-again&quot;&gt;Working full-time, again&lt;/h2&gt;

&lt;p&gt;I joined &lt;a href=&quot;https://www.fatzebra.com/&quot;&gt;a company&lt;/a&gt; in August. I do a little bit more than “crush code” – I’m working on improving this company’s approach to frontend design and tooling. I’m working on building out a design system. And yes, I get to train up other people too. I spend a lot of my time convincing people that the scary frontend boogeyman is just code, like all the rest of the app. You can understand that, so you can understand this, too. Here’s some pretty buttons you can use.&lt;/p&gt;

&lt;p&gt;I have learned a lot about becoming &lt;em&gt;too invested&lt;/em&gt; in the culture and values of the companies I have worked for in the past. I still struggle with that to this day. That ever-burdensome question of: “am I becoming &lt;em&gt;too&lt;/em&gt; attached here?”. Every day I measure how well I would react if today was the day I was told I was being let go. My mental “grab &amp;amp; go bag” still sits, heavy in my brain. Would I be as upset as those three other times?&lt;/p&gt;

&lt;p&gt;The trauma of being let go three times in 13 months left a deep, mental scar. I trusted people to make decisions, and those decisions were unfavourable.&lt;/p&gt;

&lt;p&gt;At my current job, I get told that my work is deeply appreciated and I feel like my opinion is respected. And I share that opinion in at least what I think is a non-asshole way. And I trust people to tell me if or when I’m being one. I can still hold strong opinions around the right way to do things. But I’ve learned to share those opinions in a nicer way. They’ve even trusted me to interview and hire other people.&lt;/p&gt;

&lt;p&gt;But occassionally, the trauma flares up and says “what if this, too, is all bullshit?”. That’s what counselling is for. I’m grateful that the Australian government subsidises these sessions, and even if they didn’t they’re worth more than their full price. I’ve talked through these feelings, and worked out some coping mechanisms. The trauma flares up less occasionally, and when it does I have things to bat it back with. Lights to push back the darkness. It’s forever present, lurking. But I’m armed now, and I am ready for it.&lt;/p&gt;

&lt;p&gt;I wouldn’t say that I am anywhere near as invested in this company’s culture and values as I have been with previous companies. That isn’t to say that I am &lt;em&gt;uncaring&lt;/em&gt; about the culture or values. I am simply not as attached. I still care about the happiness of the people around me. I reckon that’s what’s essential here. If things were to wrap up today, tomorrow or next week, I would probably cope better than those three other times.&lt;/p&gt;

&lt;p&gt;I choose to work full-time again, to become &lt;em&gt;trusting&lt;/em&gt; of a company again, to help with those &lt;em&gt;interloper&lt;/em&gt; consultant feelings.&lt;/p&gt;

&lt;p&gt;I guess that’s an indicator of personal growth. While trauma does happen, we can always &lt;em&gt;grow around&lt;/em&gt; it. To come up against adversarial situations is a part of what makes us human. We are not alone in these situations, as much as it can feel this way sometimes.&lt;/p&gt;

&lt;p&gt;I hope that sharing a little bit about my history and how I’ve worked through it helps you, either today or into the future.&lt;/p&gt;</content><author><name></name></author><summary type="html">It’s been one year since I was fired.</summary></entry></feed>