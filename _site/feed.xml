<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.2.0">Jekyll</generator><link href="/feed.xml" rel="self" type="application/atom+xml" /><link href="/" rel="alternate" type="text/html" /><updated>2021-07-28T09:06:44+10:00</updated><id>/feed.xml</id><entry><title type="html">On coding tests</title><link href="/2021/07/on-coding-tests" rel="alternate" type="text/html" title="On coding tests" /><published>2021-07-27T00:00:00+10:00</published><updated>2021-07-27T00:00:00+10:00</updated><id>/2021/07/on-coding-tests</id><content type="html" xml:base="/2021/07/on-coding-tests">&lt;p&gt;As you might know, I’ve been &lt;a href=&quot;https://ryanbigg.com/2021/07/job-hunt-q2-2021&quot;&gt;job hunting recently&lt;/a&gt;. I’m at the part of this step for some companies where we’ve had our initial conversation and now they want me to do a coding test.&lt;/p&gt;

&lt;p&gt;But that’s okay, because it “should only take up to 3 hours to do”. Now let’s theoretically say that I’m talking with 5 companies now. That’s &lt;em&gt;15 hours&lt;/em&gt; of my time, that I have to pull out of work, life or sleep, to do these coding tests. All to prove to them that I can code!&lt;/p&gt;

&lt;p&gt;This strikes me as odd because I’m pretty sure I can code.&lt;/p&gt;

&lt;p&gt;I’ve been employed as a developer in one way or another since 2004. That’s 17 years! I’ve had to pass other coding tests in the past to get some of those jobs. I had a lot more free time in my youth and wasn’t such a crotchety old man like I am now.&lt;/p&gt;

&lt;p&gt;I’ve &lt;a href=&quot;https://ryanbigg.com/books&quot;&gt;written books&lt;/a&gt; where I try to teach other people how to code. If I don’t know how to code, how could I teach other people to code? Mystery!&lt;/p&gt;

&lt;p&gt;I’ve recently &lt;a href=&quot;https://www.youtube.com/watch?v=qWdyo3icsjU&quot;&gt;released a 6-part screencast series&lt;/a&gt; where I demonstrate my ability to code in not one, but THREE different languages &lt;strong&gt;AT THE SAME TIME&lt;/strong&gt;! I’m clearly not a 10x developer. Maybe a 3x developer?&lt;/p&gt;

&lt;p&gt;But no, these things don’t count for &lt;em&gt;anything&lt;/em&gt; in the interview process. Maybe I’ve gone too far down the path of tying my self-worth up in these things. The way I feel is: if you don’t value these things I’ve &lt;em&gt;already done&lt;/em&gt;, then you do not value me.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;I can read the replies now:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;but how do we know that you really know how to code, according to our 100% bias-free baseline?&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;We have subjected our other developers to this antiquated hazing ritual so why shouldn’t we subject you to the same?&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Fact is, you don’t. Some people can code really well in interviews and have had lots of practice answering how exactly you go about reversing a purple linked list uphill both ways in the snow. Some people struggle with the pressure of developing something &lt;em&gt;completely solo&lt;/em&gt; and then having that scruitinised in an hour-long live-code-review session.&lt;/p&gt;

&lt;p&gt;I’m personally &lt;em&gt;done&lt;/em&gt; with being hazed in this way. You know I can code. I have proven this with my long tenure in this industry and the stuff I’ve put out in the world.&lt;/p&gt;

&lt;p&gt;Let’s just get down to business. I’ll happily trade labour for dollars. Hold the haze. Use the books, code and screencast I’ve already put out in order to judge my abilities.&lt;/p&gt;</content><author><name></name></author><summary type="html">As you might know, I’ve been job hunting recently. I’m at the part of this step for some companies where we’ve had our initial conversation and now they want me to do a coding test.</summary></entry><entry><title type="html">Using Ruby 2.7’s new triple-dot syntax to clean up service objects</title><link href="/2021/07/ruby-27s-new-triple-dot-syntax" rel="alternate" type="text/html" title="Using Ruby 2.7’s new triple-dot syntax to clean up service objects" /><published>2021-07-21T00:00:00+10:00</published><updated>2021-07-21T00:00:00+10:00</updated><id>/2021/07/ruby-27s-new-triple-dot-syntax</id><content type="html" xml:base="/2021/07/ruby-27s-new-triple-dot-syntax">&lt;p&gt;In big Rails projects there’s been a bit of a push to move things out to &lt;em&gt;service objects&lt;/em&gt;. You might recognise these from their appearance in things like controllers:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-ruby&quot;&gt;CreateBook.new.call(book_params)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The &lt;code&gt;CreateBook&lt;/code&gt; class itself might look like this:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-ruby&quot;&gt;class CreateBook
  include Dry::Monads[:do, :result]

  def call(params)
    book_params = yield validate(params)
    create_book(book_params)
  end
end
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;In order to access that instance &lt;code&gt;call&lt;/code&gt; method from the controller, we must first create an instance of this &lt;code&gt;CreateBook&lt;/code&gt; class. This makes our code &lt;em&gt;slightly&lt;/em&gt; messy because we must always &lt;code&gt;new&lt;/code&gt; before we &lt;code&gt;call&lt;/code&gt;. The &lt;code&gt;call&lt;/code&gt; here &lt;em&gt;must&lt;/em&gt; be an instance method because we’ve included &lt;code&gt;Dry::Monads&lt;/code&gt; methods within instances of this class, as per the best-practices when using that gem.&lt;/p&gt;

&lt;p&gt;However, we can tidy things up here by using Ruby 2.7’s new triple-dot syntax. This syntax is another special type of argument, used in the same place you might use positional or keyword arguments. We can use triple-dots to pass arguments from a class method down to an instance method, like in this example:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-ruby&quot;&gt;class CreateBook
  include Dry::Monads[:do, :result]

  def self.call(...)
    new.call(...)
  end

  def call(params)
    book_params = yield validate(params)
    create_book(book_params)
  end
end
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Anytime the &lt;code&gt;call&lt;/code&gt; method on the &lt;em&gt;class&lt;/em&gt; is called, a new &lt;code&gt;CreateBook&lt;/code&gt; &lt;em&gt;instance&lt;/em&gt; is created, then those arguments from the class-level &lt;code&gt;call&lt;/code&gt; are passed to the instance-level &lt;code&gt;call&lt;/code&gt;. By defining this new &lt;code&gt;call&lt;/code&gt; method on the class itself, we can then change our controller to this:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-ruby&quot;&gt;CreateBook.call(book_params)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This makes our code out to the &lt;code&gt;CreateBook&lt;/code&gt; class from wherever we’re using it slightly easier, while still allowing us to create &amp;amp; use instances of &lt;code&gt;CreateBook&lt;/code&gt; if we wish. One particular case where that might come in handy is if you wanted to inject a dependency here:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-ruby&quot;&gt;CreateBook.new(book_repository: book_repo).call(book_params)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;But that’s a story for another day.&lt;/p&gt;</content><author><name></name></author><summary type="html">In big Rails projects there’s been a bit of a push to move things out to service objects. You might recognise these from their appearance in things like controllers:</summary></entry><entry><title type="html">Job Hunt Q2 2021</title><link href="/2021/07/job-hunt-q2-2021" rel="alternate" type="text/html" title="Job Hunt Q2 2021" /><published>2021-07-19T00:00:00+10:00</published><updated>2021-07-19T00:00:00+10:00</updated><id>/2021/07/job-hunt-q2-2021</id><content type="html" xml:base="/2021/07/job-hunt-q2-2021">&lt;p&gt;After &lt;a href=&quot;https://ryanbigg.com/2021/04/finding-a-new-contract-gig&quot;&gt;wrapping up a contract&lt;/a&gt; earlier in the year, I wrote a post about how I looked for a future job. Now it’s around about the time that &lt;em&gt;that&lt;/em&gt; job is wrapping up. So why not write another post about this hunt? Maybe there are some things that are different.&lt;/p&gt;

&lt;p&gt;Last time I pitched myself as a “mercenary developer wizard”. While I enjoy developing code, nothing brings more joy than developing &lt;em&gt;people&lt;/em&gt;. Running the Culture Amp JEP was some of the most fun-at-work I’ve had. I would love to do that stuff again. So I’ve been pitching myself this time as someone who would rather be developing people, than developing code. I could definitely do both!&lt;/p&gt;

&lt;p&gt;The appetite for this sort of work has been incredibly lacking. It appears from my perspective that more companies are &lt;em&gt;still&lt;/em&gt; more interested in hiring senior “mercenary developer wizards” who can “crush code”, than training up &lt;em&gt;any&lt;/em&gt; developers at all.&lt;/p&gt;

&lt;p&gt;I’ve been &lt;a href=&quot;https://ryanbigg.com/2019/09/hiring-juniors-2019&quot;&gt;banging the drum around hiring juniors&lt;/a&gt; for almost a decade. For the status quo to remain the same for this time is disheartening. Perhaps the developer drought is not severe enough for companies to act. The impetus is not strong enough. &lt;em&gt;Despite&lt;/em&gt; all these companies being so ravenously thirsty for senior developers.&lt;/p&gt;

&lt;p&gt;I dearly, desperately want a job where I am not &lt;em&gt;just&lt;/em&gt; somebody who can crush code, but someone who gets to work with other people to improve their skills. That’s my jam. That’s where I get the joy.&lt;/p&gt;

&lt;p&gt;But, fine. Okay. That job doesn’t (seemingly) exist.&lt;/p&gt;

&lt;p&gt;I need to be real.&lt;/p&gt;

&lt;p&gt;So I’ll just go and pick up a senior dev role at some shop somewhere, “crush code” and earn a paycheck so I can pay my mortgage.&lt;/p&gt;

&lt;p&gt;I’m disheartened by the current outcomes from the current iteration of the job hunting process, but things have changed before and might change again.&lt;/p&gt;

&lt;p&gt;Always the next step.&lt;/p&gt;</content><author><name></name></author><summary type="html">After wrapping up a contract earlier in the year, I wrote a post about how I looked for a future job. Now it’s around about the time that that job is wrapping up. So why not write another post about this hunt? Maybe there are some things that are different.</summary></entry><entry><title type="html">How I found a new contract gig</title><link href="/2021/04/finding-a-new-contract-gig" rel="alternate" type="text/html" title="How I found a new contract gig" /><published>2021-04-29T00:00:00+10:00</published><updated>2021-04-29T00:00:00+10:00</updated><id>/2021/04/finding-a-new-contract-gig</id><content type="html" xml:base="/2021/04/finding-a-new-contract-gig">&lt;p&gt;I’ve resolved this year to work as a developer-for-hire / contractor / sole-trader / mercenary developer wizard. This decision came after what was frankly an unmitigated disaster of a year-and-a-bit with two redundancies in a row topped off with being fired. Thanks, 2020. Go fuck yourself.&lt;/p&gt;

&lt;p&gt;As a “mercenary developer wizard”, I talk to people, we agree to work together for a period of time, we do the work, we make sure everyone’s happy with the work, then they pay me money. Sometimes I’ll tweet the odd rant about how Rails is bad, even though it pays all my bills. It’s a neat arrangement.&lt;/p&gt;

&lt;p&gt;Recently, I’ve had to start looking for work again, this time due to a contract wrapping up. No, I wasn’t fired &lt;em&gt;this time&lt;/em&gt;. We just had a discussion and decided we did almost everything we set out to do together. Amicable!&lt;/p&gt;

&lt;p&gt;It’s a sellers’ market out there at the moment. I have joked in the past while working on the 10th floor of an office building that I could sit at my desk, tweet that I was looking for work, and by the time I was out the front door of the lobby I’d have at least one offer. While this hasn’t yet played out in truth, it’s a bit like that. Fastest “lead time” to being approached for a job was 28 minutes after an initial message.&lt;/p&gt;

&lt;p&gt;So I started my hunt about 2 weeks ago, putting messages out on Twitter, Linked In, and three local Australian Developer Slack groups.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Hello! I’m looking for my next contract starting after May 7th. Remote only, based in Warrnambool. Can code React / TypeScript / CSS / Ruby / Elixir, etc. ~15 years experience. I care about reliable software, up-skilling the team that I join, and leaving things better than I how I found them.&lt;/p&gt;

  &lt;p&gt;There’s a bit more history here: &lt;a href=&quot;https://ryanbigg.com/work&quot;&gt;https://ryanbigg.com/work&lt;/a&gt;.&lt;/p&gt;

  &lt;p&gt;Happy to talk in DM or via email: me@ryanbigg.com&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;Within those 2-and-a-bit weeks, I received 12 offers for future contracts.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;See? Sellers’ market.&lt;/p&gt;

&lt;p&gt;Having no particular allegiance to an industry makes it particularly hard to choose where to go next. However, there’s some places I could exclude right off the bat by using a list I have written up:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Cryptocurrency - Fancy ponzi scheme that does nothing good for the world&lt;/li&gt;
  &lt;li&gt;Advertising / marketing  — slimy.&lt;/li&gt;
  &lt;li&gt;Betting / Gambling — I don’t like gaming other people’s addictive behaviours.&lt;/li&gt;
  &lt;li&gt;Smoking / Vaping — I find smoking in all forms extremely anti-social.&lt;/li&gt;
  &lt;li&gt;Real Estate - I’ve had enough dealings with real estate agents, thank you.&lt;/li&gt;
  &lt;li&gt;Working on an entire team with people like me (white, straight, male)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;While that helped to cull &lt;em&gt;some&lt;/em&gt; of the list, I was still left with about 7.&lt;/p&gt;

&lt;p&gt;What happens next is that reply with a standard professional “no thanks” to those who I’ve “culled”, even though my heart wants to say things like “AW HELL NAH” and “not in a million years, bucko”. Best to reply professionally and they go on their merry way than to start a fight with some internet stranger.&lt;/p&gt;

&lt;p&gt;So then what I need to do is actually &lt;em&gt;talk to people&lt;/em&gt;. If you’re a developer and you’re reading this you might have just had a cold shiver. I know, I know. Talking to people. Over the phone. EWWW. Part of doing business as a consultant. Must be done. Like the washing up and flossing your teeth.&lt;/p&gt;

&lt;p&gt;What I find out here is a few things:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Are you okay with me working only 4 days a week?&lt;/li&gt;
  &lt;li&gt;Are you okay with me working remotely from Warrnambool, Victoria?&lt;/li&gt;
  &lt;li&gt;Are you okay with me not being able to come into your office, ever?&lt;/li&gt;
  &lt;li&gt;What’s the project?&lt;/li&gt;
  &lt;li&gt;How is it helping to improve the world?&lt;/li&gt;
  &lt;li&gt;What’s the potential duration of our engagement?&lt;/li&gt;
  &lt;li&gt;How big is the team?&lt;/li&gt;
  &lt;li&gt;Who’s on the team? What’s the mix of seniority?&lt;/li&gt;
  &lt;li&gt;What’s the tech stack look like?&lt;/li&gt;
  &lt;li&gt;How’s the code deployed to production?&lt;/li&gt;
  &lt;li&gt;How’s the work managed / triaged / approved?&lt;/li&gt;
  &lt;li&gt;(And if I’m feeling cheeky) What’s hard about working there?&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The first 3 questions here are big deal-breakers. I enjoy spending a day of my week free to do writing and chores and then spending the weekend doing things with my family. The Warrnambool thing is… well, it’s where I live. And commuting &lt;em&gt;ever&lt;/em&gt; into an office is a dealbreaker as I’m solo-parenting a 4-year-old, 4-days-a-week and I need to be there for kindergarten drop-off in the morning and pickup in the evening. I really don’t think she’ll want to be waiting for daddy’s train to get back at 10pm at night, do you?&lt;/p&gt;

&lt;p&gt;These initial questions were not okay for some clients, and them’s the breaks. Some people want full-time, some people want hybrid-remote. That’s okay, we can talk about it and say “not yet” and go no further.&lt;/p&gt;

&lt;p&gt;This time around I’ve put a bit of an emphasis on the team composition + size, as I want to spend more time working with more people than I have done thus far for my contracting gig. A bigger team “ranked higher” in my scoring for this round.&lt;/p&gt;

&lt;p&gt;The tech stack / deployment questions give me a bit of data which I like to think of similar to a &lt;a href=&quot;https://en.wikipedia.org/wiki/Kardashev_scale&quot;&gt;Kardashev Scale&lt;/a&gt;. Things I look for here are:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Card kickoffs&lt;/li&gt;
  &lt;li&gt;Software used for tracking work (ala Jira / Trello / etc.)&lt;/li&gt;
  &lt;li&gt;Retrospective frequency&lt;/li&gt;
  &lt;li&gt;Sprint duration&lt;/li&gt;
  &lt;li&gt;How is tech debt prioritised?&lt;/li&gt;
  &lt;li&gt;Is there one shared staging environment, or can you deploy a pull request to its own staging environment?&lt;/li&gt;
  &lt;li&gt;Is there more than one frontend framework at play?&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This information gives me an idea of how (dys)functional things are currently, and gives me a good idea of where I could potentially help to improve things. Every tech company is dysfunctional at &lt;em&gt;something&lt;/em&gt;, and so I try and drag it out of people during the interview phase first, before I find out about it while working there. Because I will find out.&lt;/p&gt;

&lt;p&gt;All of this above information goes into a huge database (read: cyclone) in my brain and mixes around in there for days on end.&lt;/p&gt;

&lt;p&gt;In particularly this time around I’m looking for:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;A team larger than 2.&lt;/li&gt;
  &lt;li&gt;Comprised of a mix of skill levels (because there’s some training opportunities there!)&lt;/li&gt;
  &lt;li&gt;A team that can rely on each other to get things done, and relies on each others’ skills&lt;/li&gt;
  &lt;li&gt;Solving a real-world, real-human problem (&lt;em&gt;not fucking cryptocurrency&lt;/em&gt;)&lt;/li&gt;
  &lt;li&gt;A tech stack that’s cared for and maintained&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Ultimately, this helped it narrow it down from &lt;em&gt;7&lt;/em&gt; to &lt;em&gt;1&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Then I spent more time thinking about it by asking myself questions like:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Would I feel proud to have worked here after 3-6 months?&lt;/li&gt;
  &lt;li&gt;Would I want to &lt;em&gt;continue&lt;/em&gt; working here after that time, if it was offered?&lt;/li&gt;
  &lt;li&gt;If I told people what I was working on, would it matter to them? Would they see the utility of it?&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;And that really helped me make the final decision and to know that this was the right decision to make.&lt;/p&gt;

&lt;p&gt;So on May 10th, I’ll start working at a new gig, still writing Rails (and tweeting about it) and some TypeScript / React for the next 3 months, working on a mid-sized team, helping everyone get to where we need to be. And possibly longer than that!&lt;/p&gt;</content><author><name></name></author><summary type="html">I’ve resolved this year to work as a developer-for-hire / contractor / sole-trader / mercenary developer wizard. This decision came after what was frankly an unmitigated disaster of a year-and-a-bit with two redundancies in a row topped off with being fired. Thanks, 2020. Go fuck yourself.</summary></entry><entry><title type="html">View Components: The Missing Link</title><link href="/2021/04/view-components-the-missing-link" rel="alternate" type="text/html" title="View Components: The Missing Link" /><published>2021-04-07T00:00:00+10:00</published><updated>2021-04-07T00:00:00+10:00</updated><id>/2021/04/view-components-the-missing-link</id><content type="html" xml:base="/2021/04/view-components-the-missing-link">&lt;p&gt;There has been an uptick in making Rails play nice with React recently, made possible by gems such as &lt;a href=&quot;https://github.com/reactjs/react-rails&quot;&gt;react-rails&lt;/a&gt;. The &lt;code&gt;react-rails&lt;/code&gt; gem allows you to inject React components into your Rails views like this:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-erb&quot;&gt;&amp;lt;%= react_component(&quot;HelloWorld&quot;, { greeting: &quot;Hello from react-rails.&quot; }) %&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The first argument here is the component name, and the hash at the end is the props that get passed down to the component.&lt;/p&gt;

&lt;p&gt;This gem serves a very useful purpose, but I think there’s a missing link here and I want to show you what that link is, and how best to leverage it.&lt;/p&gt;

&lt;h3 id=&quot;complicated-props-crowd-up-the-view&quot;&gt;Complicated props crowd up the view&lt;/h3&gt;

&lt;p&gt;Sometimes, we want to pass a bunch of props through to a React component. Maybe it starts out as one prop and then grows to ten props. This can get really messy:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-erb&quot;&gt;&amp;lt;%= react_component(&quot;UserPicker&quot;, { users: @users.map { |user| { value: user.id, label: user.name }} }, selectedUserIds: @selected_user_ids }) %&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;As a component grows in complexity, the amount of Ruby in the view continues to grow and grow. Views are sometimes treated like a dumping ground: “well, this &lt;em&gt;can’t&lt;/em&gt; go in the model and it &lt;em&gt;shouldn’t&lt;/em&gt; go in the controller… guess I’ll just leave it here in the view!”&lt;/p&gt;

&lt;p&gt;Yes, this could be more clearly written with some line breaks:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-erb&quot;&gt;&amp;lt;%= react_component(&quot;UserPicker&quot;, {
  users: @users.map do |user|
    { value: user.id, label: user.name }
  end,
  selectedUserIds: @selected_user_ids
}) %&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;But that still feels quite clunky!&lt;/p&gt;

&lt;h3 id=&quot;enter-view-components&quot;&gt;Enter, view components&lt;/h3&gt;

&lt;p&gt;GitHub, has released a gem called &lt;a href=&quot;https://github.com/github/view_component/&quot;&gt;view_component&lt;/a&gt; which aims to solve this problem in a neat way. The &lt;code&gt;view_component&lt;/code&gt; gem defines new classes where you can put complicated view logic, and separates those views into their own directory too.&lt;/p&gt;

&lt;p&gt;Let’s take our &lt;code&gt;UserPicker&lt;/code&gt; component from above. This now becomes a class called &lt;code&gt;UserPickerComponent&lt;/code&gt;, and lives at &lt;code&gt;app/components&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-ruby&quot;&gt;class UserPickerComponent &amp;lt; ViewComponent::Base
  attr_reader :users, :selected_user_ids

  def initialize(users:, selected_user_ids:)
    @users = users
    @selected_user_ids = selected_user_ids
  end

  def props
    user_props = @users.map { |user| { value: user.id, label: user.name } }

    {
      users: user_props,
      selectedUserIds: @selected_user_ids
    }
  end
end
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;That’s much nicer! Our Ruby code is now where it belongs: in a &lt;em&gt;Ruby&lt;/em&gt; file. The code that converts the users to an array-of-hashes with &lt;code&gt;value&lt;/code&gt; and &lt;code&gt;label&lt;/code&gt; key now feels at home in this file and has stopped clogging up our ERB file.&lt;/p&gt;

&lt;p&gt;But where’s our ERB code that renders this React component? Isn’t that back over in &lt;code&gt;app/views&lt;/code&gt;? Well, yeah it is! But we can move that code now into the &lt;em&gt;other half&lt;/em&gt; of &lt;code&gt;view_component&lt;/code&gt;, a special view component ERB file at &lt;code&gt;app/components/user_picker.html.erb&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-erb&quot;&gt;&amp;lt;%= helpers.react_component &quot;UserPicker&quot;, **props %&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;View component renders components using a combination of the Ruby class and the ERB template, both named the smae.&lt;/p&gt;

&lt;p&gt;To access the &lt;code&gt;react_component&lt;/code&gt; helper, we need to use the &lt;code&gt;helpers&lt;/code&gt; method provided by &lt;code&gt;view_component&lt;/code&gt;. But there’s not much difference here to what we had earlier in a view.&lt;/p&gt;

&lt;p&gt;The main thing to note is that our Ruby code now lives in a Ruby file, and the code to render the React component lives over in the component’s view. If we had any additional HTML that was required to be wrapped around this component, this is where it would belong too. I’ve left that out to make things simple here.&lt;/p&gt;

&lt;h3 id=&quot;rendering-a-view-component&quot;&gt;Rendering a view component&lt;/h3&gt;

&lt;p&gt;With the Ruby and ERB nicely separated into a view &lt;em&gt;component&lt;/em&gt;, it’s time to add that code back to our view. We will first need to initialize the component in the controller action:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-ruby&quot;&gt;def new
  @user_picker_component = UserPickerComponent.new(
    users: @users,
    selected_user_ids: @selected_user_ids,
  )
end
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Then we can render the component, just like we would render a partial, by calling &lt;code&gt;render&lt;/code&gt; in the view for the action:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-erb&quot;&gt;&amp;lt;%= render(@user_picker_component) %&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And there you have it, a clear separation between the responsibilities for rendering a React component within a Rails application. We now have:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;The controller action: responsible for collection information based on the request, and prepares the component&lt;/li&gt;
  &lt;li&gt;The view: tells Rails where we want to put the component&lt;/li&gt;
  &lt;li&gt;The component Ruby class: container for any Ruby code that we need to run &lt;em&gt;before&lt;/em&gt; rendering our React component, but &lt;em&gt;after&lt;/em&gt; the controller has done its duty&lt;/li&gt;
  &lt;li&gt;The component view file: a clearly separated file that concerns itself with only rendering a React component&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;translations&quot;&gt;Translations&lt;/h3&gt;

&lt;blockquote class=&quot;twitter-tweet&quot;&gt;&lt;p lang=&quot;en&quot; dir=&quot;ltr&quot;&gt;How are people taking i18n translations and making them available to React components these days?&lt;/p&gt;&amp;mdash; Ryan Bigg (@ryanbigg) &lt;a href=&quot;https://twitter.com/ryanbigg/status/1379259002731646979?ref_src=twsrc%5Etfw&quot;&gt;April 6, 2021&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async=&quot;&quot; src=&quot;https://platform.twitter.com/widgets.js&quot; charset=&quot;utf-8&quot;&gt;&lt;/script&gt;

&lt;p&gt;A few days ago, I started experimenting with the right ways to pass translations down to these React components from Ruby.&lt;/p&gt;

&lt;p&gt;A few replies to the above tweet were along the lines of “just load all 644kb of JSONified I18n translations on every page load! Your users will love you!” and if this is supposed to be the latest-and-greatest of web development please let me off this wild ride.&lt;/p&gt;

&lt;p&gt;Having a view component means that we have somewhere that we can run calls to &lt;code&gt;I18n.t&lt;/code&gt;, and then pass these as strings through to our React component. Here, let’s have a look:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-ruby&quot;&gt;class UserPickerComponent &amp;lt; ViewComponent::Base
  attr_reader :users, :selected_user_ids

  def initialize(users:, selected_user_ids:)
    @users = users
    @selected_user_ids = selected_user_ids
  end

  def props
    user_props = @users.map { |user| { value: user.id, label: user.name } }

    {
      users: user_props,
      selectedUserIds: @selected_user_ids
      translations: translations
    }
  end

  private

  def translations
    scope = &quot;users.picker&quot;

    {
      selectAUser: helpers.t(&quot;select_a_user&quot;, scope: scope)
    }
  end
end
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;In the component file, we’re now defining an extra method called &lt;code&gt;translations&lt;/code&gt;. This is then going to add one extra prop to our React component, and definitely &lt;em&gt;won’t&lt;/em&gt; be sending 664kb of JSONified I18n translations to our users.&lt;/p&gt;

&lt;p&gt;To access these translations in the component, we access them the same as any other property:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-tsx&quot;&gt;const UserPicker = ({ translations, users, seelectedUserIds}) =&amp;gt; {

  return (
    // ...
    &amp;lt;p&amp;gt;{translations.selectAUser}&amp;lt;/p&amp;gt;
  )
}
&lt;/code&gt;&lt;/pre&gt;</content><author><name></name></author><summary type="html">There has been an uptick in making Rails play nice with React recently, made possible by gems such as react-rails. The react-rails gem allows you to inject React components into your Rails views like this:</summary></entry><entry><title type="html">The Bikeshed</title><link href="/2021/03/the-bikeshed" rel="alternate" type="text/html" title="The Bikeshed" /><published>2021-03-29T00:00:00+11:00</published><updated>2021-03-29T00:00:00+11:00</updated><id>/2021/03/the-bikeshed</id><content type="html" xml:base="/2021/03/the-bikeshed">&lt;p&gt;Hello.&lt;/p&gt;

&lt;p&gt;This is a meeting to discuss the bike shed project. I called this 2.5hr long meeting (running until 1pm) on a Monday so we can start the week by deciding the way forward for the bike shed project.&lt;/p&gt;

&lt;p&gt;As the senior consultant here I have some ideas.&lt;/p&gt;

&lt;p&gt;The previous bike shed colour did not test well with our beta users and we were particularly ravaged by that one guy on Twitter in an extensive 46-tweet thread. Turns out, chatruese is his ex-wife’s favourite colour. Due to the above reasons, we will be deciding on a new colour for the bike sheds.&lt;/p&gt;

&lt;p&gt;We are A/B testing new colours with a focus group that is including not only bike riders but also drivers, motorbike riders and those people with the electronic skateboards. The upcoming Bike Shed 2.0 project will be catering for their needs too.&lt;/p&gt;

&lt;p&gt;Dave 3 from our consulting team has determined that the previous consultants did a poor job architecting the bike shed and as such it is not up to code. Daves 2 through 5 recommend a rebuild, while Daves 1 and 6 are still on the fence. That is, they’re on BAU work for the Fence Alpha release that was due out a week and a half ago.&lt;/p&gt;

&lt;p&gt;Dave 3 estimates the rebuild of the bike shed will take approximately 3 months, which coincidentally is two weeks longer than our contract lasts for. We will talk to the management here about renewing our contract for another 12 months.&lt;/p&gt;

&lt;p&gt;Are there any questions before we begin?&lt;/p&gt;</content><author><name></name></author><summary type="html">Hello.</summary></entry><entry><title type="html">Maintainable Rails</title><link href="/2021/03/maintainable-rails" rel="alternate" type="text/html" title="Maintainable Rails" /><published>2021-03-23T00:00:00+11:00</published><updated>2021-03-23T00:00:00+11:00</updated><id>/2021/03/maintainable-rails</id><content type="html" xml:base="/2021/03/maintainable-rails">&lt;p&gt;&lt;em&gt;This is the Preface from my book, &lt;a href=&quot;https://leanpub.com/maintain-rails&quot;&gt;Maintainable Rails&lt;/a&gt;, available on Leanpub for half-price ($10USD) for the next month. Maintainable Rails demonstrates how to separate out the distinct responsibilities of a Rails application into smaller classes, leading to a more maintainable Rails application architecture.&lt;/em&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;When Rails came out, it was revolutionary. There was an order to everything.&lt;/p&gt;

&lt;p&gt;Code for your business logic or code that talks to the database &lt;em&gt;obviously&lt;/em&gt;
belongs in the model.&lt;/p&gt;

&lt;p&gt;Code that presents data in either HTML or JSON formats &lt;em&gt;obviously&lt;/em&gt; belongs in
the view.&lt;/p&gt;

&lt;p&gt;Any special (or complex) view logic goes into helpers.&lt;/p&gt;

&lt;p&gt;The thing that ties all of this together is &lt;em&gt;obviously&lt;/em&gt; the controller.&lt;/p&gt;

&lt;p&gt;It was (and still is) neat and orderly. Getting started with a Rails
application is incredibly easy thanks to everything having a pre-assigned home.&lt;/p&gt;

&lt;p&gt;The Rails Way™ enforces these conventions and suggests that this is the
One True Way™ to organise a Rails application. This Rails Way™ suggests that,
despite there being over a decade since Rails was crafted, that there still is
no better way to organise an application than the MVC pattern that Rails
originally came with.&lt;/p&gt;

&lt;p&gt;While I agree that this way is still extremely simple and great for &lt;em&gt;getting
started&lt;/em&gt; within a Rails application, I do not agree that this is the best way to
organise a Rails application in 2021 with long-term maintenance in mind.&lt;/p&gt;

&lt;p&gt;As a friend of mine, &lt;a href=&quot;https://twitter.com/bjeanes&quot;&gt;Bo Jeanes&lt;/a&gt; put it neatly once:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Code is written for the first time only once.&lt;/p&gt;

  &lt;p&gt;Then there is anywhere between 0 and infinite days of having to change that code, understand that code, move that code, delete that code, document that code, etc. Rails makes it easy to write that code and to do some of those things early on, but often harder to do all the those things on an ongoing basis.&lt;/p&gt;

  &lt;p&gt;We benefit by being patient in that first period and maybe trading off some of that efficiency for a clarity and momentum for the &lt;em&gt;life&lt;/em&gt; of the project.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;A decade of Ruby development has produced some great alternatives to Rails’
MVC directory structure that are definitely worthwhile to consider.&lt;/p&gt;

&lt;p&gt;In this book, I want to show an &lt;em&gt;alternative&lt;/em&gt; viewpoint on how a Rails
application should be organised in order to increase its maintainability.&lt;/p&gt;

&lt;p&gt;These are the best pieces that I’ve found to work for me and others.&lt;/p&gt;

&lt;p&gt;This research for how to construct a better Rails application comes out of 15 years worth of developing Rails applications.&lt;/p&gt;

&lt;p&gt;To best understand why this alternative architecture is a better approach, we must first understand the ways in which Rails has failed.&lt;/p&gt;

&lt;h2 id=&quot;where-rails-falls-down&quot;&gt;Where Rails falls down&lt;/h2&gt;

&lt;p&gt;The Original Rails Way™ falls down in at least three major areas in my opinion. Three major areas that have to do with organization. Coincidentally (or not), these three areas are the major highlights of the way Rails suggests you organize applications: models, controllers, and views.&lt;/p&gt;

&lt;p&gt;Let’s start with controllers.&lt;/p&gt;

&lt;h2 id=&quot;messy-controllers&quot;&gt;Messy controllers&lt;/h2&gt;

&lt;p&gt;The controller’s actions talk to the model, asking the model to create, read, update or delete records in a database. And then this controller code might do more: send emails, enqueue background jobs, make requests to external services. There is no pre-determined, widely agreed-upon location for this logic; the controller is the de facto place. A controller action can often have request logic, business logic, external API calls and response logic all tied up in the one method, typically inside the action itself.&lt;/p&gt;

&lt;p&gt;If this logic is not inside of the actions themselves, it is then likely found in private methods at the bottom of the controller. This leads to a common anti-pattern seen in Rails applications, one called the “iceberg controller”. What appears to be a small handful of clean actions is actually masking 100+ lines of private methods defined underneath. It is not immediately clear from scanning through these private methods which private method is used in which action. Or even if they &lt;em&gt;are&lt;/em&gt; used at all!&lt;/p&gt;

&lt;p&gt;Testing all these intertwining parts individually is hard work. To make sure that it all works together, you often have to write many feature and/or request tests to test the different ways that the controller action is called and utilized. The logic of the controller’s actions – those calls out to the model – get intimately acquainted with the logic for handling the request and response for that action. The lines between the incoming request, the business logic and the outgoing response become blurred. The controller’s responsibilities are complex because there is no other sensible place for this code to go.&lt;/p&gt;

&lt;h2 id=&quot;the-problems-with-active-record-models&quot;&gt;The problems with Active Record Models&lt;/h2&gt;

&lt;p&gt;Controllers are bad, but models are worse. In order to remove complexity from controllers, it has been suggested to move that logic to the models instead – the “Fat model, skinny controller” paradigm.&lt;/p&gt;

&lt;p&gt;An Active Record model is responsible for &lt;em&gt;at least&lt;/em&gt; the following things:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Mapping database rows to Ruby objects&lt;/li&gt;
  &lt;li&gt;Containing validation rules for those objects&lt;/li&gt;
  &lt;li&gt;Managing the CRUD operations of those objects in the database (through
inheritance from &lt;code&gt;ActiveRecord::Base&lt;/code&gt;)&lt;/li&gt;
  &lt;li&gt;Providing a place to put code to run before those CRUD operations (callbacks)&lt;/li&gt;
  &lt;li&gt;Containing complicated database queries&lt;/li&gt;
  &lt;li&gt;Containing business logic for your application&lt;/li&gt;
  &lt;li&gt;Defining associations between different models&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;If you were to colour each responsibility of your model, it might look something like this:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/maintainable_rails/normal_model_clean.png&quot; alt=&quot;Normal model&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Or really, it might look like this:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/maintainable_rails/normal_model.png&quot; alt=&quot;Normal model&quot; /&gt;&lt;/p&gt;

&lt;p&gt;In traditional Rails models, all of this gets muddled together in the model,
making it very hard to disentangle code that talks to the database and code
that is working with plain-Ruby objects.&lt;/p&gt;

&lt;p&gt;For instance, if you saw this code:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;class Project &amp;lt; ApplicationRecord
has_many :tickets

  def contributors
    tickets.map(&amp;amp;:user).uniq
  end
end
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You might know &lt;em&gt;instinctively&lt;/em&gt; that this code is going to make a database call
to the &lt;code&gt;tickets&lt;/code&gt; association for the &lt;code&gt;Project&lt;/code&gt; instance, and then for each of
these &lt;code&gt;Ticket&lt;/code&gt; objects it’s going to call its &lt;code&gt;user&lt;/code&gt; method, which will load a
&lt;code&gt;User&lt;/code&gt; record from the database.&lt;/p&gt;

&lt;p&gt;Someone unfamiliar with Rails – like, say, a junior Ruby developer with very
little prior Rails exposure – might think this is bog-standard Ruby code
because that’s &lt;em&gt;exactly&lt;/em&gt; what it looks like. That is what Rails is designed to look like. There’s something called
&lt;code&gt;tickets&lt;/code&gt;, and you’re calling a &lt;code&gt;map&lt;/code&gt; method on it, so they might guess that
&lt;code&gt;tickets&lt;/code&gt; is an array. Then &lt;code&gt;uniq&lt;/code&gt; further indicates that. But &lt;code&gt;tickets&lt;/code&gt; is an
association method, and so a database query is made to load all the associated
tickets.&lt;/p&gt;

&lt;p&gt;This kind of code is very, very easy to write in a Rails application because
Rails applications are intentionally designed to be easy. &lt;a href=&quot;http://youtu.be/Gzj723LkRJY&quot;&gt;“Look at all the
things I’m &lt;em&gt;not&lt;/em&gt; doing”&lt;/a&gt; and &lt;a href=&quot;http://rubyonrails.org/doctrine/#provide-sharp-knives&quot;&gt;“provide sharp
knives”&lt;/a&gt; and all that.&lt;/p&gt;

&lt;p&gt;However, this code executes one query to load all the &lt;code&gt;tickets&lt;/code&gt;, and then one
query &lt;em&gt;per ticket&lt;/em&gt; to fetch its users. If we called this method in the console, then the query output might look like this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Project Load (0.2ms)  SELECT  &quot;projects&quot;.* FROM &quot;projects&quot; ORDER BY &quot;projects&quot;.&quot;id&quot; ASC LIMIT ?  [[&quot;LIMIT&quot;, 1]]
Ticket Load (0.1ms)  SELECT &quot;tickets&quot;.* FROM &quot;tickets&quot; WHERE &quot;tickets&quot;.&quot;project_id&quot; = ?  [[&quot;project_id&quot;, 1]]
User Load (0.1ms)  SELECT  &quot;users&quot;.* FROM &quot;users&quot; WHERE &quot;users&quot;.&quot;id&quot; = ? LIMIT ?  [[&quot;id&quot;, 1], [&quot;LIMIT&quot;, 1]]
User Load (0.1ms)  SELECT  &quot;users&quot;.* FROM &quot;users&quot; WHERE &quot;users&quot;.&quot;id&quot; = ? LIMIT ?  [[&quot;id&quot;, 2], [&quot;LIMIT&quot;, 1]]
User Load (0.1ms)  SELECT  &quot;users&quot;.* FROM &quot;users&quot; WHERE &quot;users&quot;.&quot;id&quot; = ? LIMIT ?  [[&quot;id&quot;, 3], [&quot;LIMIT&quot;, 1]]
User Load (0.1ms)  SELECT  &quot;users&quot;.* FROM &quot;users&quot; WHERE &quot;users&quot;.&quot;id&quot; = ? LIMIT ?  [[&quot;id&quot;, 1], [&quot;LIMIT&quot;, 1]]
User Load (0.1ms)  SELECT  &quot;users&quot;.* FROM &quot;users&quot; WHERE &quot;users&quot;.&quot;id&quot; = ? LIMIT ?  [[&quot;id&quot;, 2], [&quot;LIMIT&quot;, 1]]
User Load (0.1ms)  SELECT  &quot;users&quot;.* FROM &quot;users&quot; WHERE &quot;users&quot;.&quot;id&quot; = ? LIMIT ?  [[&quot;id&quot;, 3], [&quot;LIMIT&quot;, 1]]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This is a classic N+1 query, which Rails does not stop you from doing. It’s a
classic Active Record footgun / sharp knife. And this is all because Active Record makes it
&lt;em&gt;much&lt;/em&gt; too easy to call out to the database. This code
for &lt;code&gt;Project#contributors&lt;/code&gt; combines business logic intent (“find me all the
contributors to this project”) with database querying and it’s &lt;em&gt;the&lt;/em&gt; major
problem with Active Record’s design.&lt;/p&gt;

&lt;p&gt;What’s worse, is that you can make a database call &lt;em&gt;wherever a model is used in a Rails application&lt;/em&gt;. If you use a model in a view, a view can make a database call. A view helper can. Anywhere! Rails’ attitude to this is one of “this is fine”, because they provide sharp knives and you’re supposed to trust the “omakase chefs” of the Rails core team. Constant vigilance can be exhausting, however.&lt;/p&gt;

&lt;p&gt;Database queries are cheap to make because Active Record makes it so darn
easy. When looking at the performance of a large, in-production Rails
application, the number one thing I come across is slow database queries
caused by methods just like this. Programmers writing innocent looking Ruby
code that triggers not-so-innocent database activity is something that I’ve
had to fix too many times within a Rails application.&lt;/p&gt;

&lt;p&gt;Active Record makes it way too easy to make calls to the database. Once these
database calls are ingrained in the model like this and things start depending
on those calls being made, it becomes hard to refactor this code to reduce
those queries. Even tracking down where queries are being made can be
difficult due to the natural implicitness that &lt;em&gt;some&lt;/em&gt; method calls produce
database queries.&lt;/p&gt;

&lt;p&gt;Thankfully, there are tools like &lt;a href=&quot;https://appsignal.com&quot;&gt;AppSignal&lt;/a&gt;, &lt;a href=&quot;https://skylight.io&quot;&gt;Skylight&lt;/a&gt; and &lt;a href=&quot;https://newrelic.com&quot;&gt;New
Relic&lt;/a&gt; that point directly at the “smoking guns” of
performance hits in a Rails application. Tools like these are invaluable. It
would be nice to not need them so much in the first place, however.&lt;/p&gt;

&lt;p&gt;The intention here with the &lt;code&gt;contributors&lt;/code&gt; method is very innocent: get all the
users who have contributed to the project by iterating through all the tickets
and finding their users. If we had a &lt;code&gt;Project&lt;/code&gt; instance (&lt;a href=&quot;https://github.com/rails/rails&quot;&gt;with thousands of
tickets&lt;/a&gt;), running that contributors method
would cause thousands of database queries to be executed against our database.&lt;/p&gt;

&lt;p&gt;Of course, there is a way to make this all into two queries through Rails:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;class Project &amp;lt; ApplicationRecord
  def contributors
    tickets.includes(:user).map(&amp;amp;:user).uniq
  end
end
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This will load all the tickets &lt;em&gt;and&lt;/em&gt; their users in two separate queries,
rather than one for tickets and then one for each ticket’s user, thanks to the
&lt;em&gt;power of eager loading&lt;/em&gt;. (Which you can &lt;a href=&quot;http://guides.rubyonrails.org/active_record_querying.html#eager-loading-associations&quot;&gt;read more about in the Active Record
Querying
guide&lt;/a&gt;.)&lt;/p&gt;

&lt;p&gt;The queries look like this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Ticket Load (0.4ms)  SELECT &quot;tickets&quot;.* FROM &quot;tickets&quot; WHERE &quot;tickets&quot;.&quot;project_id&quot; = ?  [[&quot;project_id&quot;, 1]]
User Load (0.4ms)  SELECT &quot;users&quot;.* FROM &quot;users&quot; WHERE &quot;users&quot;.&quot;id&quot; IN (1, 5)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Active Record loads all the ticket objects that it needs to, and then it issues
a query to find all the users that match the &lt;code&gt;user_id&lt;/code&gt; values from all the
tickets.&lt;/p&gt;

&lt;p&gt;You can of course not load all the tickets at the start either, you could load
only the 100 most recent tickets:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;class Project &amp;lt; ApplicationRecord
  def contributors
    tickets.recent.includes(:user).map(&amp;amp;:user).uniq
  end
end

class Ticket &amp;lt; ApplicationRecord
  scope :recent, -&amp;gt; { limit(100) }
end
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;But I think this is still too much of a mish-mash of database querying and
business logic. Where is the clear line between database querying and business
logic in this method? It’s hard to tell. This is because Active
Record &lt;em&gt;allows&lt;/em&gt; us to do this sort of super-easy querying; intertwining
Active Record’s tentacles with our business logic.&lt;/p&gt;

&lt;h2 id=&quot;views&quot;&gt;Views&lt;/h2&gt;

&lt;p&gt;Views in a typical Rails application are used to define logic for how to present data from models once this data has been fetched by controllers.&lt;/p&gt;

&lt;p&gt;We’ve already discussed how Active Record allows you to execute additional queries in any context that a model is used. Typically additional queries like the &lt;code&gt;tickets&lt;/code&gt; and &lt;code&gt;contributors&lt;/code&gt; ones above will be executed in a view. There’s no clear barrier between models and views to prevent this from happening.&lt;/p&gt;

&lt;p&gt;This sort of “leakage” makes it very hard for views to be used in complete isolation from a database. The moment a view uses a model is the moment that the view is now potentially tied to a database. For example: could you look at a view and quickly know how many, if any, database queries were being executed? Probably not.&lt;/p&gt;

&lt;p&gt;To define any sort of Ruby logic for views, Rails recommends using view helpers. Perhaps we want to render a particular avatar for users:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;module UsersHelper
  def avatar
    image_tag(user.avatar_url || &quot;anonymous.png&quot;)
  end
end
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And then we were to use this in our view over at &lt;code&gt;app/views/projects/show.html.erb&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;ul&amp;gt;
  &amp;lt;% @project.tickets.each do |ticket| %&amp;gt;
    &amp;lt;li&amp;gt;&amp;lt;%= avatar(ticket.author) %&amp;gt;&amp;lt;/li&amp;gt;
  &amp;lt;% end %&amp;gt;
&amp;lt;/ul&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This code is defined in a helper file at &lt;code&gt;app/helpers/users_helper.rb&lt;/code&gt;, but is used in a completely separate directory, under a completely different namespace. The distance between where the code is &lt;em&gt;defined&lt;/em&gt; and where it is &lt;em&gt;used&lt;/em&gt; is very far apart.&lt;/p&gt;

&lt;p&gt;On top of all that, helpers are then shared across &lt;em&gt;all&lt;/em&gt; views. So while the helper is defined in &lt;code&gt;UsersHelper&lt;/code&gt;, it will be available for &lt;em&gt;all&lt;/em&gt; views. If you define a helper in &lt;code&gt;UsersHelper&lt;/code&gt;, then it is also available under views at &lt;code&gt;app/views/tickets&lt;/code&gt;, or &lt;code&gt;app/views/projects&lt;/code&gt;, too.&lt;/p&gt;

&lt;p&gt;Because of this “wide sharing” of view helpers, we don’t know if changing it is going to have ramifications elsewhere in our application. If we change it for this &lt;em&gt;one&lt;/em&gt; context, will it potentially break other areas? We cannot know without looking through our code diligently.&lt;/p&gt;

&lt;h3 id=&quot;presenters&quot;&gt;Presenters&lt;/h3&gt;

&lt;p&gt;A common way to approach solving this problem is through the &lt;em&gt;presenter&lt;/em&gt; pattern. Presenters define classes that then “accentuate” models. They’re typically used to include presentational logic for models – things that would be “incorrect” to put in a model, but okay to put in a view.&lt;/p&gt;

&lt;p&gt;By using a presenter, we have a clear indicator of where the presenter’s method is used: look for things like &lt;code&gt;UserPresenter.new(user)&lt;/code&gt;, and then that’ll be where it is used.&lt;/p&gt;

&lt;p&gt;Here’s our &lt;code&gt;avatar&lt;/code&gt; example, but this time in a presenter:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;class UserPresenter
  def avatar
    image_tag(user.avatar_url || &quot;anonymous.png&quot;)
  end
end
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;To use this, we would then need to initialize a new instance of this presenter per user object:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;ul&amp;gt;
  &amp;lt;% @project.tickets.each do |ticket| %&amp;gt;
    &amp;lt;li&amp;gt;&amp;lt;%= UserPresenter.new(ticket.author).avatar %&amp;gt;&amp;lt;/li&amp;gt;
  &amp;lt;% end %&amp;gt;
&amp;lt;/ul&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This then muddles together the Ruby and HTML code of our view. A way to solve this could be to move that preparation of the data into a helper:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;module TicketsHelper
  def author_avatar(author)
    UserPresenter.new(author).avatar
  end
end
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Then in the view:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;ul&amp;gt;
  &amp;lt;% @project.tickets.each do |ticket| %&amp;gt;
    &amp;lt;li&amp;gt;&amp;lt;%= author_avatar(ticket.author) %&amp;gt;&amp;lt;/li&amp;gt;
  &amp;lt;% end %&amp;gt;
&amp;lt;/ul&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We have now got the logic for rendering an avatar spread over three different points:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;The view&lt;/li&gt;
  &lt;li&gt;The presenter&lt;/li&gt;
  &lt;li&gt;The helper&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;This is not a very clear way to organize this code, and the more this pattern is used, the more confusing your application will get.&lt;/p&gt;

&lt;p&gt;Views in a default Rails application leave us with no alternative other than to create a sticky combined mess of logic between our ERB files and helper files that are globally shared.&lt;/p&gt;

&lt;h2 id=&quot;we-can-do-better&quot;&gt;We can do better&lt;/h2&gt;

&lt;p&gt;It should be possible to render a view without relying on a model to be connected to a database. Being
able to reach into the database from your views &lt;em&gt;should&lt;/em&gt; be hard work.
Your business logic should have everything it needs to work by the stage a view is being rendered. This will then make it easier to test the view in isolation from the other components of your application.&lt;/p&gt;

&lt;p&gt;The source of these frustrations is the Active Record pattern and Rails’ strict adherence to it. A class containing only business logic and being passed some data should not need
to know also about how that data is validated, any “callbacks” or how that data
is persisted too. If a class knows about all of those things, it has too many
responsibilities.&lt;/p&gt;

&lt;p&gt;The Single Responsibility Principle says that a class or a module should only
be responsible for one aspect of the application’s behaviour. It should only
have one reason to change. An Active Record model of any meaningful size has
many different reasons to change. Maybe there’s a validation that needs
tweaking, or an association to be added. How about a scope, a class method or a
plain old regular method, like the contributors one? All more reasons why
changes could happen to the class.&lt;/p&gt;

&lt;p&gt;An Active Record model flies in the face of the Single Responsibility
Principle. I would go as far as to say this: Active Record leads you to writing
code that is hard to maintain from the very first time you set foot in a Rails
application. Just look at any sizable Rails application. The models are
usually the messiest part and I really believe Active Record – both the
design pattern and the gem that implements that pattern – is the cause.&lt;/p&gt;

&lt;p&gt;Having a well-defined boundary between different pieces of code makes it easier
to work with each piece. Active Record does not encourage this.&lt;/p&gt;

&lt;p&gt;Validations and persistence should be their own separate responsibilities and separated into
different classes, as should business logic. There should be specific, dedicated classes that only
have the responsibility of talking to the database. Clear lines between the
responsibilities here makes it so much easier to work with this code.&lt;/p&gt;

&lt;p&gt;It becomes easier then to say: this class works with only validations and this
other class talks to the database. There’s no muddying of the waters between
the responsibilities of the classes. Each class has perhaps not &lt;em&gt;one&lt;/em&gt; reason to
change, but at least &lt;em&gt;fewer&lt;/em&gt; reasons to change than Active Record classes.&lt;/p&gt;

&lt;p&gt;It’s possible to build a Rails application with distinct classes for validations, persistence and logic that concerns itself with data from database records. It’s possible to build one that does not combine a heap of messy logic in a controller action, muddling it in with request and response handling.&lt;/p&gt;

&lt;p&gt;Just because DHH &amp;amp; friends decided in 2006 that there was One True Way™ to build a Rails application – it does not mean that now in 2021, a full 15 years later, that we need to hew as close to that as possible.&lt;/p&gt;

&lt;p&gt;We can explore other pathways. This is a book dedicated to charting that exploration, leading to a brighter future for your Rails application.&lt;/p&gt;

&lt;p&gt;The way we’re going to &lt;em&gt;improve&lt;/em&gt; upon the default Rails architecture is with two suites of gems: those from the &lt;a href=&quot;https://dry-rb.org/&quot;&gt;dry-rb&lt;/a&gt; suite, and those from the &lt;a href=&quot;https://rom-rb.org&quot;&gt;rom-rb&lt;/a&gt; suite.&lt;/p&gt;

&lt;p&gt;We’ll be using these gems to clearly demarcate the lines between responsibilities for our application.&lt;/p&gt;

&lt;p&gt;We’ll have particular classes that will separate the code that validates user input from the code that talks to a database.&lt;/p&gt;

&lt;p&gt;We’ll take apart the intermingling of request-response handling and business logic from within our controllers, and move that out to another set of distinct classes.&lt;/p&gt;

&lt;p&gt;We’ll move code that would typically be in a view or a helper, into yet another type of distinct class: one called a &lt;em&gt;view component&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;And with this, we’ll move forward into that bright future that’ll lead to your Rails applications being maintainable.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;_If you want to find out how to build maintainable Rails applications, read my book: &lt;a href=&quot;https://leanpub.com/maintain-rails&quot;&gt;Maintainable Rails&lt;/a&gt;, available on Leanpub for $10 for the next month.&lt;/p&gt;</content><author><name></name></author><summary type="html">This is the Preface from my book, Maintainable Rails, available on Leanpub for half-price ($10USD) for the next month. Maintainable Rails demonstrates how to separate out the distinct responsibilities of a Rails application into smaller classes, leading to a more maintainable Rails application architecture.</summary></entry><entry><title type="html">Contracting as a developer in Australia</title><link href="/2021/03/getting-started-with-contracting-in-australia" rel="alternate" type="text/html" title="Contracting as a developer in Australia" /><published>2021-03-04T00:00:00+11:00</published><updated>2021-03-04T00:00:00+11:00</updated><id>/2021/03/getting-started-with-contracting-in-australia</id><content type="html" xml:base="/2021/03/getting-started-with-contracting-in-australia">&lt;p&gt;(All advice in this blog post is of a general nature and comes with the regular disclaimers, such as: “I am not a lawyer / tax agent”, etc. etc. If you have questions about the law or your tax obligations, talk to real lawyers, tax agents or even the people at the ATO.)&lt;/p&gt;

&lt;p&gt;(This blog post will be updated as I find out more things about contracting – there is definitely more to learn!)&lt;/p&gt;

&lt;p&gt;After working as a developer full-time for a number of years, I’ve decided to give that a break. And instead I’m now working full-time as a sole-trader contractor instead.&lt;/p&gt;

&lt;p&gt;Maybe it was the two redundancies and then being fired. Maybe it was the “ride or die” / undying loyalty that companies want from their employees now. Who knows what truly led to this ridiculous decision to work as a solo contractor.&lt;/p&gt;

&lt;p&gt;It wasn’t supposed to be full-time – but having two months off work does &lt;em&gt;nasty&lt;/em&gt; things to your bank account. Alas. So I’m working full-time (for now) as a contractor, hoping to reduce that to 4 days in the near future.&lt;/p&gt;

&lt;p&gt;Another developer by the name of Susan Pan asked these questions on an Australian web developer Slack group recently:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Hey everyone, was wondering if there are any people here with contracting experience? I’m new to the industry and also new to contracting so I have no idea about the logistics of it all (working out a salary, need an abn?, legal protections, etc). I’d be super appreciative if anyone has any time to chat/dm about their experience? Thanks!&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Here’s my (slightly edited) answers to those questions, and I’ll add a bit extra here too that I didn’t include there. Just for you!&lt;/p&gt;

&lt;h2 id=&quot;abn&quot;&gt;ABN&lt;/h2&gt;

&lt;p&gt;If you’re working as a contractor within Australia it’s likely that you’ll need an ABN. You can &lt;a href=&quot;https://abr.gov.au/ABRWeb/Default.aspx?Target=CheckAbnEntitlement&amp;amp;pid=71&quot;&gt;check your ABN eligibility here&lt;/a&gt;. I have an ABN. You can look it up!&lt;/p&gt;

&lt;p&gt;An ABN helps identify transactions between businesses within Australia. The government will &lt;em&gt;probably&lt;/em&gt; require you to have one, so I would suggest getting one as a first point of call. But! Check your eligibility first.&lt;/p&gt;

&lt;h2 id=&quot;money&quot;&gt;Money&lt;/h2&gt;

&lt;h3 id=&quot;working-out-a-daily-rate&quot;&gt;Working out a daily rate&lt;/h3&gt;

&lt;p&gt;I contract out at a daily rate that was worked out based on what I was previously paid ($150k as a senior Ruby / JavaScript dev), plus a bit of extra padding to account for things like 1) making my own tax + super contributions 2) giving myself annual leave and sick leave.&lt;/p&gt;

&lt;p&gt;I am now charging out at [redacted] as a contractor, working 8 hour days (with an hour lunch break somewhere in there, unpaid). This works out to [redacted]/day, which is a nice round number that makes me happy.&lt;/p&gt;

&lt;p&gt;This base-hour number is a point-in-time sample and may vary, depending on circumstances. Someone else on that same Slack group gave this advice:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;The best advice I ever got for setting your rate is “think of the highest number you can say with a straight face, then say that number”&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;That’s essentially how I work out my number, too. What I will say is that if I was working full-time at this rate that I would make somewhere north of $200k/yr, pre-tax. The overall plan is to &lt;em&gt;not&lt;/em&gt; work full-time, and to work part-time instead.&lt;/p&gt;

&lt;p&gt;What clients get for that number is someone with a decade and a half of web development experience in many different teams of different shapes and sizes, with a good knowledge across many different languages. And: “he wrote &lt;em&gt;the book on Rails!&lt;/em&gt;”&lt;/p&gt;

&lt;h3 id=&quot;invoicing&quot;&gt;Invoicing&lt;/h3&gt;

&lt;p&gt;Invoicing: get yourself a &lt;a href=&quot;https://xero.com&quot;&gt;Xero&lt;/a&gt; subscription and hook it up to your bank account. Dedicate a time on a particular morning each week to track expenses in Xero and issue invoices or to follow up unpaid invoices.&lt;/p&gt;

&lt;p&gt;Expense tracking is incredibly helpful for depreciating things around tax time like the “tools of the trade”: laptops, chairs, desks, pencils, pens, rulers… if you use it for a job, keep the receipt (in Xero) and list it under business expenses.&lt;/p&gt;

&lt;p&gt;On that same topic: talk to a tax agent around tax time. Again, this is another couple-of-hundred-dollars worth of expenses but the good ones will save you more than what you pay them in raw time-value. The tax agent bill can then be expensed the next financial year. Your tax agent’s job is to sift through the data you’ve diligently collected in Xero and to help you pay the correct amount of tax, or even in some cases to get a tax refund if you’ve overpaid in your tax obligations.&lt;/p&gt;

&lt;h3 id=&quot;gst&quot;&gt;GST&lt;/h3&gt;

&lt;p&gt;Speaking of tax: if you’re earning over $75k, you’ll need to &lt;a href=&quot;https://www.ato.gov.au/Business/GST/Registering-for-GST/&quot;&gt;register for GST as well&lt;/a&gt;. The ATO purports to have the facilities to do this online, but when I tried using their app it shit the bed (maybe they need to hire more contractors?) and so I had to call them up. Even though I had to wait a while, the agent was super helpful and guided me through all the steps.&lt;/p&gt;

&lt;p&gt;I’m now registered for GST, which means that I need to &lt;em&gt;collect&lt;/em&gt; GST from the clients that I charge, and then pay that money every quarter to the government, through a process called a Business Activity Statement. You take &lt;em&gt;all&lt;/em&gt; the money you charged for GST, &lt;em&gt;minus&lt;/em&gt; the GST on purchases you’ve paid for the business, and that’s then your BAS payment for the quarter.&lt;/p&gt;

&lt;p&gt;Xero has a great automatic tool for calculating BAS.&lt;/p&gt;

&lt;h3 id=&quot;whats-it-going-to-take-to-run-the-business-this-month&quot;&gt;What’s it going to take to run the business this month?&lt;/h3&gt;

&lt;p&gt;Once I’ve invoiced the client, received the money and correctly set aside the GST amount, it’s math time.&lt;/p&gt;

&lt;p&gt;For the sole-tradership that I operate, there are business expenses that need to be taken of on usually a monthly recurring rate. There are some that are &lt;em&gt;yearly&lt;/em&gt; as well. These provide me with a baseline cost of what it’s going to take to run the business this month. The yearly ones get divided by 12 and treated like a monthly cost, except the money is transferred into the business savings account.&lt;/p&gt;

&lt;h3 id=&quot;pay-yourself&quot;&gt;Pay yourself&lt;/h3&gt;

&lt;p&gt;Using that base number, I can then work out that my &lt;a href=&quot;https://www.ato.gov.au/rates/individual-income-tax-rates/&quot;&gt;income tax rate&lt;/a&gt; is somewhere in the range of 37c-45c in the dollar (after certain amounts), depending on if I end up making more than $180k this year or not. This depends on how many weeks I can work this year. This is impossible to predict, given the nature of contracting work. Tide goes in, tide goes out.&lt;/p&gt;

&lt;p&gt;So I err on the side of it being 45c instead of 37c. To make the mental math easy, I take whatever I get paid and put away half (50%) of that into a savings account that is then, essentially, untouchable. That then goes to paying my quarterly BAS bills that I get from the government with the money set aside for tax reasons listed in the BAS as a “tax withheld” amount.&lt;/p&gt;

&lt;p&gt;Previously, I was on a Pay-as-you-go quarterly payment plan with the government thanks to my &lt;a href=&quot;https://leanpub.com&quot;&gt;Leanpub royalties&lt;/a&gt; – but that’ll be changing to a quarterly Business Activity Statement soon due to the increased nature of my “business’s” earnings.&lt;/p&gt;

&lt;p&gt;My effective tax rate is not exactly 37c or 45c on the dollar for every dollar – it’s important to note here that it’s 37c on every dollar &lt;em&gt;over&lt;/em&gt; $120,000. So if my annual income was $150,000, the tax would not be $55,500 ($150k x 0.37). It would be more like: $150,000 - $120,000 = $30,000. Then that $30,000 x 0.37 = $11,100, plus the base rate of $29,467, or $40,567, or about 27% of $150k. An important distinction to make here!&lt;/p&gt;

&lt;p&gt;By the time tax time comes around and I talk to my tax agent (below), we do some math and work out how much additional tax I need to pay. Hopefully this amount is zero, and that there’s also a nice tax return attached to that. If it’s not, no sweat: the money in the business savings account will cover it.&lt;/p&gt;

&lt;p&gt;If there’s still leftover money in the savings account after all that then that gets rolled into the general transaction account for the business and I’ll spend it on things that I need, or transfer it into my family’s accounts as an extra bonus.&lt;/p&gt;

&lt;p&gt;I then take 9.5% of whatever I get paid and put that directly into my superannuation. When I retire, I want money to be able to live, so this is a sensible choice. I could contribute more here.&lt;/p&gt;

&lt;p&gt;I also take 5% out of this total amount for leave entitlements. I am (unfortunately) not invulnerable, so I will need paid sick leave from &lt;em&gt;somewhere&lt;/em&gt;, and occasionally I might like to leave my computer so annual leave needs to be accounted for too. This really should be somewhere in the range of 11-12%, as annual + sick leave entitlements are usually in the range of 6 weeks of the year (11.5% of the year)… but I’m bootstrapping my consulting business now and I’m choosing to take fewer leave days for the moment.&lt;/p&gt;

&lt;p&gt;By this point I’ve deducted these things from my business’s income:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Running the business expenses&lt;/li&gt;
  &lt;li&gt;Tax obligations (both GST + personal income tax)&lt;/li&gt;
  &lt;li&gt;Superannuation&lt;/li&gt;
  &lt;li&gt;Leave entitlements&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The rest of this money then goes into my family’s bank accounts.&lt;/p&gt;

&lt;h2 id=&quot;get-it-in-writing&quot;&gt;Get it in writing&lt;/h2&gt;

&lt;p&gt;Next up: contracts!&lt;/p&gt;

&lt;p&gt;My wife is an ex-lawyer and read over a contract that I drafted using my significant (read: completely lacking) legal expertise.&lt;/p&gt;

&lt;p&gt;Having a Real Lawyer™ look over the contract ensures that I’m not missing obvious things (like including GST in payments, dummy!). Get yourself a contract lawyer who can do the same.&lt;/p&gt;

&lt;p&gt;The contract is designed to answer the who, what, why, where, when, how questions:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Who’s this contract between?&lt;/li&gt;
  &lt;li&gt;What’s this contract about?&lt;/li&gt;
  &lt;li&gt;Why are we entering into this agreement?&lt;/li&gt;
  &lt;li&gt;Where are we gonna be doing the work?&lt;/li&gt;
  &lt;li&gt;For how long is this work going to happen?&lt;/li&gt;
  &lt;li&gt;How are we going to work together?&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Get a contract. Get it signed.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;You cannot be a contractor without a contract. You will be an “or”. Nobody wants an “or”&lt;/strong&gt;. Get it in writing. Get it signed. Dated. As the wise Jeff Casimir once said, contracts are written while in love, but only ever used in hate. You will want a good one for when shit hits the fan. And it will hit the fan.&lt;/p&gt;

&lt;p&gt;If you agree to some work, it’s in writing &lt;em&gt;in your personal email account, not in their company’s Slack&lt;/em&gt;. It’s timestamped, filed away and easily accessible. Can you find that documentation with minimal effort? You better be able to.&lt;/p&gt;

&lt;h2 id=&quot;getting-paid&quot;&gt;Getting paid&lt;/h2&gt;

&lt;p&gt;In order to make it ridiculously easy for people to pay me, I work with Australian-only clients &lt;em&gt;and&lt;/em&gt; I offer two different payment methods: bank transfer or PayPal. Anyone who’s adulted a single day in Australia will know how to do a bank transfer between Australian bank accounts. Australian-only clients means that I don’t need to worry about international transfer fees, currency conversions or tracking alternative income for tax purposes. PayPal is for the occasional international client, and for Leanpub royalties.&lt;/p&gt;

&lt;p&gt;I issue invoices (through Xero) fortnightly for one week gone, and one week coming. For example, if I was issuing an invoice on next Monday, the 8th of March, that invoice would cover all my work for the week of the 1st-5th of March &lt;em&gt;and also&lt;/em&gt; the work that I would do during the week of the 8th-12th March. If I (unexpectedly) take time off that week, it would be deducted from the following invoice. That invoice would be on the 22nd of March, and would cover 15th-19th and 22nd-26th March, and so on and so on.&lt;/p&gt;

&lt;p&gt;On the topic of getting paid: all my invoices are 14 days payable. This means that if an invoice is issued on, say, the 8th of March, then it must be paid by the time the 22nd of March comes around.&lt;/p&gt;

&lt;p&gt;If the invoice is not paid by that time, then I will stop working. No exceptions. No “check is in the mail”, no “I’ll pay you next week”. If the money is not in the bank account by the very day the invoice says it is due, the work does not get done. Absofuckinglutely not.&lt;/p&gt;

&lt;p&gt;Why am I so bullish on this point? Because I’ve been dicked around before, and I &lt;em&gt;will not&lt;/em&gt; let it happen again. As a contractor, I rely on a steady stream of income to support my family and the moment that is cut off is the very moment I will need to start finding a new stream.&lt;/p&gt;

&lt;p&gt;Take pride in yourself as a contractor and have the same rules.&lt;/p&gt;

&lt;h3 id=&quot;billable-hours&quot;&gt;Billable hours&lt;/h3&gt;

&lt;p&gt;On a related topic: billable hours. Did you spend time working for a client between the hours of 9am and 5pm? That’s billable time. Did you spend time outside of those hours working for the client? Maybe you had an on-call incident in the middle of the night or had to work a weekend? That’s billable too. Get it in writing in the contract that it’s a thing that &lt;em&gt;might&lt;/em&gt; happen, and &lt;em&gt;bill for it&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Conversely: did you spend an hour at a dentist appointment? That’s not billable. Haircut? Unbillable. Had a case of the “dunwannas” and needed to lie on the couch? Don’t you dare think about billing for it.&lt;/p&gt;

&lt;p&gt;When it comes to invoicing clients for hours worked, keep it honest in &lt;em&gt;both directions&lt;/em&gt;. Bill for the hours you’ve worked (even if they’re slightly outside of the agreed time) and do not bill for the hours you did not work for them. Honesty is the best policy here.&lt;/p&gt;

&lt;h2 id=&quot;leave-the-campsite-better-than-how-you-found-it&quot;&gt;Leave the campsite better than how you found it&lt;/h2&gt;

&lt;p&gt;The header of this section is a Scouts motto. After attending the scouts for precisely zero days of my life, this statement &lt;em&gt;still&lt;/em&gt; resonates with me.&lt;/p&gt;

&lt;p&gt;I care about the long-term viability of your codebase, company and team, not just the money coming in the door. The money in the door helps me keep my family alive and happy. The work I deliver at your company keeps &lt;em&gt;your&lt;/em&gt; families alive and happy, and I want that to remain that way long-term. If it remains that way, it’s likely you’ll keep me as a contractor or at least recommend me to your favourite people.&lt;/p&gt;

&lt;p&gt;I’ve had to work on codebases where contractors who &lt;em&gt;didn’t&lt;/em&gt; care about those things (“oh fuck we’ve only got 2 weeks shipitshipitshipit”) and it was miserable. I don’t want misery – I want happiness. I want people to go “yeah, you should hire Ryan because he came in for 3 months and did X, Y and Z and rocked our socks.” Yeah it’s nice being paid, but the &lt;em&gt;success&lt;/em&gt; of doing a good job is what counts.&lt;/p&gt;</content><author><name></name></author><summary type="html">(All advice in this blog post is of a general nature and comes with the regular disclaimers, such as: “I am not a lawyer / tax agent”, etc. etc. If you have questions about the law or your tax obligations, talk to real lawyers, tax agents or even the people at the ATO.)</summary></entry><entry><title type="html">Twist V2 - Live Coding</title><link href="/2021/01/twist-v2-live-coding" rel="alternate" type="text/html" title="Twist V2 - Live Coding" /><published>2021-01-13T00:00:00+11:00</published><updated>2021-01-13T00:00:00+11:00</updated><id>/2021/01/twist-v2-live-coding</id><content type="html" xml:base="/2021/01/twist-v2-live-coding">&lt;p&gt;This year, I’ve been continuing on my work on &lt;a href=&quot;https://github.com/radar/twist-v2&quot;&gt;Twist&lt;/a&gt;. As the README says:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;This is a rewrite of my &lt;a href=&quot;http://github.com/radar/twist&quot;&gt;Rails-based book review app&lt;/a&gt; in &lt;a href=&quot;https://rom-rb.org/&quot;&gt;rom-rb&lt;/a&gt;, &lt;a href=&quot;https://dry-rb.org/&quot;&gt;dry-rb&lt;/a&gt;, (some parts of) &lt;a href=&quot;https://hanamirb.org/&quot;&gt;Hanami&lt;/a&gt;, &lt;a href=&quot;https://sidekiq.org/&quot;&gt;Sidekiq&lt;/a&gt;, &lt;a href=&quot;https://graphql.org/&quot;&gt;GraphQL&lt;/a&gt;, &lt;a href=&quot;https://reactjs.org/&quot;&gt;React&lt;/a&gt;, &lt;a href=&quot;https://reach.tech/router/&quot;&gt;Reach Router&lt;/a&gt;, &lt;a href=&quot;https://www.apollographql.com/&quot;&gt;Apollo&lt;/a&gt;, &lt;a href=&quot;https://www.typescriptlang.org/&quot;&gt;TypeScript&lt;/a&gt;, &lt;a href=&quot;https://graphql-code-generator.com/&quot;&gt;GraphQL Code Generator&lt;/a&gt;, &lt;a href=&quot;https://tailwindcss.com/&quot;&gt;Tailwind&lt;/a&gt;, and whatever other Cool Hipster Tech™ I can get my grubby hands on.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;This application is a hybrid application, consisting of two distinct parts: a Ruby backend, and a TypeScript frontend. They communicate over GraphQL.&lt;/p&gt;

&lt;p&gt;To demonstrate what working on this application is like, I’m doing some live coding sessions on it, every Wednesday morning.&lt;/p&gt;

&lt;h2 id=&quot;episode-1-starting-the-invitations-feature&quot;&gt;Episode 1: Starting the invitations feature&lt;/h2&gt;

&lt;iframe width=&quot;560&quot; height=&quot;315&quot; src=&quot;https://www.youtube.com/embed/qWdyo3icsjU&quot; frameborder=&quot;0&quot; allow=&quot;accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;

&lt;h2 id=&quot;episode-2-continuing-the-invitations-feature&quot;&gt;Episode 2: Continuing the invitations feature&lt;/h2&gt;

&lt;iframe width=&quot;560&quot; height=&quot;315&quot; src=&quot;https://www.youtube.com/embed/RKQLEEGIPyE&quot; frameborder=&quot;0&quot; allow=&quot;accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;

&lt;h2 id=&quot;episode-3-checking-for-permissions-on-the-invitations&quot;&gt;Episode 3: Checking for permissions on the invitations&lt;/h2&gt;

&lt;iframe width=&quot;560&quot; height=&quot;315&quot; src=&quot;https://www.youtube.com/embed/Bg1W8-SzbHw &quot; frameborder=&quot;0&quot; allow=&quot;accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;</content><author><name></name></author><summary type="html">This year, I’ve been continuing on my work on Twist. As the README says:</summary></entry><entry><title type="html">React Select + Capybara + Selenium</title><link href="/2020/09/react-select-capybara-selenium" rel="alternate" type="text/html" title="React Select + Capybara + Selenium" /><published>2020-09-23T00:00:00+10:00</published><updated>2020-09-23T00:00:00+10:00</updated><id>/2020/09/react-select-capybara-selenium</id><content type="html" xml:base="/2020/09/react-select-capybara-selenium">&lt;p&gt;Today, I was adding a &lt;a href=&quot;https://react-select.com/home&quot;&gt;React Select&lt;/a&gt; element to a page, and I really wanted to test it.&lt;/p&gt;

&lt;p&gt;This is, surprisingly, &lt;a href=&quot;https://github.com/JedWatson/react-select/issues/856&quot;&gt;not the first time I’ve attempted this&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Since 2016, React Select has undergone some changes, released a brand-new (and much better!) version. One of these big features is that it uses &lt;a href=&quot;https://emotion.sh/docs/introduction&quot;&gt;Emotion&lt;/a&gt; for styling. A consequence of this is that React Select no longer has &lt;code&gt;.Select&lt;/code&gt;, or &lt;code&gt;.Select-input&lt;/code&gt; classes that you could use as selectors in the tests. Instead, it will generate hashed CSS selectors, like &lt;code&gt;css-2b097c-container&lt;/code&gt; and &lt;code&gt;css-1rhbuit-multiValue&lt;/code&gt;. These have the potential to change: if the underlying CSS changes, then the hash will change. So they are not reliable in tests.&lt;/p&gt;

&lt;p&gt;To fix this, I used another prop of &lt;code&gt;ReactSelect&lt;/code&gt; called &lt;code&gt;classNamePrefix&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-tsx&quot;&gt;import CreatableSelect from &quot;react-select/creatable&quot;;

// ...

const options = [
  { label: &quot;Admin&quot;, value: &quot;Admin&quot; },
  { label: &quot;HIU&quot;, value: &quot;HIU&quot; },
  { label: &quot;Organisational&quot;, value: &quot;Organisational&quot; },
  { label: &quot;Paid&quot;, value: &quot;Paid&quot; },
];

// &quot;tags&quot; here comes from a prop on this component
const selectedOptions = options.filter(({ value }) =&amp;gt; tags.includes(value));

return (
  &amp;lt;CreatableSelect
    options={options}
    defaultValue={selectedOptions}
    isMulti
    classNamePrefix=&quot;tags&quot;
  /&amp;gt;
);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This prop adds additional classes to the React Select component, such as &lt;code&gt;.tags__control&lt;/code&gt; and &lt;code&gt;.tags__multi-value&lt;/code&gt; – values that &lt;em&gt;are&lt;/em&gt; reliable and predictable!&lt;/p&gt;

&lt;p&gt;This means that in the Capybara test, I can now use these to interact with this React Select component, like this:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-ruby&quot;&gt;# spec/support/filter_helpers.rb
module FilterHelpers
  class SelectControl
    include Capybara::DSL

    attr_reader :prefix

    def initialize(prefix:)
      @prefix = prefix
    end

    def select(option)
      within_control do
        find(&quot;input&quot;).fill_in(with: option)
      end

      find(&quot;.#{prefix}__option&quot;, text: option).click
    end

    def value
      find(single_value_selector).text
    end

    def blank?
      page.has_no_selector?(single_value_selector)
    end

    def values
      all(multi_value_selector).map(&amp;amp;:text)
    end

    def remove(label)
      value = find(multi_value_selector, text: label)
      within(value) do
        find(&quot;#{multi_value_selector}__remove&quot;).click
      end
    end

    def visible?
      page.has_selector?(control_selector)
    end

    def hidden?
      !visible?
    end

    private

    def single_value_selector
      &quot;.#{prefix}__single-value&quot;
    end

    def multi_value_selector
      &quot;.#{prefix}__multi-value&quot;
    end

    def control_selector
      &quot;.#{prefix}__control&quot;
    end

    def within_control(&amp;amp;block)
      within(control_selector, &amp;amp;block)
    end
  end

  module TagFilterControl
    def tag_filter_control
      SelectControl.new(prefix: &quot;tags&quot;)
    end

    def add_new_tag(tag)
      tags_control.select(tags)
    end

    def expect_tags_selected(tags)
      expect(tags_control.value).to eq(tags)
    end

    def expect_no_tags_selected
      expect(tags_control).to be_blank
    end

    def remove_tags(*tags)
      tags.each do |tag|
        tags_control.remove(tag)
      end
    end
  end
end

# spec/features/updating_tags_spec.rb

RSpec.describe &quot;Updating tags&quot; do
  include TagFilterControl

  scenario &quot;Can update a User's tags&quot;, js: true do
    visit edit_admin_user_path(user)

    expect_tags_selected(&quot;Existing tag&quot;)
    remove_tag(&quot;HIU&quot;)
    add_new_tag(&quot;Paid&quot;)
    add_new_tag(&quot;Custom tag&quot;)
  end
end
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I have the following helpers:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;code&gt;expect_selected_tag&lt;/code&gt;: When the page loads, the Select element should contain a tag that is &lt;em&gt;already&lt;/em&gt; assigned to the user.&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;remove_tag&lt;/code&gt;: Used to remove a tag that appears in the Select element.&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;add_new_tag&lt;/code&gt;: Used to add either a tag from the list of options, or to create a brand new tag.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;With these helpers, I can effectively test React Select within Capybara and Selenium.&lt;/p&gt;</content><author><name></name></author><summary type="html">Today, I was adding a React Select element to a page, and I really wanted to test it.</summary></entry></feed>